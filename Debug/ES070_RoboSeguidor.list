
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800c4dc  0800c4dc  0000d4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c59c  0800c59c  0000e098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c59c  0800c59c  0000d59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5a4  0800c5a4  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5a4  0800c5a4  0000d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5a8  0800c5a8  0000d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c5ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  20000098  0800c644  0000e098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  0800c644  0000ead4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b56  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b1  00000000  00000000  0002ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001438  00000000  00000000  000347d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b00e  00000000  00000000  00035c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224ca  00000000  00000000  00060c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116f72  00000000  00000000  000830e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a05a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073fc  00000000  00000000  0019a0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001a149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c4c4 	.word	0x0800c4c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800c4c4 	.word	0x0800c4c4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_d2f>:
 8000648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800064c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000650:	bf24      	itt	cs
 8000652:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000656:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800065a:	d90d      	bls.n	8000678 <__aeabi_d2f+0x30>
 800065c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000660:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000664:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000668:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800066c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000670:	bf08      	it	eq
 8000672:	f020 0001 	biceq.w	r0, r0, #1
 8000676:	4770      	bx	lr
 8000678:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800067c:	d121      	bne.n	80006c2 <__aeabi_d2f+0x7a>
 800067e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000682:	bfbc      	itt	lt
 8000684:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000688:	4770      	bxlt	lr
 800068a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800068e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000692:	f1c2 0218 	rsb	r2, r2, #24
 8000696:	f1c2 0c20 	rsb	ip, r2, #32
 800069a:	fa10 f30c 	lsls.w	r3, r0, ip
 800069e:	fa20 f002 	lsr.w	r0, r0, r2
 80006a2:	bf18      	it	ne
 80006a4:	f040 0001 	orrne.w	r0, r0, #1
 80006a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006b4:	ea40 000c 	orr.w	r0, r0, ip
 80006b8:	fa23 f302 	lsr.w	r3, r3, r2
 80006bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006c0:	e7cc      	b.n	800065c <__aeabi_d2f+0x14>
 80006c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006c6:	d107      	bne.n	80006d8 <__aeabi_d2f+0x90>
 80006c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006cc:	bf1e      	ittt	ne
 80006ce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006d2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006d6:	4770      	bxne	lr
 80006d8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006dc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <__aeabi_uldivmod>:
 80006e8:	b953      	cbnz	r3, 8000700 <__aeabi_uldivmod+0x18>
 80006ea:	b94a      	cbnz	r2, 8000700 <__aeabi_uldivmod+0x18>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	bf08      	it	eq
 80006f0:	2800      	cmpeq	r0, #0
 80006f2:	bf1c      	itt	ne
 80006f4:	f04f 31ff 	movne.w	r1, #4294967295
 80006f8:	f04f 30ff 	movne.w	r0, #4294967295
 80006fc:	f000 b96a 	b.w	80009d4 <__aeabi_idiv0>
 8000700:	f1ad 0c08 	sub.w	ip, sp, #8
 8000704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000708:	f000 f806 	bl	8000718 <__udivmoddi4>
 800070c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <__udivmoddi4>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	9d08      	ldr	r5, [sp, #32]
 800071e:	460c      	mov	r4, r1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14e      	bne.n	80007c2 <__udivmoddi4+0xaa>
 8000724:	4694      	mov	ip, r2
 8000726:	458c      	cmp	ip, r1
 8000728:	4686      	mov	lr, r0
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	d962      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000730:	b14a      	cbz	r2, 8000746 <__udivmoddi4+0x2e>
 8000732:	f1c2 0320 	rsb	r3, r2, #32
 8000736:	4091      	lsls	r1, r2
 8000738:	fa20 f303 	lsr.w	r3, r0, r3
 800073c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000740:	4319      	orrs	r1, r3
 8000742:	fa00 fe02 	lsl.w	lr, r0, r2
 8000746:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074a:	fa1f f68c 	uxth.w	r6, ip
 800074e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000752:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000756:	fb07 1114 	mls	r1, r7, r4, r1
 800075a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075e:	fb04 f106 	mul.w	r1, r4, r6
 8000762:	4299      	cmp	r1, r3
 8000764:	d90a      	bls.n	800077c <__udivmoddi4+0x64>
 8000766:	eb1c 0303 	adds.w	r3, ip, r3
 800076a:	f104 30ff 	add.w	r0, r4, #4294967295
 800076e:	f080 8112 	bcs.w	8000996 <__udivmoddi4+0x27e>
 8000772:	4299      	cmp	r1, r3
 8000774:	f240 810f 	bls.w	8000996 <__udivmoddi4+0x27e>
 8000778:	3c02      	subs	r4, #2
 800077a:	4463      	add	r3, ip
 800077c:	1a59      	subs	r1, r3, r1
 800077e:	fa1f f38e 	uxth.w	r3, lr
 8000782:	fbb1 f0f7 	udiv	r0, r1, r7
 8000786:	fb07 1110 	mls	r1, r7, r0, r1
 800078a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078e:	fb00 f606 	mul.w	r6, r0, r6
 8000792:	429e      	cmp	r6, r3
 8000794:	d90a      	bls.n	80007ac <__udivmoddi4+0x94>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 31ff 	add.w	r1, r0, #4294967295
 800079e:	f080 80fc 	bcs.w	800099a <__udivmoddi4+0x282>
 80007a2:	429e      	cmp	r6, r3
 80007a4:	f240 80f9 	bls.w	800099a <__udivmoddi4+0x282>
 80007a8:	4463      	add	r3, ip
 80007aa:	3802      	subs	r0, #2
 80007ac:	1b9b      	subs	r3, r3, r6
 80007ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007b2:	2100      	movs	r1, #0
 80007b4:	b11d      	cbz	r5, 80007be <__udivmoddi4+0xa6>
 80007b6:	40d3      	lsrs	r3, r2
 80007b8:	2200      	movs	r2, #0
 80007ba:	e9c5 3200 	strd	r3, r2, [r5]
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d905      	bls.n	80007d2 <__udivmoddi4+0xba>
 80007c6:	b10d      	cbz	r5, 80007cc <__udivmoddi4+0xb4>
 80007c8:	e9c5 0100 	strd	r0, r1, [r5]
 80007cc:	2100      	movs	r1, #0
 80007ce:	4608      	mov	r0, r1
 80007d0:	e7f5      	b.n	80007be <__udivmoddi4+0xa6>
 80007d2:	fab3 f183 	clz	r1, r3
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d146      	bne.n	8000868 <__udivmoddi4+0x150>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d302      	bcc.n	80007e4 <__udivmoddi4+0xcc>
 80007de:	4290      	cmp	r0, r2
 80007e0:	f0c0 80f0 	bcc.w	80009c4 <__udivmoddi4+0x2ac>
 80007e4:	1a86      	subs	r6, r0, r2
 80007e6:	eb64 0303 	sbc.w	r3, r4, r3
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d0e6      	beq.n	80007be <__udivmoddi4+0xa6>
 80007f0:	e9c5 6300 	strd	r6, r3, [r5]
 80007f4:	e7e3      	b.n	80007be <__udivmoddi4+0xa6>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	f040 8090 	bne.w	800091c <__udivmoddi4+0x204>
 80007fc:	eba1 040c 	sub.w	r4, r1, ip
 8000800:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000804:	fa1f f78c 	uxth.w	r7, ip
 8000808:	2101      	movs	r1, #1
 800080a:	fbb4 f6f8 	udiv	r6, r4, r8
 800080e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000812:	fb08 4416 	mls	r4, r8, r6, r4
 8000816:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800081a:	fb07 f006 	mul.w	r0, r7, r6
 800081e:	4298      	cmp	r0, r3
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x11c>
 8000822:	eb1c 0303 	adds.w	r3, ip, r3
 8000826:	f106 34ff 	add.w	r4, r6, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x11a>
 800082c:	4298      	cmp	r0, r3
 800082e:	f200 80cd 	bhi.w	80009cc <__udivmoddi4+0x2b4>
 8000832:	4626      	mov	r6, r4
 8000834:	1a1c      	subs	r4, r3, r0
 8000836:	fa1f f38e 	uxth.w	r3, lr
 800083a:	fbb4 f0f8 	udiv	r0, r4, r8
 800083e:	fb08 4410 	mls	r4, r8, r0, r4
 8000842:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000846:	fb00 f707 	mul.w	r7, r0, r7
 800084a:	429f      	cmp	r7, r3
 800084c:	d908      	bls.n	8000860 <__udivmoddi4+0x148>
 800084e:	eb1c 0303 	adds.w	r3, ip, r3
 8000852:	f100 34ff 	add.w	r4, r0, #4294967295
 8000856:	d202      	bcs.n	800085e <__udivmoddi4+0x146>
 8000858:	429f      	cmp	r7, r3
 800085a:	f200 80b0 	bhi.w	80009be <__udivmoddi4+0x2a6>
 800085e:	4620      	mov	r0, r4
 8000860:	1bdb      	subs	r3, r3, r7
 8000862:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000866:	e7a5      	b.n	80007b4 <__udivmoddi4+0x9c>
 8000868:	f1c1 0620 	rsb	r6, r1, #32
 800086c:	408b      	lsls	r3, r1
 800086e:	fa22 f706 	lsr.w	r7, r2, r6
 8000872:	431f      	orrs	r7, r3
 8000874:	fa20 fc06 	lsr.w	ip, r0, r6
 8000878:	fa04 f301 	lsl.w	r3, r4, r1
 800087c:	ea43 030c 	orr.w	r3, r3, ip
 8000880:	40f4      	lsrs	r4, r6
 8000882:	fa00 f801 	lsl.w	r8, r0, r1
 8000886:	0c38      	lsrs	r0, r7, #16
 8000888:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800088c:	fbb4 fef0 	udiv	lr, r4, r0
 8000890:	fa1f fc87 	uxth.w	ip, r7
 8000894:	fb00 441e 	mls	r4, r0, lr, r4
 8000898:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800089c:	fb0e f90c 	mul.w	r9, lr, ip
 80008a0:	45a1      	cmp	r9, r4
 80008a2:	fa02 f201 	lsl.w	r2, r2, r1
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x1a6>
 80008a8:	193c      	adds	r4, r7, r4
 80008aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ae:	f080 8084 	bcs.w	80009ba <__udivmoddi4+0x2a2>
 80008b2:	45a1      	cmp	r9, r4
 80008b4:	f240 8081 	bls.w	80009ba <__udivmoddi4+0x2a2>
 80008b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008bc:	443c      	add	r4, r7
 80008be:	eba4 0409 	sub.w	r4, r4, r9
 80008c2:	fa1f f983 	uxth.w	r9, r3
 80008c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ca:	fb00 4413 	mls	r4, r0, r3, r4
 80008ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008d6:	45a4      	cmp	ip, r4
 80008d8:	d907      	bls.n	80008ea <__udivmoddi4+0x1d2>
 80008da:	193c      	adds	r4, r7, r4
 80008dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008e0:	d267      	bcs.n	80009b2 <__udivmoddi4+0x29a>
 80008e2:	45a4      	cmp	ip, r4
 80008e4:	d965      	bls.n	80009b2 <__udivmoddi4+0x29a>
 80008e6:	3b02      	subs	r3, #2
 80008e8:	443c      	add	r4, r7
 80008ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ee:	fba0 9302 	umull	r9, r3, r0, r2
 80008f2:	eba4 040c 	sub.w	r4, r4, ip
 80008f6:	429c      	cmp	r4, r3
 80008f8:	46ce      	mov	lr, r9
 80008fa:	469c      	mov	ip, r3
 80008fc:	d351      	bcc.n	80009a2 <__udivmoddi4+0x28a>
 80008fe:	d04e      	beq.n	800099e <__udivmoddi4+0x286>
 8000900:	b155      	cbz	r5, 8000918 <__udivmoddi4+0x200>
 8000902:	ebb8 030e 	subs.w	r3, r8, lr
 8000906:	eb64 040c 	sbc.w	r4, r4, ip
 800090a:	fa04 f606 	lsl.w	r6, r4, r6
 800090e:	40cb      	lsrs	r3, r1
 8000910:	431e      	orrs	r6, r3
 8000912:	40cc      	lsrs	r4, r1
 8000914:	e9c5 6400 	strd	r6, r4, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	e750      	b.n	80007be <__udivmoddi4+0xa6>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f103 	lsr.w	r1, r0, r3
 8000924:	fa0c fc02 	lsl.w	ip, ip, r2
 8000928:	fa24 f303 	lsr.w	r3, r4, r3
 800092c:	4094      	lsls	r4, r2
 800092e:	430c      	orrs	r4, r1
 8000930:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000934:	fa00 fe02 	lsl.w	lr, r0, r2
 8000938:	fa1f f78c 	uxth.w	r7, ip
 800093c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000940:	fb08 3110 	mls	r1, r8, r0, r3
 8000944:	0c23      	lsrs	r3, r4, #16
 8000946:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800094a:	fb00 f107 	mul.w	r1, r0, r7
 800094e:	4299      	cmp	r1, r3
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x24c>
 8000952:	eb1c 0303 	adds.w	r3, ip, r3
 8000956:	f100 36ff 	add.w	r6, r0, #4294967295
 800095a:	d22c      	bcs.n	80009b6 <__udivmoddi4+0x29e>
 800095c:	4299      	cmp	r1, r3
 800095e:	d92a      	bls.n	80009b6 <__udivmoddi4+0x29e>
 8000960:	3802      	subs	r0, #2
 8000962:	4463      	add	r3, ip
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b2a4      	uxth	r4, r4
 8000968:	fbb3 f1f8 	udiv	r1, r3, r8
 800096c:	fb08 3311 	mls	r3, r8, r1, r3
 8000970:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000974:	fb01 f307 	mul.w	r3, r1, r7
 8000978:	42a3      	cmp	r3, r4
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x276>
 800097c:	eb1c 0404 	adds.w	r4, ip, r4
 8000980:	f101 36ff 	add.w	r6, r1, #4294967295
 8000984:	d213      	bcs.n	80009ae <__udivmoddi4+0x296>
 8000986:	42a3      	cmp	r3, r4
 8000988:	d911      	bls.n	80009ae <__udivmoddi4+0x296>
 800098a:	3902      	subs	r1, #2
 800098c:	4464      	add	r4, ip
 800098e:	1ae4      	subs	r4, r4, r3
 8000990:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000994:	e739      	b.n	800080a <__udivmoddi4+0xf2>
 8000996:	4604      	mov	r4, r0
 8000998:	e6f0      	b.n	800077c <__udivmoddi4+0x64>
 800099a:	4608      	mov	r0, r1
 800099c:	e706      	b.n	80007ac <__udivmoddi4+0x94>
 800099e:	45c8      	cmp	r8, r9
 80009a0:	d2ae      	bcs.n	8000900 <__udivmoddi4+0x1e8>
 80009a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7a8      	b.n	8000900 <__udivmoddi4+0x1e8>
 80009ae:	4631      	mov	r1, r6
 80009b0:	e7ed      	b.n	800098e <__udivmoddi4+0x276>
 80009b2:	4603      	mov	r3, r0
 80009b4:	e799      	b.n	80008ea <__udivmoddi4+0x1d2>
 80009b6:	4630      	mov	r0, r6
 80009b8:	e7d4      	b.n	8000964 <__udivmoddi4+0x24c>
 80009ba:	46d6      	mov	lr, sl
 80009bc:	e77f      	b.n	80008be <__udivmoddi4+0x1a6>
 80009be:	4463      	add	r3, ip
 80009c0:	3802      	subs	r0, #2
 80009c2:	e74d      	b.n	8000860 <__udivmoddi4+0x148>
 80009c4:	4606      	mov	r6, r0
 80009c6:	4623      	mov	r3, r4
 80009c8:	4608      	mov	r0, r1
 80009ca:	e70f      	b.n	80007ec <__udivmoddi4+0xd4>
 80009cc:	3e02      	subs	r6, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	e730      	b.n	8000834 <__udivmoddi4+0x11c>
 80009d2:	bf00      	nop

080009d4 <__aeabi_idiv0>:
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b f8e7 	bl	800bbc4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f6:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 80009f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009fe:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a20:	2204      	movs	r2, #4
 8000a22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a78:	4817      	ldr	r0, [pc, #92]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a7a:	f002 ffc7 	bl	8003a0c <HAL_ADC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a84:	f001 fb30 	bl	80020e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a94:	f004 f8e6 	bl	8004c64 <HAL_ADCEx_MultiModeConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000a9e:	f001 fb23 	bl	80020e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_ADC1_Init+0x104>)
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aae:	237f      	movs	r3, #127	@ 0x7f
 8000ab0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000ac0:	f003 fa52 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000aca:	f001 fb0d 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	@ 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000b4 	.word	0x200000b4
 8000adc:	04300002 	.word	0x04300002

08000ae0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00b f869 	bl	800bbc4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000af4:	4a31      	ldr	r2, [pc, #196]	@ (8000bbc <MX_ADC2_Init+0xdc>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000afa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b12:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b72:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b74:	f002 ff4a 	bl	8003a0c <HAL_ADC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000b7e:	f001 fab3 	bl	80020e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_ADC2_Init+0xe0>)
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2306      	movs	r3, #6
 8000b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	237f      	movs	r3, #127	@ 0x7f
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b92:	2304      	movs	r3, #4
 8000b94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000ba0:	f003 f9e2 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000baa:	f001 fa9d 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	50000100 	.word	0x50000100
 8000bc0:	0c900008 	.word	0x0c900008

08000bc4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	@ 0x30
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2220      	movs	r2, #32
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00a fff1 	bl	800bbc4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000be4:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <MX_ADC3_Init+0x100>)
 8000be6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bea:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000bee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c64:	f002 fed2 	bl	8003a0c <HAL_ADC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000c6e:	f001 fa3b 	bl	80020e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c7e:	f003 fff1 	bl	8004c64 <HAL_ADCEx_MultiModeConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000c88:	f001 fa2e 	bl	80020e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_ADC3_Init+0x104>)
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c90:	2306      	movs	r3, #6
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c98:	237f      	movs	r3, #127	@ 0x7f
 8000c9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000caa:	f003 f95d 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000cb4:	f001 fa18 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3730      	adds	r7, #48	@ 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000018c 	.word	0x2000018c
 8000cc4:	50000400 	.word	0x50000400
 8000cc8:	14f00020 	.word	0x14f00020

08000ccc <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00a ff73 	bl	800bbc4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000cde:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000ce0:	4a31      	ldr	r2, [pc, #196]	@ (8000da8 <MX_ADC4_Init+0xdc>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000ce6:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000cea:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d4e:	2280      	movs	r2, #128	@ 0x80
 8000d50:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d60:	f002 fe54 	bl	8003a0c <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000d6a:	f001 f9bd 	bl	80020e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_ADC4_Init+0xe0>)
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2306      	movs	r3, #6
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	237f      	movs	r3, #127	@ 0x7f
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d8c:	f003 f8ec 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000d96:	f001 f9a7 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001f8 	.word	0x200001f8
 8000da8:	50000500 	.word	0x50000500
 8000dac:	14f00020 	.word	0x14f00020

08000db0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2220      	movs	r2, #32
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00a ff01 	bl	800bbc4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dc4:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <MX_ADC5_Init+0xdc>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dca:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000dce:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e44:	f002 fde2 	bl	8003a0c <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000e4e:	f001 f94b 	bl	80020e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_ADC5_Init+0xe0>)
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5e:	237f      	movs	r3, #127	@ 0x7f
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2304      	movs	r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e70:	f003 f87a 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000e7a:	f001 f935 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000264 	.word	0x20000264
 8000e8c:	50000600 	.word	0x50000600
 8000e90:	08600004 	.word	0x08600004

08000e94 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0a6      	sub	sp, #152	@ 0x98
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb0:	2254      	movs	r2, #84	@ 0x54
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00a fe85 	bl	800bbc4 <memset>
  if(adcHandle->Instance==ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec2:	d16c      	bne.n	8000f9e <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ece:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 fa63 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ee0:	f001 f902 	bl	80020e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a9f      	ldr	r2, [pc, #636]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eee:	4b9e      	ldr	r3, [pc, #632]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10b      	bne.n	8000f0e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a9c      	ldr	r2, [pc, #624]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b9a      	ldr	r3, [pc, #616]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b97      	ldr	r3, [pc, #604]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a96      	ldr	r2, [pc, #600]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b94      	ldr	r3, [pc, #592]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f004 fbe7 	bl	8005714 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f46:	4b8a      	ldr	r3, [pc, #552]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f48:	4a8a      	ldr	r2, [pc, #552]	@ (8001174 <HAL_ADC_MspInit+0x2e0>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f4c:	4b88      	ldr	r3, [pc, #544]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f4e:	2205      	movs	r2, #5
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f52:	4b87      	ldr	r3, [pc, #540]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f58:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5e:	4b84      	ldr	r3, [pc, #528]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f64:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6c:	4b80      	ldr	r3, [pc, #512]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f74:	4b7e      	ldr	r3, [pc, #504]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f76:	2220      	movs	r2, #32
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f80:	487b      	ldr	r0, [pc, #492]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f82:	f004 f887 	bl	8005094 <HAL_DMA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000f8c:	f001 f8ac 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a77      	ldr	r2, [pc, #476]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f94:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f96:	4a76      	ldr	r2, [pc, #472]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000f9c:	e1e0      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a75      	ldr	r2, [pc, #468]	@ (8001178 <HAL_ADC_MspInit+0x2e4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d16c      	bne.n	8001082 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fb2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 f9f1 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000fc4:	f001 f890 	bl	80020e8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc8:	4b67      	ldr	r3, [pc, #412]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a66      	ldr	r2, [pc, #408]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fd2:	4b65      	ldr	r3, [pc, #404]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	4a63      	ldr	r2, [pc, #396]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe6:	4b61      	ldr	r3, [pc, #388]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 800100a:	2340      	movs	r3, #64	@ 0x40
 800100c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	2303      	movs	r3, #3
 8001012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f004 fb75 	bl	8005714 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800102a:	4b54      	ldr	r3, [pc, #336]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800102c:	4a54      	ldr	r2, [pc, #336]	@ (8001180 <HAL_ADC_MspInit+0x2ec>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001030:	4b52      	ldr	r3, [pc, #328]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001032:	2224      	movs	r2, #36	@ 0x24
 8001034:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b51      	ldr	r3, [pc, #324]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b4f      	ldr	r3, [pc, #316]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001048:	4b4c      	ldr	r3, [pc, #304]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800104a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001050:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001056:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800105a:	2220      	movs	r2, #32
 800105c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001064:	4845      	ldr	r0, [pc, #276]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001066:	f004 f815 	bl	8005094 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8001070:	f001 f83a 	bl	80020e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a41      	ldr	r2, [pc, #260]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001078:	655a      	str	r2, [r3, #84]	@ 0x54
 800107a:	4a40      	ldr	r2, [pc, #256]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001080:	e16e      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3f      	ldr	r2, [pc, #252]	@ (8001184 <HAL_ADC_MspInit+0x2f0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	f040 8085 	bne.w	8001198 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001098:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 f97e 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80010aa:	f001 f81d 	bl	80020e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80010ae:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	4a29      	ldr	r2, [pc, #164]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010cc:	4b27      	ldr	r3, [pc, #156]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b24      	ldr	r3, [pc, #144]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	4a23      	ldr	r2, [pc, #140]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 80010f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001108:	4619      	mov	r1, r3
 800110a:	4820      	ldr	r0, [pc, #128]	@ (800118c <HAL_ADC_MspInit+0x2f8>)
 800110c:	f004 fb02 	bl	8005714 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001112:	4a20      	ldr	r2, [pc, #128]	@ (8001194 <HAL_ADC_MspInit+0x300>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001118:	2225      	movs	r2, #37	@ 0x25
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001134:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001140:	2220      	movs	r2, #32
 8001142:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800114a:	4811      	ldr	r0, [pc, #68]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800114c:	f003 ffa2 	bl	8005094 <HAL_DMA_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8001156:	f000 ffc7 	bl	80020e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001166:	e0fb      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
 8001168:	200004b0 	.word	0x200004b0
 800116c:	40021000 	.word	0x40021000
 8001170:	200002d0 	.word	0x200002d0
 8001174:	40020008 	.word	0x40020008
 8001178:	50000100 	.word	0x50000100
 800117c:	20000330 	.word	0x20000330
 8001180:	4002001c 	.word	0x4002001c
 8001184:	50000400 	.word	0x50000400
 8001188:	200004b4 	.word	0x200004b4
 800118c:	48000400 	.word	0x48000400
 8001190:	20000390 	.word	0x20000390
 8001194:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a72      	ldr	r2, [pc, #456]	@ (8001368 <HAL_ADC_MspInit+0x4d4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d16c      	bne.n	800127c <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80011ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 f8f4 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 80011be:	f000 ff93 	bl	80020e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011c2:	4b6a      	ldr	r3, [pc, #424]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a68      	ldr	r2, [pc, #416]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011cc:	4b67      	ldr	r3, [pc, #412]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10b      	bne.n	80011ec <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011d4:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800121c:	4619      	mov	r1, r3
 800121e:	4855      	ldr	r0, [pc, #340]	@ (8001374 <HAL_ADC_MspInit+0x4e0>)
 8001220:	f004 fa78 	bl	8005714 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001224:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001226:	4a55      	ldr	r2, [pc, #340]	@ (800137c <HAL_ADC_MspInit+0x4e8>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800122c:	2226      	movs	r2, #38	@ 0x26
 800122e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001230:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b4e      	ldr	r3, [pc, #312]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001242:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124a:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001254:	2220      	movs	r2, #32
 8001256:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800125e:	4846      	ldr	r0, [pc, #280]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001260:	f003 ff18 	bl	8005094 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 800126a:	f000 ff3d 	bl	80020e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a41      	ldr	r2, [pc, #260]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
 8001274:	4a40      	ldr	r2, [pc, #256]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800127a:	e071      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3f      	ldr	r2, [pc, #252]	@ (8001380 <HAL_ADC_MspInit+0x4ec>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d16c      	bne.n	8001360 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800128c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f882 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80012a2:	f000 ff21 	bl	80020e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 80012e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f004 fa05 	bl	8005714 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800130c:	4a1e      	ldr	r2, [pc, #120]	@ (8001388 <HAL_ADC_MspInit+0x4f4>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001312:	2227      	movs	r2, #39	@ 0x27
 8001314:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800132a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001336:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800133a:	2220      	movs	r2, #32
 800133c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001346:	f003 fea5 	bl	8005094 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001350:	f000 feca 	bl	80020e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001360:	bf00      	nop
 8001362:	3798      	adds	r7, #152	@ 0x98
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	50000500 	.word	0x50000500
 800136c:	200004b4 	.word	0x200004b4
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400
 8001378:	200003f0 	.word	0x200003f0
 800137c:	40020044 	.word	0x40020044
 8001380:	50000600 	.word	0x50000600
 8001384:	20000450 	.word	0x20000450
 8001388:	40020058 	.word	0x40020058

0800138c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_DMA_Init+0x98>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <MX_DMA_Init+0x98>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6493      	str	r3, [r2, #72]	@ 0x48
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_DMA_Init+0x98>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_DMA_Init+0x98>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <MX_DMA_Init+0x98>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_DMA_Init+0x98>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_DMA_Init+0x98>)
 80013c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_DMA_Init+0x98>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_DMA_Init+0x98>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2010      	movs	r0, #16
 80013e0:	f003 fe23 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013e4:	2010      	movs	r0, #16
 80013e6:	f003 fe3a 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2011      	movs	r0, #17
 80013f0:	f003 fe1b 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f003 fe32 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2038      	movs	r0, #56	@ 0x38
 8001400:	f003 fe13 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001404:	2038      	movs	r0, #56	@ 0x38
 8001406:	f003 fe2a 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2039      	movs	r0, #57	@ 0x39
 8001410:	f003 fe0b 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001414:	2039      	movs	r0, #57	@ 0x39
 8001416:	f003 fe22 	bl	800505e <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f007 fc2d 	bl	8008c94 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f007 fc29 	bl	8008c94 <HAL_TIM_IC_Start_IT>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <processarCaptura+0x94>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001466:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <processarCaptura+0x98>)
 8001468:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <processarCaptura+0x94>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001470:	e02f      	b.n	80014d2 <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	4a1b      	ldr	r2, [pc, #108]	@ (80014e8 <processarCaptura+0x9c>)
 800147a:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <processarCaptura+0x9c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <processarCaptura+0x98>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <processarCaptura+0xa0>)
 8001488:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <processarCaptura+0xa4>)
 800148c:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <processarCaptura+0xa0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800149a:	edd7 6a05 	vldr	s13, [r7, #20]
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80014f4 <processarCaptura+0xa8>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <processarCaptura+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200004cc 	.word	0x200004cc
 80014e4:	200004b8 	.word	0x200004b8
 80014e8:	200004bc 	.word	0x200004bc
 80014ec:	200004c8 	.word	0x200004c8
 80014f0:	49742400 	.word	0x49742400
 80014f4:	41a347ae 	.word	0x41a347ae

080014f8 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <processarCaptura2+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <processarCaptura2+0x98>)
 8001514:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <processarCaptura2+0x94>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 800151c:	e02f      	b.n	800157e <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <processarCaptura2+0x9c>)
 8001526:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <processarCaptura2+0x9c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <processarCaptura2+0x98>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <processarCaptura2+0xa0>)
 8001534:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <processarCaptura2+0xa4>)
 8001538:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <processarCaptura2+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001546:	edd7 6a05 	vldr	s13, [r7, #20]
 800154a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80015a0 <processarCaptura2+0xa8>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <processarCaptura2+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200004d4 	.word	0x200004d4
 8001590:	200004c0 	.word	0x200004c0
 8001594:	200004c4 	.word	0x200004c4
 8001598:	200004d0 	.word	0x200004d0
 800159c:	49742400 	.word	0x49742400
 80015a0:	41a347ae 	.word	0x41a347ae

080015a4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    if (htim == &htim16)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x34>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d104      	bne.n	80015be <HAL_TIM_IC_CaptureCallback+0x1a>
    {
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 80015b4:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x38>)
 80015b6:	490a      	ldr	r1, [pc, #40]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <processarCaptura>
    }
    if (htim == &htim17)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d104      	bne.n	80015d0 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80015c8:	4908      	ldr	r1, [pc, #32]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x48>)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff94 	bl	80014f8 <processarCaptura2>
    }

}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000079c 	.word	0x2000079c
 80015dc:	200004e0 	.word	0x200004e0
 80015e0:	200004d8 	.word	0x200004d8
 80015e4:	200007e8 	.word	0x200007e8
 80015e8:	200004e4 	.word	0x200004e4
 80015ec:	200004dc 	.word	0x200004dc

080015f0 <fGetVelocidadeRodaEsquerda>:

float fGetVelocidadeRodaEsquerda(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
    return velocidadeRodaEsquerda;
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <fGetVelocidadeRodaEsquerda+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
}
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	200004e0 	.word	0x200004e0

0800160c <fGetVelocidadeRodaDireita>:

float fGetVelocidadeRodaDireita(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
    return velocidadeRodaDireita;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <fGetVelocidadeRodaDireita+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200004e4 	.word	0x200004e4

08001628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <MX_GPIO_Init+0x104>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a3a      	ldr	r2, [pc, #232]	@ (800172c <MX_GPIO_Init+0x104>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <MX_GPIO_Init+0x104>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <MX_GPIO_Init+0x104>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a34      	ldr	r2, [pc, #208]	@ (800172c <MX_GPIO_Init+0x104>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b32      	ldr	r3, [pc, #200]	@ (800172c <MX_GPIO_Init+0x104>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <MX_GPIO_Init+0x104>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <MX_GPIO_Init+0x104>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <MX_GPIO_Init+0x104>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_GPIO_Init+0x104>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a28      	ldr	r2, [pc, #160]	@ (800172c <MX_GPIO_Init+0x104>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <MX_GPIO_Init+0x104>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80016a4:	4822      	ldr	r0, [pc, #136]	@ (8001730 <MX_GPIO_Init+0x108>)
 80016a6:	f004 f9b7 	bl	8005a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f004 f9b0 	bl	8005a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4819      	ldr	r0, [pc, #100]	@ (8001734 <MX_GPIO_Init+0x10c>)
 80016d0:	f004 f820 	bl	8005714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 80016d4:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_GPIO_Init+0x108>)
 80016ee:	f004 f811 	bl	8005714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80016f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f004 f801 	bl	8005714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2028      	movs	r0, #40	@ 0x28
 8001718:	f003 fc87 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171c:	2028      	movs	r0, #40	@ 0x28
 800171e:	f003 fc9e 	bl	800505e <HAL_NVIC_EnableIRQ>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	@ 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800

08001738 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_I2C2_Init+0x74>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <MX_I2C2_Init+0x78>)
 8001740:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001744:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <MX_I2C2_Init+0x7c>)
 8001746:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_I2C2_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001750:	2201      	movs	r2, #1
 8001752:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_I2C2_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_I2C2_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001774:	f004 f98b 	bl	8005a8e <HAL_I2C_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800177e:	f000 fcb3 	bl	80020e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4809      	ldr	r0, [pc, #36]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001786:	f005 ff91 	bl	80076ac <HAL_I2CEx_ConfigAnalogFilter>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001790:	f000 fcaa 	bl	80020e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001798:	f005 ffd3 	bl	8007742 <HAL_I2CEx_ConfigDigitalFilter>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a2:	f000 fca1 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004e8 	.word	0x200004e8
 80017b0:	40005800 	.word	0x40005800
 80017b4:	40b285c2 	.word	0x40b285c2

080017b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a0      	sub	sp, #128	@ 0x80
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	2254      	movs	r2, #84	@ 0x54
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00a f9f3 	bl	800bbc4 <memset>
  if(i2cHandle->Instance==I2C2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001960 <HAL_I2C_MspInit+0x1a8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f040 80b6 	bne.w	8001956 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fdd2 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001802:	f000 fc71 	bl	80020e8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a56      	ldr	r2, [pc, #344]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b54      	ldr	r3, [pc, #336]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001836:	2310      	movs	r3, #16
 8001838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183a:	2312      	movs	r3, #18
 800183c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001846:	2304      	movs	r3, #4
 8001848:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800184e:	4619      	mov	r1, r3
 8001850:	4845      	ldr	r0, [pc, #276]	@ (8001968 <HAL_I2C_MspInit+0x1b0>)
 8001852:	f003 ff5f 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001868:	2304      	movs	r3, #4
 800186a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001876:	f003 ff4d 	bl	8005714 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800187a:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a39      	ldr	r2, [pc, #228]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001892:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 8001894:	4a36      	ldr	r2, [pc, #216]	@ (8001970 <HAL_I2C_MspInit+0x1b8>)
 8001896:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 800189a:	2212      	movs	r2, #18
 800189c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b30      	ldr	r3, [pc, #192]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80018c8:	4828      	ldr	r0, [pc, #160]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018ca:	f003 fbe3 	bl	8005094 <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80018d4:	f000 fc08 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018de:	4a23      	ldr	r2, [pc, #140]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018e6:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_I2C_MspInit+0x1c0>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018ec:	2213      	movs	r2, #19
 80018ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018f2:	2210      	movs	r2, #16
 80018f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800191a:	4816      	ldr	r0, [pc, #88]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800191c:	f003 fbba 	bl	8005094 <HAL_DMA_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001926:	f000 fbdf 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800192e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001930:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2021      	movs	r0, #33	@ 0x21
 800193c:	f003 fb75 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001940:	2021      	movs	r0, #33	@ 0x21
 8001942:	f003 fb8c 	bl	800505e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2022      	movs	r0, #34	@ 0x22
 800194c:	f003 fb6d 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001950:	2022      	movs	r0, #34	@ 0x22
 8001952:	f003 fb84 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3780      	adds	r7, #128	@ 0x80
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005800 	.word	0x40005800
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800
 800196c:	2000053c 	.word	0x2000053c
 8001970:	4002006c 	.word	0x4002006c
 8001974:	2000059c 	.word	0x2000059c
 8001978:	40020080 	.word	0x40020080

0800197c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	70fb      	strb	r3, [r7, #3]
 800198e:	460b      	mov	r3, r1
 8001990:	70bb      	strb	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001996:	2300      	movs	r3, #0
 8001998:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 800199a:	4a53      	ldr	r2, [pc, #332]	@ (8001ae8 <lcdInit+0x16c>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <lcdInit+0x16c>)
 80019a8:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 80019aa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <lcdInit+0x16c>)
 80019ac:	78bb      	ldrb	r3, [r7, #2]
 80019ae:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <lcdInit+0x16c>)
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <lcdInit+0x16c>)
 80019b8:	2208      	movs	r2, #8
 80019ba:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <lcdInit+0x170>)
 80019be:	2234      	movs	r2, #52	@ 0x34
 80019c0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80019c2:	4b4a      	ldr	r3, [pc, #296]	@ (8001aec <lcdInit+0x170>)
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <lcdInit+0x170>)
 80019c8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80019ca:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <lcdInit+0x170>)
 80019cc:	2230      	movs	r2, #48	@ 0x30
 80019ce:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	737b      	strb	r3, [r7, #13]
 80019d4:	e02f      	b.n	8001a36 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80019d6:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <lcdInit+0x16c>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <lcdInit+0x16c>)
 80019dc:	799b      	ldrb	r3, [r3, #6]
 80019de:	4619      	mov	r1, r3
 80019e0:	2303      	movs	r3, #3
 80019e2:	4a42      	ldr	r2, [pc, #264]	@ (8001aec <lcdInit+0x170>)
 80019e4:	f004 f8ee 	bl	8005bc4 <HAL_I2C_Master_Transmit_DMA>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <lcdInit+0x76>
            return -1;
 80019ee:	23ff      	movs	r3, #255	@ 0xff
 80019f0:	e076      	b.n	8001ae0 <lcdInit+0x164>
        }

        usCont = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80019f6:	e009      	b.n	8001a0c <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	81fa      	strh	r2, [r7, #14]
 80019fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a00:	d101      	bne.n	8001a06 <lcdInit+0x8a>
        		return -1;
 8001a02:	23ff      	movs	r3, #255	@ 0xff
 8001a04:	e06c      	b.n	8001ae0 <lcdInit+0x164>
        	HAL_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f001 fd9a 	bl	8003540 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <lcdInit+0x16c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fac8 	bl	8005fa6 <HAL_I2C_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d1ed      	bne.n	80019f8 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001a1c:	7b7b      	ldrb	r3, [r7, #13]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d103      	bne.n	8001a2a <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 fd8c 	bl	8003540 <HAL_Delay>
 8001a28:	e002      	b.n	8001a30 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f001 fd88 	bl	8003540 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001a30:	7b7b      	ldrb	r3, [r7, #13]
 8001a32:	3301      	adds	r3, #1
 8001a34:	737b      	strb	r3, [r7, #13]
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d9cc      	bls.n	80019d6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <lcdInit+0x170>)
 8001a3e:	222c      	movs	r2, #44	@ 0x2c
 8001a40:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <lcdInit+0x170>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <lcdInit+0x170>)
 8001a48:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <lcdInit+0x170>)
 8001a4c:	2228      	movs	r2, #40	@ 0x28
 8001a4e:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <lcdInit+0x16c>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <lcdInit+0x16c>)
 8001a56:	799b      	ldrb	r3, [r3, #6]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <lcdInit+0x170>)
 8001a5e:	f004 f8b1 	bl	8005bc4 <HAL_I2C_Master_Transmit_DMA>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <lcdInit+0xf0>
        return -1;
 8001a68:	23ff      	movs	r3, #255	@ 0xff
 8001a6a:	e039      	b.n	8001ae0 <lcdInit+0x164>
    }

    usCont = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a70:	e009      	b.n	8001a86 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	81fa      	strh	r2, [r7, #14]
 8001a78:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a7a:	d101      	bne.n	8001a80 <lcdInit+0x104>
    		return -1;
 8001a7c:	23ff      	movs	r3, #255	@ 0xff
 8001a7e:	e02f      	b.n	8001ae0 <lcdInit+0x164>
    	HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f001 fd5d 	bl	8003540 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <lcdInit+0x16c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fa8b 	bl	8005fa6 <HAL_I2C_GetState>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d1ed      	bne.n	8001a72 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <lcdInit+0x16c>)
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d904      	bls.n	8001ab2 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 f945 	bl	8001d48 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 f815 	bl	8001af0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2007      	movs	r0, #7
 8001aca:	f000 f811 	bl	8001af0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f000 f80d 	bl	8001af0 <lcdCommand>
    lcdCursorHome();
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2005      	movs	r0, #5
 8001ada:	f000 f809 	bl	8001af0 <lcdCommand>

    return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000604 	.word	0x20000604
 8001aec:	200005fc 	.word	0x200005fc

08001af0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d064      	beq.n	8001bd4 <lcdCommand+0xe4>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	f040 80aa 	bne.w	8001c64 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b07      	cmp	r3, #7
 8001b16:	d85a      	bhi.n	8001bce <lcdCommand+0xde>
 8001b18:	a201      	add	r2, pc, #4	@ (adr r2, 8001b20 <lcdCommand+0x30>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b41 	.word	0x08001b41
 8001b24:	08001b71 	.word	0x08001b71
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	08001b61 	.word	0x08001b61
 8001b30:	08001b8b 	.word	0x08001b8b
 8001b34:	08001bb5 	.word	0x08001bb5
 8001b38:	08001ba5 	.word	0x08001ba5
 8001b3c:	08001bbf 	.word	0x08001bbf
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001b40:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b42:	7a1b      	ldrb	r3, [r3, #8]
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b4c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b4e:	e040      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001b50:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b52:	7a1b      	ldrb	r3, [r3, #8]
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b5c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b5e:	e038      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001b60:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b62:	7a1b      	ldrb	r3, [r3, #8]
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b52      	ldr	r3, [pc, #328]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b6c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b6e:	e030      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001b74:	f107 030f 	add.w	r3, r7, #15
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f8e4 	bl	8001d48 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001b80:	2002      	movs	r0, #2
 8001b82:	f001 fcdd 	bl	8003540 <HAL_Delay>
                        return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e090      	b.n	8001cac <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	4619      	mov	r1, r3
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f8d7 	bl	8001d48 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f001 fcd0 	bl	8003540 <HAL_Delay>
                        return 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e083      	b.n	8001cac <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001ba4:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001ba6:	7a5b      	ldrb	r3, [r3, #9]
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bb0:	725a      	strb	r2, [r3, #9]
                    break;
 8001bb2:	e00e      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bb6:	7a5a      	ldrb	r2, [r3, #9]
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bba:	725a      	strb	r2, [r3, #9]
                    break;
 8001bbc:	e009      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bc0:	7a5b      	ldrb	r3, [r3, #9]
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bca:	725a      	strb	r2, [r3, #9]
                    break;
 8001bcc:	e001      	b.n	8001bd2 <lcdCommand+0xe2>

                default:
                    return -1;
 8001bce:	23ff      	movs	r3, #255	@ 0xff
 8001bd0:	e06c      	b.n	8001cac <lcdCommand+0x1bc>
            }

            break;
 8001bd2:	e049      	b.n	8001c68 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	2b07      	cmp	r3, #7
 8001bda:	d840      	bhi.n	8001c5e <lcdCommand+0x16e>
 8001bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <lcdCommand+0xf4>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c05 	.word	0x08001c05
 8001be8:	08001c5f 	.word	0x08001c5f
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001c5f 	.word	0x08001c5f
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	08001c35 	.word	0x08001c35
 8001c00:	08001c4f 	.word	0x08001c4f
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c10:	721a      	strb	r2, [r3, #8]
                    break;
 8001c12:	e026      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c16:	7a1b      	ldrb	r3, [r3, #8]
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c20:	721a      	strb	r2, [r3, #8]
                    break;
 8001c22:	e01e      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001c24:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c30:	721a      	strb	r2, [r3, #8]
                    break;
 8001c32:	e016      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	f023 0302 	bic.w	r3, r3, #2
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c40:	725a      	strb	r2, [r3, #9]
                    break;
 8001c42:	e00e      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c46:	7a5a      	ldrb	r2, [r3, #9]
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c4a:	725a      	strb	r2, [r3, #9]
                    break;
 8001c4c:	e009      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c50:	7a5b      	ldrb	r3, [r3, #9]
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c5a:	725a      	strb	r2, [r3, #9]
                    break;
 8001c5c:	e001      	b.n	8001c62 <lcdCommand+0x172>

                default:
                    return -1;
 8001c5e:	23ff      	movs	r3, #255	@ 0xff
 8001c60:	e024      	b.n	8001cac <lcdCommand+0x1bc>
            }

            break;
 8001c62:	e001      	b.n	8001c68 <lcdCommand+0x178>

        default:
            return -1;
 8001c64:	23ff      	movs	r3, #255	@ 0xff
 8001c66:	e021      	b.n	8001cac <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	dc16      	bgt.n	8001c9c <lcdCommand+0x1ac>
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	da0d      	bge.n	8001c8e <lcdCommand+0x19e>
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d004      	beq.n	8001c80 <lcdCommand+0x190>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd10      	ble.n	8001c9c <lcdCommand+0x1ac>
 8001c7a:	3b03      	subs	r3, #3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d80d      	bhi.n	8001c9c <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c82:	7a1b      	ldrb	r3, [r3, #8]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	73fb      	strb	r3, [r7, #15]
            break;
 8001c8c:	e007      	b.n	8001c9e <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c90:	7a5b      	ldrb	r3, [r3, #9]
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
            break;
 8001c9a:	e000      	b.n	8001c9e <lcdCommand+0x1ae>

        default:
            break;
 8001c9c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f84f 	bl	8001d48 <lcdWriteByte>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000604 	.word	0x20000604

08001cb8 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <lcdSetCursorPosition+0x50>)
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	79ba      	ldrb	r2, [r7, #6]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d303      	bcc.n	8001cda <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <lcdSetCursorPosition+0x50>)
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <lcdSetCursorPosition+0x54>)
 8001cde:	5cd2      	ldrb	r2, [r2, r3]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001cf2:	f107 030f 	add.w	r3, r7, #15
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f825 	bl	8001d48 <lcdWriteByte>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000604 	.word	0x20000604
 8001d0c:	0800c524 	.word	0x0800c524

08001d10 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e009      	b.n	8001d36 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 f80c 	bl	8001d48 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3f1      	bcc.n	8001d22 <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001d56:	79da      	ldrb	r2, [r3, #7]
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f023 030f 	bic.w	r3, r3, #15
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d74:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d7c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001d80:	79da      	ldrb	r2, [r3, #7]
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d9e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001da2:	79da      	ldrb	r2, [r3, #7]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dbe:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dc2:	78da      	ldrb	r2, [r3, #3]
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dc6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001dca:	79da      	ldrb	r2, [r3, #7]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001de4:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001dec:	799b      	ldrb	r3, [r3, #6]
 8001dee:	4619      	mov	r1, r3
 8001df0:	2306      	movs	r3, #6
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001df4:	f003 fee6 	bl	8005bc4 <HAL_I2C_Master_Transmit_DMA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <lcdWriteByte+0xba>
        return -1;
 8001dfe:	23ff      	movs	r3, #255	@ 0xff
 8001e00:	e015      	b.n	8001e2e <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e06:	e009      	b.n	8001e1c <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	81fa      	strh	r2, [r7, #14]
 8001e0e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e10:	d101      	bne.n	8001e16 <lcdWriteByte+0xce>
    		return -1;
 8001e12:	23ff      	movs	r3, #255	@ 0xff
 8001e14:	e00b      	b.n	8001e2e <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f001 fb92 	bl	8003540 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 f8c0 	bl	8005fa6 <HAL_I2C_GetState>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d1ed      	bne.n	8001e08 <lcdWriteByte+0xc0>
    }

    return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000604 	.word	0x20000604
 8001e3c:	200005fc 	.word	0x200005fc

08001e40 <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	@ 0x40
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e4a:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 8001e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e56:	ee17 3a90 	vmov	r3, s15
 8001e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 8001e5c:	edd7 7a00 	vldr	s15, [r7]
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001f1c <vPrintMotorSpeed+0xdc>
 8001e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e88:	ee17 3a90 	vmov	r3, s15
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e98:	ed97 7a00 	vldr	s14, [r7]
 8001e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001f1c <vPrintMotorSpeed+0xdc>
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eac:	ee17 3a90 	vmov	r3, s15
 8001eb0:	633b      	str	r3, [r7, #48]	@ 0x30

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L: %d,%d", iVEInteiro, iVEdec);
 8001eb2:	f107 001c 	add.w	r0, r7, #28
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001eba:	4919      	ldr	r1, [pc, #100]	@ (8001f20 <vPrintMotorSpeed+0xe0>)
 8001ebc:	f009 fe62 	bl	800bb84 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fef8 	bl	8001cb8 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe f9a7 	bl	8000220 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff17 	bl	8001d10 <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R: %d,%d", iVDInteiro, iVDdec);
 8001ee2:	f107 0008 	add.w	r0, r7, #8
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001eea:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <vPrintMotorSpeed+0xe4>)
 8001eec:	f009 fe4a 	bl	800bb84 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fee0 	bl	8001cb8 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f98f 	bl	8000220 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff feff 	bl	8001d10 <lcdPrintStr>
}
 8001f12:	bf00      	nop
 8001f14:	3740      	adds	r7, #64	@ 0x40
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	42c80000 	.word	0x42c80000
 8001f20:	0800c4dc 	.word	0x0800c4dc
 8001f24:	0800c4ec 	.word	0x0800c4ec

08001f28 <vPrintUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vPrintUART(unsigned char *ucBuffer)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, ucBuffer, strlen(ucBuffer), 100);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe f975 	bl	8000220 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	2364      	movs	r3, #100	@ 0x64
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4803      	ldr	r0, [pc, #12]	@ (8001f4c <vPrintUART+0x24>)
 8001f40:	f008 fbb6 	bl	800a6b0 <HAL_UART_Transmit>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000834 	.word	0x20000834

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	ed2d 8b02 	vpush	{d8}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5a:	f001 fa80 	bl	800345e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5e:	f000 f861 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f62:	f7ff fb61 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f66:	f7ff fa11 	bl	800138c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001f6a:	f001 f949 	bl	8003200 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001f6e:	f000 fe03 	bl	8002b78 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001f72:	f7ff fbe1 	bl	8001738 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001f76:	f7fe fe25 	bl	8000bc4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001f7a:	f7fe fd2d 	bl	80009d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f7e:	f7fe fdaf 	bl	8000ae0 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001f82:	f7fe fea3 	bl	8000ccc <MX_ADC4_Init>
  MX_ADC5_Init();
 8001f86:	f7fe ff13 	bl	8000db0 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001f8a:	f000 ff71 	bl	8002e70 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f8e:	f000 ffb9 	bl	8002f04 <MX_TIM17_Init>
  MX_TIM6_Init();
 8001f92:	f000 fead 	bl	8002cf0 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001f96:	f000 ff19 	bl	8002dcc <MX_TIM15_Init>
  MX_TIM7_Init();
 8001f9a:	f000 fedf 	bl	8002d5c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8001f9e:	4817      	ldr	r0, [pc, #92]	@ (8001ffc <main+0xac>)
 8001fa0:	f000 f8a8 	bl	80020f4 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8001fa4:	4916      	ldr	r1, [pc, #88]	@ (8002000 <main+0xb0>)
 8001fa6:	4817      	ldr	r0, [pc, #92]	@ (8002004 <main+0xb4>)
 8001fa8:	f7ff fa3e 	bl	8001428 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8001fac:	4816      	ldr	r0, [pc, #88]	@ (8002008 <main+0xb8>)
 8001fae:	f000 f90b 	bl	80021c8 <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <main+0xbc>)
 8001fb4:	f000 f924 	bl	8002200 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8001fb8:	4815      	ldr	r0, [pc, #84]	@ (8002010 <main+0xc0>)
 8001fba:	f000 f93d 	bl	8002238 <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8001fbe:	4815      	ldr	r0, [pc, #84]	@ (8002014 <main+0xc4>)
 8001fc0:	f000 f956 	bl	8002270 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8001fc4:	4814      	ldr	r0, [pc, #80]	@ (8002018 <main+0xc8>)
 8001fc6:	f000 f96f 	bl	80022a8 <vLineSensor5Init>

  // Initialize the LCD
  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 8001fca:	2310      	movs	r3, #16
 8001fcc:	2202      	movs	r2, #2
 8001fce:	2127      	movs	r1, #39	@ 0x27
 8001fd0:	4812      	ldr	r0, [pc, #72]	@ (800201c <main+0xcc>)
 8001fd2:	f7ff fcd3 	bl	800197c <lcdInit>
  vPrintUART("TESTADO\n");
 8001fd6:	4812      	ldr	r0, [pc, #72]	@ (8002020 <main+0xd0>)
 8001fd8:	f7ff ffa6 	bl	8001f28 <vPrintUART>
  // // Set cursor at zero position of line 0
  // lcdSetCursorPosition(0, 1);
  // // Print text at cursor position
  // lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));

  vPrintMotorSpeed(fGetVelocidadeRodaEsquerda(), fGetVelocidadeRodaDireita());
 8001fdc:	f7ff fb08 	bl	80015f0 <fGetVelocidadeRodaEsquerda>
 8001fe0:	eeb0 8a40 	vmov.f32	s16, s0
 8001fe4:	f7ff fb12 	bl	800160c <fGetVelocidadeRodaDireita>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
 8001fec:	eef0 0a67 	vmov.f32	s1, s15
 8001ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8001ff4:	f7ff ff24 	bl	8001e40 <vPrintMotorSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <main+0xa8>
 8001ffc:	2000066c 	.word	0x2000066c
 8002000:	200007e8 	.word	0x200007e8
 8002004:	2000079c 	.word	0x2000079c
 8002008:	200000b4 	.word	0x200000b4
 800200c:	20000120 	.word	0x20000120
 8002010:	2000018c 	.word	0x2000018c
 8002014:	200001f8 	.word	0x200001f8
 8002018:	20000264 	.word	0x20000264
 800201c:	200004e8 	.word	0x200004e8
 8002020:	0800c4fc 	.word	0x0800c4fc

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	@ 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	2238      	movs	r2, #56	@ 0x38
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f009 fdc6 	bl	800bbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002046:	2000      	movs	r0, #0
 8002048:	f005 fbc8 	bl	80077dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002056:	2340      	movs	r3, #64	@ 0x40
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800205a:	2302      	movs	r3, #2
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800205e:	2302      	movs	r3, #2
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002062:	2304      	movs	r3, #4
 8002064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002066:	2355      	movs	r3, #85	@ 0x55
 8002068:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800206a:	2302      	movs	r3, #2
 800206c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800206e:	2302      	movs	r3, #2
 8002070:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002072:	2302      	movs	r3, #2
 8002074:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4618      	mov	r0, r3
 800207c:	f005 fc62 	bl	8007944 <HAL_RCC_OscConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002086:	f000 f82f 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2303      	movs	r3, #3
 8002090:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2104      	movs	r1, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f005 ff60 	bl	8007f68 <HAL_RCC_ClockConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020ae:	f000 f81b 	bl	80020e8 <Error_Handler>
  }
}
 80020b2:	bf00      	nop
 80020b4:	3750      	adds	r7, #80	@ 0x50
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		vLineSensorPIDControl();
 80020cc:	f000 fb1e 	bl	800270c <vLineSensorPIDControl>
    vPrintUART("Teste!\n");
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80020d2:	f7ff ff29 	bl	8001f28 <vPrintUART>
	}
  // Chamada a cada 500 ms
  if (htim == &htim7){
    // vPrintMotorSpeed(fGetVelocidadeRodaEsquerda(), fGetVelocidadeRodaDireita());
  }
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000750 	.word	0x20000750
 80020e4:	0800c508 	.word	0x0800c508

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <Error_Handler+0x8>

080020f4 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80020fc:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <vMotorInit+0x60>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <vMotorInit+0x60>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f006 fc4f 	bl	80089ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <vMotorInit+0x60>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2104      	movs	r1, #4
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fc49 	bl	80089ac <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002120:	480d      	ldr	r0, [pc, #52]	@ (8002158 <vMotorInit+0x64>)
 8002122:	f003 fc79 	bl	8005a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800212c:	480a      	ldr	r0, [pc, #40]	@ (8002158 <vMotorInit+0x64>)
 800212e:	f003 fc73 	bl	8005a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	4808      	ldr	r0, [pc, #32]	@ (8002158 <vMotorInit+0x64>)
 8002138:	f003 fc6e 	bl	8005a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f003 fc67 	bl	8005a18 <HAL_GPIO_WritePin>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000610 	.word	0x20000610
 8002158:	48000400 	.word	0x48000400

0800215c <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	ed87 0a01 	vstr	s0, [r7, #4]
 8002166:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 800216a:	edd7 7a01 	vldr	s15, [r7, #4]
 800216e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80021c0 <vSetRodasDC+0x64>
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800217a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <vSetRodasDC+0x68>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002188:	ee17 2a90 	vmov	r2, s15
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 800218e:	edd7 7a00 	vldr	s15, [r7]
 8002192:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80021c0 <vSetRodasDC+0x64>
 8002196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800219e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <vSetRodasDC+0x68>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ac:	ee17 2a90 	vmov	r2, s15
 80021b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	447a0000 	.word	0x447a0000
 80021c4:	20000610 	.word	0x20000610

080021c8 <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 80021d0:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <vLineSensor1Init+0x30>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <vLineSensor1Init+0x30>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	217f      	movs	r1, #127	@ 0x7f
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 fcdf 	bl	8004ba0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <vLineSensor1Init+0x30>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4904      	ldr	r1, [pc, #16]	@ (80021fc <vLineSensor1Init+0x34>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 fdca 	bl	8003d84 <HAL_ADC_Start_DMA>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000614 	.word	0x20000614
 80021fc:	20000628 	.word	0x20000628

08002200 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 8002208:	4a09      	ldr	r2, [pc, #36]	@ (8002230 <vLineSensor2Init+0x30>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <vLineSensor2Init+0x30>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	217f      	movs	r1, #127	@ 0x7f
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fcc3 	bl	8004ba0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <vLineSensor2Init+0x30>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4904      	ldr	r1, [pc, #16]	@ (8002234 <vLineSensor2Init+0x34>)
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fdae 	bl	8003d84 <HAL_ADC_Start_DMA>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000618 	.word	0x20000618
 8002234:	2000062c 	.word	0x2000062c

08002238 <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <vLineSensor3Init+0x30>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <vLineSensor3Init+0x30>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	217f      	movs	r1, #127	@ 0x7f
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fca7 	bl	8004ba0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <vLineSensor3Init+0x30>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4904      	ldr	r1, [pc, #16]	@ (800226c <vLineSensor3Init+0x34>)
 800225a:	4618      	mov	r0, r3
 800225c:	f001 fd92 	bl	8003d84 <HAL_ADC_Start_DMA>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000061c 	.word	0x2000061c
 800226c:	20000630 	.word	0x20000630

08002270 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <vLineSensor4Init+0x30>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <vLineSensor4Init+0x30>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	217f      	movs	r1, #127	@ 0x7f
 8002284:	4618      	mov	r0, r3
 8002286:	f002 fc8b 	bl	8004ba0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <vLineSensor4Init+0x30>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	4904      	ldr	r1, [pc, #16]	@ (80022a4 <vLineSensor4Init+0x34>)
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fd76 	bl	8003d84 <HAL_ADC_Start_DMA>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000620 	.word	0x20000620
 80022a4:	20000634 	.word	0x20000634

080022a8 <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 80022b0:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <vLineSensor5Init+0x30>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <vLineSensor5Init+0x30>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	217f      	movs	r1, #127	@ 0x7f
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fc6f 	bl	8004ba0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 80022c2:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <vLineSensor5Init+0x30>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4904      	ldr	r1, [pc, #16]	@ (80022dc <vLineSensor5Init+0x34>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 fd5a 	bl	8003d84 <HAL_ADC_Start_DMA>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000624 	.word	0x20000624
 80022dc:	20000638 	.word	0x20000638

080022e0 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 80022e0:	b4b0      	push	{r4, r5, r7}
 80022e2:	b091      	sub	sp, #68	@ 0x44
 80022e4:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 80022e6:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <fLineSensorCalculatePosition+0x120>)
 80022e8:	f107 0418 	add.w	r4, r7, #24
 80022ec:	461d      	mov	r5, r3
 80022ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8002302:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <fLineSensorCalculatePosition+0x124>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	4b3f      	ldr	r3, [pc, #252]	@ (8002408 <fLineSensorCalculatePosition+0x128>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <fLineSensorCalculatePosition+0x12c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <fLineSensorCalculatePosition+0x130>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b3e      	ldr	r3, [pc, #248]	@ (8002414 <fLineSensorCalculatePosition+0x134>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
 8002324:	e04c      	b.n	80023c0 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8002326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3340      	adds	r3, #64	@ 0x40
 800232c:	443b      	add	r3, r7
 800232e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002332:	4939      	ldr	r1, [pc, #228]	@ (8002418 <fLineSensorCalculatePosition+0x138>)
 8002334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800233a:	4293      	cmp	r3, r2
 800233c:	d33d      	bcc.n	80023ba <fLineSensorCalculatePosition+0xda>
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3340      	adds	r3, #64	@ 0x40
 8002344:	443b      	add	r3, r7
 8002346:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800234a:	4934      	ldr	r1, [pc, #208]	@ (800241c <fLineSensorCalculatePosition+0x13c>)
 800234c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800234e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002352:	4293      	cmp	r3, r2
 8002354:	d831      	bhi.n	80023ba <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8002356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3340      	adds	r3, #64	@ 0x40
 800235c:	443b      	add	r3, r7
 800235e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002362:	492d      	ldr	r1, [pc, #180]	@ (8002418 <fLineSensorCalculatePosition+0x138>)
 8002364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002366:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	3301      	adds	r3, #1
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800237a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8002382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3340      	adds	r3, #64	@ 0x40
 8002388:	443b      	add	r3, r7
 800238a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 80023aa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80023ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	3301      	adds	r3, #1
 80023be:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	ddaf      	ble.n	8002326 <fLineSensorCalculatePosition+0x46>
        }
    }

    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 80023c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d101      	bne.n	80023d8 <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <fLineSensorCalculatePosition+0x140>)
 80023d6:	e00b      	b.n	80023f0 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 80023d8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80023dc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 80023e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002424 <fLineSensorCalculatePosition+0x144>)
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	6013      	str	r3, [r2, #0]
    return posicao;
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb0 0a67 	vmov.f32	s0, s15
 80023f8:	3744      	adds	r7, #68	@ 0x44
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bcb0      	pop	{r4, r5, r7}
 80023fe:	4770      	bx	lr
 8002400:	0800c510 	.word	0x0800c510
 8002404:	20000628 	.word	0x20000628
 8002408:	2000062c 	.word	0x2000062c
 800240c:	20000630 	.word	0x20000630
 8002410:	20000634 	.word	0x20000634
 8002414:	20000638 	.word	0x20000638
 8002418:	20000000 	.word	0x20000000
 800241c:	20000014 	.word	0x20000014
 8002420:	42c60000 	.word	0x42c60000
 8002424:	20000648 	.word	0x20000648

08002428 <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <isSensor3DetectingLine+0x38>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	461a      	mov	r2, r3
 8002432:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <isSensor3DetectingLine+0x3c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d808      	bhi.n	800244c <isSensor3DetectingLine+0x24>
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <isSensor3DetectingLine+0x40>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	461a      	mov	r2, r3
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <isSensor3DetectingLine+0x3c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d301      	bcc.n	800244c <isSensor3DetectingLine+0x24>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <isSensor3DetectingLine+0x26>
 800244c:	2300      	movs	r3, #0
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	20000630 	.word	0x20000630
 8002468:	20000014 	.word	0x20000014

0800246c <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <isSensor4DetectingLine+0x38>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	461a      	mov	r2, r3
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <isSensor4DetectingLine+0x3c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d808      	bhi.n	8002490 <isSensor4DetectingLine+0x24>
 800247e:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <isSensor4DetectingLine+0x40>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	461a      	mov	r2, r3
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <isSensor4DetectingLine+0x3c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d301      	bcc.n	8002490 <isSensor4DetectingLine+0x24>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <isSensor4DetectingLine+0x26>
 8002490:	2300      	movs	r3, #0
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000634 	.word	0x20000634
 80024ac:	20000014 	.word	0x20000014

080024b0 <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[2]);
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <isSensor2DetectingLine+0x38>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <isSensor2DetectingLine+0x3c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d808      	bhi.n	80024d4 <isSensor2DetectingLine+0x24>
 80024c2:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <isSensor2DetectingLine+0x40>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <isSensor2DetectingLine+0x3c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d301      	bcc.n	80024d4 <isSensor2DetectingLine+0x24>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <isSensor2DetectingLine+0x26>
 80024d4:	2300      	movs	r3, #0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000
 80024ec:	2000062c 	.word	0x2000062c
 80024f0:	20000014 	.word	0x20000014
 80024f4:	00000000 	.word	0x00000000

080024f8 <ajustarVelocidadeMotores>:

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002502:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 8002506:	4b7c      	ldr	r3, [pc, #496]	@ (80026f8 <ajustarVelocidadeMotores+0x200>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 800250c:	4b7b      	ldr	r3, [pc, #492]	@ (80026fc <ajustarVelocidadeMotores+0x204>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 e o 4 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()) {
 8002512:	f7ff ff89 	bl	8002428 <isSensor3DetectingLine>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d028      	beq.n	800256e <ajustarVelocidadeMotores+0x76>
 800251c:	f7ff ffa6 	bl	800246c <isSensor4DetectingLine>
 8002520:	4603      	mov	r3, r0
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <ajustarVelocidadeMotores+0x76>
        left_duty_cycle = max_duty_cycle;
 800252c:	4b74      	ldr	r3, [pc, #464]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle - 0.1;
 8002532:	4b73      	ldr	r3, [pc, #460]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f82e 	bl	8000598 <__aeabi_f2d>
 800253c:	a36c      	add	r3, pc, #432	@ (adr r3, 80026f0 <ajustarVelocidadeMotores+0x1f8>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fd fec9 	bl	80002d8 <__aeabi_dsub>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe f87b 	bl	8000648 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 8002556:	4a6b      	ldr	r2, [pc, #428]	@ (8002704 <ajustarVelocidadeMotores+0x20c>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 800255c:	4a6a      	ldr	r2, [pc, #424]	@ (8002708 <ajustarVelocidadeMotores+0x210>)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8002562:	edd7 0a00 	vldr	s1, [r7]
 8002566:	ed97 0a01 	vldr	s0, [r7, #4]
 800256a:	f7ff fdf7 	bl	800215c <vSetRodasDC>
    }

    // Se o sensor 3 e o 2 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor2DetectingLine()) {
 800256e:	f7ff ff5b 	bl	8002428 <isSensor3DetectingLine>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d037      	beq.n	80025e8 <ajustarVelocidadeMotores+0xf0>
 8002578:	f7ff ff9a 	bl	80024b0 <isSensor2DetectingLine>
 800257c:	4603      	mov	r3, r0
 800257e:	f083 0301 	eor.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02f      	beq.n	80025e8 <ajustarVelocidadeMotores+0xf0>
        left_duty_cycle = max_duty_cycle - 0.1;
 8002588:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe f803 	bl	8000598 <__aeabi_f2d>
 8002592:	a357      	add	r3, pc, #348	@ (adr r3, 80026f0 <ajustarVelocidadeMotores+0x1f8>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fd fe9e 	bl	80002d8 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe f850 	bl	8000648 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle +0.1 ;
 80025ac:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fff1 	bl	8000598 <__aeabi_f2d>
 80025b6:	a34e      	add	r3, pc, #312	@ (adr r3, 80026f0 <ajustarVelocidadeMotores+0x1f8>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe8e 	bl	80002dc <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe f83e 	bl	8000648 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <ajustarVelocidadeMotores+0x20c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 80025d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002708 <ajustarVelocidadeMotores+0x210>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80025dc:	edd7 0a00 	vldr	s1, [r7]
 80025e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80025e4:	f7ff fdba 	bl	800215c <vSetRodasDC>
    }

    if (isSensor3DetectingLine()) {
 80025e8:	f7ff ff1e 	bl	8002428 <isSensor3DetectingLine>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <ajustarVelocidadeMotores+0x11e>
        left_duty_cycle = max_duty_cycle;
 80025f2:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle;
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80025fe:	4a41      	ldr	r2, [pc, #260]	@ (8002704 <ajustarVelocidadeMotores+0x20c>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8002604:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <ajustarVelocidadeMotores+0x210>)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 800260a:	edd7 0a00 	vldr	s1, [r7]
 800260e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002612:	f7ff fda3 	bl	800215c <vSetRodasDC>
    }

    // Se a velocidade da roda esquerda é maior, ajustamos a direita
    if (velEsquerda > velDireita) {
 8002616:	ed97 7a05 	vldr	s14, [r7, #20]
 800261a:	edd7 7a04 	vldr	s15, [r7, #16]
 800261e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	dd26      	ble.n	8002676 <ajustarVelocidadeMotores+0x17e>
        float ajuste = velEsquerda / velDireita; // Fator de ajuste
 8002628:	edd7 6a05 	vldr	s13, [r7, #20]
 800262c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	edc7 7a02 	vstr	s15, [r7, #8]
        float novoDutyCycleDireita = right_duty_cycle * ajuste;
 8002638:	ed97 7a00 	vldr	s14, [r7]
 800263c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002644:	edc7 7a07 	vstr	s15, [r7, #28]
        //EsquMaiorDir = novoDutyCycleDireita;
        fsaidaDutyDireita =novoDutyCycleDireita;
 8002648:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <ajustarVelocidadeMotores+0x210>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	6013      	str	r3, [r2, #0]
        // Limita o novo duty cycle para o máximo permitido
        if (novoDutyCycleDireita > max_duty_cycle) {
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ed97 7a07 	vldr	s14, [r7, #28]
 8002658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	dd02      	ble.n	8002668 <ajustarVelocidadeMotores+0x170>
            novoDutyCycleDireita = max_duty_cycle;
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61fb      	str	r3, [r7, #28]
        }
        vSetRodasDC(left_duty_cycle, novoDutyCycleDireita);
 8002668:	edd7 0a07 	vldr	s1, [r7, #28]
 800266c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002670:	f7ff fd74 	bl	800215c <vSetRodasDC>
    }
    else {
        // Se as velocidades estão equilibradas, aplica os duty cycles normais
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
    }
}
 8002674:	e035      	b.n	80026e2 <ajustarVelocidadeMotores+0x1ea>
    else if (velDireita > velEsquerda) {
 8002676:	ed97 7a04 	vldr	s14, [r7, #16]
 800267a:	edd7 7a05 	vldr	s15, [r7, #20]
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	dd26      	ble.n	80026d6 <ajustarVelocidadeMotores+0x1de>
        float ajuste = velDireita / velEsquerda; // Fator de ajuste
 8002688:	edd7 6a04 	vldr	s13, [r7, #16]
 800268c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002694:	edc7 7a03 	vstr	s15, [r7, #12]
        float novoDutyCycleEsquerda = left_duty_cycle * ajuste;
 8002698:	ed97 7a01 	vldr	s14, [r7, #4]
 800269c:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a4:	edc7 7a06 	vstr	s15, [r7, #24]
        fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 80026a8:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <ajustarVelocidadeMotores+0x20c>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6013      	str	r3, [r2, #0]
        if (novoDutyCycleEsquerda > max_duty_cycle) {
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80026b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	dd02      	ble.n	80026c8 <ajustarVelocidadeMotores+0x1d0>
            novoDutyCycleEsquerda = max_duty_cycle;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <ajustarVelocidadeMotores+0x208>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle);
 80026c8:	edd7 0a00 	vldr	s1, [r7]
 80026cc:	ed97 0a06 	vldr	s0, [r7, #24]
 80026d0:	f7ff fd44 	bl	800215c <vSetRodasDC>
}
 80026d4:	e005      	b.n	80026e2 <ajustarVelocidadeMotores+0x1ea>
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80026d6:	edd7 0a00 	vldr	s1, [r7]
 80026da:	ed97 0a01 	vldr	s0, [r7, #4]
 80026de:	f7ff fd3d 	bl	800215c <vSetRodasDC>
}
 80026e2:	bf00      	nop
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	9999999a 	.word	0x9999999a
 80026f4:	3fb99999 	.word	0x3fb99999
 80026f8:	200004e0 	.word	0x200004e0
 80026fc:	200004e4 	.word	0x200004e4
 8002700:	20000038 	.word	0x20000038
 8002704:	20000640 	.word	0x20000640
 8002708:	20000644 	.word	0x20000644

0800270c <vLineSensorPIDControl>:


void vLineSensorPIDControl(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 8002712:	f000 ff09 	bl	8003528 <HAL_GetTick>
 8002716:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8002718:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <vLineSensorPIDControl+0x1ec>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002728:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80028fc <vLineSensorPIDControl+0x1f0>
 800272c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002730:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <vLineSensorPIDControl+0x1f4>)
 8002732:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8002736:	4b72      	ldr	r3, [pc, #456]	@ (8002900 <vLineSensorPIDControl+0x1f4>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d802      	bhi.n	800274c <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8002746:	4b6e      	ldr	r3, [pc, #440]	@ (8002900 <vLineSensorPIDControl+0x1f4>)
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <vLineSensorPIDControl+0x1f8>)
 800274a:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 800274c:	f7ff fdc8 	bl	80022e0 <fLineSensorCalculatePosition>
 8002750:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8002754:	edd7 7a00 	vldr	s15, [r7]
 8002758:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002908 <vLineSensorPIDControl+0x1fc>
 800275c:	eef4 7a47 	vcmp.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d106      	bne.n	8002774 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        vSetRodasDC(0, 0);
 8002766:	eddf 0a69 	vldr	s1, [pc, #420]	@ 800290c <vLineSensorPIDControl+0x200>
 800276a:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 800290c <vLineSensorPIDControl+0x200>
 800276e:	f7ff fcf5 	bl	800215c <vSetRodasDC>
        return;
 8002772:	e0be      	b.n	80028f2 <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 8002774:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800290c <vLineSensorPIDControl+0x200>
 8002778:	edd7 7a00 	vldr	s15, [r7]
 800277c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002780:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <vLineSensorPIDControl+0x204>)
 8002782:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8002786:	4b62      	ldr	r3, [pc, #392]	@ (8002910 <vLineSensorPIDControl+0x204>)
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <vLineSensorPIDControl+0x1f4>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002796:	4b5f      	ldr	r3, [pc, #380]	@ (8002914 <vLineSensorPIDControl+0x208>)
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <vLineSensorPIDControl+0x208>)
 80027a2:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 80027a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002910 <vLineSensorPIDControl+0x204>)
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002918 <vLineSensorPIDControl+0x20c>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027b6:	4b52      	ldr	r3, [pc, #328]	@ (8002900 <vLineSensorPIDControl+0x1f4>)
 80027b8:	ed93 7a00 	vldr	s14, [r3]
 80027bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c0:	4b56      	ldr	r3, [pc, #344]	@ (800291c <vLineSensorPIDControl+0x210>)
 80027c2:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 80027c6:	4b56      	ldr	r3, [pc, #344]	@ (8002920 <vLineSensorPIDControl+0x214>)
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <vLineSensorPIDControl+0x204>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d6:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <vLineSensorPIDControl+0x218>)
 80027d8:	edd3 6a00 	vldr	s13, [r3]
 80027dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <vLineSensorPIDControl+0x208>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <vLineSensorPIDControl+0x21c>)
 80027ec:	edd3 6a00 	vldr	s13, [r3]
 80027f0:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <vLineSensorPIDControl+0x210>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	eef1 7a67 	vneg.f32	s15, s15
 8002802:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <vLineSensorPIDControl+0x220>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 8002808:	4b48      	ldr	r3, [pc, #288]	@ (800292c <vLineSensorPIDControl+0x220>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a48      	ldr	r2, [pc, #288]	@ (8002930 <vLineSensorPIDControl+0x224>)
 800280e:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 8002810:	4b46      	ldr	r3, [pc, #280]	@ (800292c <vLineSensorPIDControl+0x220>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <vLineSensorPIDControl+0x228>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	dd03      	ble.n	800282e <vLineSensorPIDControl+0x122>
 8002826:	4b43      	ldr	r3, [pc, #268]	@ (8002934 <vLineSensorPIDControl+0x228>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a40      	ldr	r2, [pc, #256]	@ (800292c <vLineSensorPIDControl+0x220>)
 800282c:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <vLineSensorPIDControl+0x228>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eeb1 7a67 	vneg.f32	s14, s15
 8002838:	4b3c      	ldr	r3, [pc, #240]	@ (800292c <vLineSensorPIDControl+0x220>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	dd07      	ble.n	8002858 <vLineSensorPIDControl+0x14c>
 8002848:	4b3a      	ldr	r3, [pc, #232]	@ (8002934 <vLineSensorPIDControl+0x228>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	eef1 7a67 	vneg.f32	s15, s15
 8002852:	4b36      	ldr	r3, [pc, #216]	@ (800292c <vLineSensorPIDControl+0x220>)
 8002854:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 8002858:	4b2d      	ldr	r3, [pc, #180]	@ (8002910 <vLineSensorPIDControl+0x204>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2e      	ldr	r2, [pc, #184]	@ (8002918 <vLineSensorPIDControl+0x20c>)
 800285e:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002860:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <vLineSensorPIDControl+0x1ec>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <vLineSensorPIDControl+0x22c>)
 8002868:	ed93 7a00 	vldr	s14, [r3]
 800286c:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <vLineSensorPIDControl+0x220>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <vLineSensorPIDControl+0x22c>)
 800287c:	ed93 7a00 	vldr	s14, [r3]
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <vLineSensorPIDControl+0x220>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 1.0f) left_duty_cycle = 1.0f;
 800288e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	dd02      	ble.n	80028a6 <vLineSensorPIDControl+0x19a>
 80028a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028a4:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = 0.0f;
 80028a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d502      	bpl.n	80028ba <vLineSensorPIDControl+0x1ae>
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 1.0f) right_duty_cycle = 1.0f;
 80028ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80028be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	dd02      	ble.n	80028d2 <vLineSensorPIDControl+0x1c6>
 80028cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028d0:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = 0.0f;
 80028d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	d502      	bpl.n	80028e6 <vLineSensorPIDControl+0x1da>
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 80028e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80028ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80028ee:	f7ff fe03 	bl	80024f8 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000664 	.word	0x20000664
 80028fc:	447a0000 	.word	0x447a0000
 8002900:	20000030 	.word	0x20000030
 8002904:	3c23d70a 	.word	0x3c23d70a
 8002908:	42c60000 	.word	0x42c60000
 800290c:	00000000 	.word	0x00000000
 8002910:	20000650 	.word	0x20000650
 8002914:	20000658 	.word	0x20000658
 8002918:	20000654 	.word	0x20000654
 800291c:	2000065c 	.word	0x2000065c
 8002920:	20000028 	.word	0x20000028
 8002924:	2000064c 	.word	0x2000064c
 8002928:	2000002c 	.word	0x2000002c
 800292c:	20000660 	.word	0x20000660
 8002930:	2000063c 	.word	0x2000063c
 8002934:	20000038 	.word	0x20000038
 8002938:	20000034 	.word	0x20000034

0800293c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_MspInit+0x44>)
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <HAL_MspInit+0x44>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6613      	str	r3, [r2, #96]	@ 0x60
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_MspInit+0x44>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_MspInit+0x44>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <HAL_MspInit+0x44>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002964:	6593      	str	r3, [r2, #88]	@ 0x58
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_MspInit+0x44>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002972:	f004 ffd7 	bl	8007924 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <NMI_Handler+0x4>

0800298c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <HardFault_Handler+0x4>

08002994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <MemManage_Handler+0x4>

0800299c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <UsageFault_Handler+0x4>

080029ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029da:	f000 fd93 	bl	8003504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80029e8:	4802      	ldr	r0, [pc, #8]	@ (80029f4 <DMA1_Channel6_IRQHandler+0x10>)
 80029ea:	f002 fd36 	bl	800545a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000053c 	.word	0x2000053c

080029f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <DMA1_Channel7_IRQHandler+0x10>)
 80029fe:	f002 fd2c 	bl	800545a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000059c 	.word	0x2000059c

08002a0c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a10:	4803      	ldr	r0, [pc, #12]	@ (8002a20 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002a12:	f006 fa8f 	bl	8008f34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002a18:	f006 fa8c 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000066c 	.word	0x2000066c
 8002a24:	20000750 	.word	0x20000750

08002a28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a2c:	4803      	ldr	r0, [pc, #12]	@ (8002a3c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002a2e:	f006 fa81 	bl	8008f34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002a32:	4803      	ldr	r0, [pc, #12]	@ (8002a40 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002a34:	f006 fa7e 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000066c 	.word	0x2000066c
 8002a40:	2000079c 	.word	0x2000079c

08002a44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4803      	ldr	r0, [pc, #12]	@ (8002a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002a4a:	f006 fa73 	bl	8008f34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002a4e:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002a50:	f006 fa70 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000066c 	.word	0x2000066c
 8002a5c:	200007e8 	.word	0x200007e8

08002a60 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a64:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <I2C2_EV_IRQHandler+0x10>)
 8002a66:	f003 f9c1 	bl	8005dec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200004e8 	.word	0x200004e8

08002a74 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <I2C2_ER_IRQHandler+0x10>)
 8002a7a:	f003 f9d1 	bl	8005e20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200004e8 	.word	0x200004e8

08002a88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a90:	f002 ffda 	bl	8005a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <TIM7_DAC_IRQHandler+0x10>)
 8002a9e:	f006 fa49 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000704 	.word	0x20000704

08002aac <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002ab0:	4802      	ldr	r0, [pc, #8]	@ (8002abc <DMA2_Channel1_IRQHandler+0x10>)
 8002ab2:	f002 fcd2 	bl	800545a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200008c8 	.word	0x200008c8

08002ac0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <DMA2_Channel2_IRQHandler+0x10>)
 8002ac6:	f002 fcc8 	bl	800545a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000928 	.word	0x20000928

08002ad4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <LPUART1_IRQHandler+0x10>)
 8002ada:	f007 fe77 	bl	800a7cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000834 	.word	0x20000834

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f009 f85c 	bl	800bbd4 <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20020000 	.word	0x20020000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	20000668 	.word	0x20000668
 8002b50:	20000ad8 	.word	0x20000ad8

08002b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <SystemInit+0x20>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <SystemInit+0x20>)
 8002b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b09c      	sub	sp, #112	@ 0x70
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2234      	movs	r2, #52	@ 0x34
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f009 f806 	bl	800bbc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bba:	4a4c      	ldr	r2, [pc, #304]	@ (8002cec <MX_TIM1_Init+0x174>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bc0:	22a9      	movs	r2, #169	@ 0xa9
 8002bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b48      	ldr	r3, [pc, #288]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd2:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bd8:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002be4:	4840      	ldr	r0, [pc, #256]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002be6:	f005 fe29 	bl	800883c <HAL_TIM_Base_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bf0:	f7ff fa7a 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4839      	ldr	r0, [pc, #228]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002c02:	f006 fc97 	bl	8009534 <HAL_TIM_ConfigClockSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c0c:	f7ff fa6c 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c10:	4835      	ldr	r0, [pc, #212]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002c12:	f005 fe6a 	bl	80088ea <HAL_TIM_PWM_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c1c:	f7ff fa64 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c24:	2300      	movs	r3, #0
 8002c26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c30:	4619      	mov	r1, r3
 8002c32:	482d      	ldr	r0, [pc, #180]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002c34:	f007 fb7c 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c3e:	f7ff fa53 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c42:	2360      	movs	r3, #96	@ 0x60
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4820      	ldr	r0, [pc, #128]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002c68:	f006 fb50 	bl	800930c <HAL_TIM_PWM_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c72:	f7ff fa39 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	481a      	ldr	r0, [pc, #104]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002c80:	f006 fb44 	bl	800930c <HAL_TIM_PWM_ConfigChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002c8a:	f7ff fa2d 	bl	80020e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ca2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002ccc:	f007 fbc6 	bl	800a45c <HAL_TIMEx_ConfigBreakDeadTime>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002cd6:	f7ff fa07 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cda:	4803      	ldr	r0, [pc, #12]	@ (8002ce8 <MX_TIM1_Init+0x170>)
 8002cdc:	f000 fa58 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8002ce0:	bf00      	nop
 8002ce2:	3770      	adds	r7, #112	@ 0x70
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000066c 	.word	0x2000066c
 8002cec:	40012c00 	.word	0x40012c00

08002cf0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d02:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <MX_TIM6_Init+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d20:	480c      	ldr	r0, [pc, #48]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d22:	f005 fd8b 	bl	800883c <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d2c:	f7ff f9dc 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	@ (8002d54 <MX_TIM6_Init+0x64>)
 8002d3e:	f007 faf7 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d48:	f7ff f9ce 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200006b8 	.word	0x200006b8
 8002d58:	40001000 	.word	0x40001000

08002d5c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <MX_TIM7_Init+0x6c>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8002d72:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d74:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002d78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d82:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002d86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d8e:	480d      	ldr	r0, [pc, #52]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002d90:	f005 fd54 	bl	800883c <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002d9a:	f7ff f9a5 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4806      	ldr	r0, [pc, #24]	@ (8002dc4 <MX_TIM7_Init+0x68>)
 8002dac:	f007 fac0 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002db6:	f7ff f997 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000704 	.word	0x20000704
 8002dc8:	40001400 	.word	0x40001400

08002dcc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002dec:	4a1f      	ldr	r2, [pc, #124]	@ (8002e6c <MX_TIM15_Init+0xa0>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002df2:	22a9      	movs	r2, #169	@ 0xa9
 8002df4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002e0a:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002e16:	4814      	ldr	r0, [pc, #80]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e18:	f005 fd10 	bl	800883c <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002e22:	f7ff f961 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	4619      	mov	r1, r3
 8002e32:	480d      	ldr	r0, [pc, #52]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e34:	f006 fb7e 	bl	8009534 <HAL_TIM_ConfigClockSource>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002e3e:	f7ff f953 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4806      	ldr	r0, [pc, #24]	@ (8002e68 <MX_TIM15_Init+0x9c>)
 8002e50:	f007 fa6e 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002e5a:	f7ff f945 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000750 	.word	0x20000750
 8002e6c:	40014000 	.word	0x40014000

08002e70 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e76:	463b      	mov	r3, r7
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002e84:	4a1e      	ldr	r2, [pc, #120]	@ (8002f00 <MX_TIM16_Init+0x90>)
 8002e86:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002e8a:	22a9      	movs	r2, #169	@ 0xa9
 8002e8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002eae:	4813      	ldr	r0, [pc, #76]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002eb0:	f005 fcc4 	bl	800883c <HAL_TIM_Base_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002eba:	f7ff f915 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002ebe:	480f      	ldr	r0, [pc, #60]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002ec0:	f005 fe86 	bl	8008bd0 <HAL_TIM_IC_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002eca:	f7ff f90d 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002eda:	230f      	movs	r3, #15
 8002edc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ede:	463b      	mov	r3, r7
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4805      	ldr	r0, [pc, #20]	@ (8002efc <MX_TIM16_Init+0x8c>)
 8002ee6:	f006 f974 	bl	80091d2 <HAL_TIM_IC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002ef0:	f7ff f8fa 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	2000079c 	.word	0x2000079c
 8002f00:	40014400 	.word	0x40014400

08002f04 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f18:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <MX_TIM17_Init+0x90>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f1e:	22a9      	movs	r2, #169	@ 0xa9
 8002f20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002f36:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f42:	4813      	ldr	r0, [pc, #76]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f44:	f005 fc7a 	bl	800883c <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002f4e:	f7ff f8cb 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002f52:	480f      	ldr	r0, [pc, #60]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f54:	f005 fe3c 	bl	8008bd0 <HAL_TIM_IC_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002f5e:	f7ff f8c3 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f62:	2300      	movs	r3, #0
 8002f64:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f66:	2301      	movs	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002f6e:	230f      	movs	r3, #15
 8002f70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f72:	463b      	mov	r3, r7
 8002f74:	2200      	movs	r2, #0
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <MX_TIM17_Init+0x8c>)
 8002f7a:	f006 f92a 	bl	80091d2 <HAL_TIM_IC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002f84:	f7ff f8b0 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200007e8 	.word	0x200007e8
 8002f94:	40014800 	.word	0x40014800

08002f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b090      	sub	sp, #64	@ 0x40
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8003170 <HAL_TIM_Base_MspInit+0x1d8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fba:	4b6e      	ldr	r3, [pc, #440]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	4a6d      	ldr	r2, [pc, #436]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8002fc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2018      	movs	r0, #24
 8002fd8:	f002 f827 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fdc:	2018      	movs	r0, #24
 8002fde:	f002 f83e 	bl	800505e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2019      	movs	r0, #25
 8002fe8:	f002 f81f 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fec:	2019      	movs	r0, #25
 8002fee:	f002 f836 	bl	800505e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201a      	movs	r0, #26
 8002ff8:	f002 f817 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002ffc:	201a      	movs	r0, #26
 8002ffe:	f002 f82e 	bl	800505e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003002:	e0b0      	b.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM6)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5b      	ldr	r2, [pc, #364]	@ (8003178 <HAL_TIM_Base_MspInit+0x1e0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10c      	bne.n	8003028 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800300e:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	6593      	str	r3, [r2, #88]	@ 0x58
 800301a:	4b56      	ldr	r3, [pc, #344]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003026:	e09e      	b.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM7)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a53      	ldr	r2, [pc, #332]	@ (800317c <HAL_TIM_Base_MspInit+0x1e4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d114      	bne.n	800305c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003032:	4b50      	ldr	r3, [pc, #320]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	4a4f      	ldr	r2, [pc, #316]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003038:	f043 0320 	orr.w	r3, r3, #32
 800303c:	6593      	str	r3, [r2, #88]	@ 0x58
 800303e:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	2037      	movs	r0, #55	@ 0x37
 8003050:	f001 ffeb 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003054:	2037      	movs	r0, #55	@ 0x37
 8003056:	f002 f802 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 800305a:	e084      	b.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM15)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a47      	ldr	r2, [pc, #284]	@ (8003180 <HAL_TIM_Base_MspInit+0x1e8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d114      	bne.n	8003090 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003066:	4b43      	ldr	r3, [pc, #268]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	4a42      	ldr	r2, [pc, #264]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6613      	str	r3, [r2, #96]	@ 0x60
 8003072:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2018      	movs	r0, #24
 8003084:	f001 ffd1 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003088:	2018      	movs	r0, #24
 800308a:	f001 ffe8 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 800308e:	e06a      	b.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM16)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3b      	ldr	r2, [pc, #236]	@ (8003184 <HAL_TIM_Base_MspInit+0x1ec>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d130      	bne.n	80030fc <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800309a:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	4a35      	ldr	r2, [pc, #212]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030a6:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b30      	ldr	r3, [pc, #192]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030be:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 80030ca:	2310      	movs	r3, #16
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80030da:	2301      	movs	r3, #1
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030e2:	4619      	mov	r1, r3
 80030e4:	4828      	ldr	r0, [pc, #160]	@ (8003188 <HAL_TIM_Base_MspInit+0x1f0>)
 80030e6:	f002 fb15 	bl	8005714 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2019      	movs	r0, #25
 80030f0:	f001 ff9b 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030f4:	2019      	movs	r0, #25
 80030f6:	f001 ffb2 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 80030fa:	e034      	b.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM17)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_TIM_Base_MspInit+0x1f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12f      	bne.n	8003166 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003106:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310a:	4a1a      	ldr	r2, [pc, #104]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6613      	str	r3, [r2, #96]	@ 0x60
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003122:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800312a:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_TIM_Base_MspInit+0x1dc>)
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8003136:	2320      	movs	r3, #32
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8003146:	230a      	movs	r3, #10
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800314e:	4619      	mov	r1, r3
 8003150:	480d      	ldr	r0, [pc, #52]	@ (8003188 <HAL_TIM_Base_MspInit+0x1f0>)
 8003152:	f002 fadf 	bl	8005714 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	201a      	movs	r0, #26
 800315c:	f001 ff65 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003160:	201a      	movs	r0, #26
 8003162:	f001 ff7c 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3740      	adds	r7, #64	@ 0x40
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40001000 	.word	0x40001000
 800317c:	40001400 	.word	0x40001400
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	48000400 	.word	0x48000400
 800318c:	40014800 	.word	0x40014800

08003190 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	@ (80031f4 <HAL_TIM_MspPostInit+0x64>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <HAL_TIM_MspPostInit+0x68>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 80031ca:	2303      	movs	r3, #3
 80031cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80031da:	2302      	movs	r3, #2
 80031dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	@ (80031fc <HAL_TIM_MspPostInit+0x6c>)
 80031e6:	f002 fa95 	bl	8005714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	48000800 	.word	0x48000800

08003200 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003204:	4b21      	ldr	r3, [pc, #132]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003206:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <MX_LPUART1_UART_Init+0x90>)
 8003208:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800320a:	4b20      	ldr	r3, [pc, #128]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 800320c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003210:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800321e:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003230:	4b16      	ldr	r3, [pc, #88]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003238:	2200      	movs	r2, #0
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 800323e:	2200      	movs	r2, #0
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003242:	4812      	ldr	r0, [pc, #72]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003244:	f007 f9e4 	bl	800a610 <HAL_UART_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800324e:	f7fe ff4b 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003252:	2100      	movs	r1, #0
 8003254:	480d      	ldr	r0, [pc, #52]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003256:	f008 fbca 	bl	800b9ee <HAL_UARTEx_SetTxFifoThreshold>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003260:	f7fe ff42 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003264:	2100      	movs	r1, #0
 8003266:	4809      	ldr	r0, [pc, #36]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003268:	f008 fbff 	bl	800ba6a <HAL_UARTEx_SetRxFifoThreshold>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003272:	f7fe ff39 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003276:	4805      	ldr	r0, [pc, #20]	@ (800328c <MX_LPUART1_UART_Init+0x8c>)
 8003278:	f008 fb80 	bl	800b97c <HAL_UARTEx_DisableFifoMode>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003282:	f7fe ff31 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000834 	.word	0x20000834
 8003290:	40008000 	.word	0x40008000

08003294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b09e      	sub	sp, #120	@ 0x78
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	2254      	movs	r2, #84	@ 0x54
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f008 fc85 	bl	800bbc4 <memset>
  if(uartHandle->Instance==LPUART1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_UART_MspInit+0x160>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f040 8092 	bne.w	80033ea <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032c6:	2320      	movs	r3, #32
 80032c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 f864 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032de:	f7fe ff03 	bl	80020e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80032e2:	4b45      	ldr	r3, [pc, #276]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 80032e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e6:	4a44      	ldr	r2, [pc, #272]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80032ee:	4b42      	ldr	r3, [pc, #264]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	4b3f      	ldr	r3, [pc, #252]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003306:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <HAL_UART_MspInit+0x164>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003312:	230c      	movs	r3, #12
 8003314:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003322:	230c      	movs	r3, #12
 8003324:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f002 f9f0 	bl	8005714 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA2_Channel1;
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003336:	4a32      	ldr	r2, [pc, #200]	@ (8003400 <HAL_UART_MspInit+0x16c>)
 8003338:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800333a:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_UART_MspInit+0x168>)
 800333c:	2222      	movs	r2, #34	@ 0x22
 800333e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003346:	4b2d      	ldr	r3, [pc, #180]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800334c:	4b2b      	ldr	r3, [pc, #172]	@ (80033fc <HAL_UART_MspInit+0x168>)
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003352:	4b2a      	ldr	r3, [pc, #168]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003354:	2200      	movs	r2, #0
 8003356:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003358:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <HAL_UART_MspInit+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800335e:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003360:	2200      	movs	r2, #0
 8003362:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003366:	2200      	movs	r2, #0
 8003368:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800336a:	4824      	ldr	r0, [pc, #144]	@ (80033fc <HAL_UART_MspInit+0x168>)
 800336c:	f001 fe92 	bl	8005094 <HAL_DMA_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003376:	f7fe feb7 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_UART_MspInit+0x168>)
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003382:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_UART_MspInit+0x168>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 8003388:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_UART_MspInit+0x170>)
 800338a:	4a1f      	ldr	r2, [pc, #124]	@ (8003408 <HAL_UART_MspInit+0x174>)
 800338c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_UART_MspInit+0x170>)
 8003390:	2223      	movs	r2, #35	@ 0x23
 8003392:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_UART_MspInit+0x170>)
 8003396:	2210      	movs	r2, #16
 8003398:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <HAL_UART_MspInit+0x170>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033b2:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80033be:	4811      	ldr	r0, [pc, #68]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033c0:	f001 fe68 	bl	8005094 <HAL_DMA_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80033ca:	f7fe fe8d 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <HAL_UART_MspInit+0x170>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	205b      	movs	r0, #91	@ 0x5b
 80033e0:	f001 fe23 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80033e4:	205b      	movs	r0, #91	@ 0x5b
 80033e6:	f001 fe3a 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80033ea:	bf00      	nop
 80033ec:	3778      	adds	r7, #120	@ 0x78
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	200008c8 	.word	0x200008c8
 8003400:	40020408 	.word	0x40020408
 8003404:	20000928 	.word	0x20000928
 8003408:	4002041c 	.word	0x4002041c

0800340c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800340c:	480d      	ldr	r0, [pc, #52]	@ (8003444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800340e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003410:	f7ff fba0 	bl	8002b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003414:	480c      	ldr	r0, [pc, #48]	@ (8003448 <LoopForever+0x6>)
  ldr r1, =_edata
 8003416:	490d      	ldr	r1, [pc, #52]	@ (800344c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <LoopForever+0xe>)
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800341c:	e002      	b.n	8003424 <LoopCopyDataInit>

0800341e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003422:	3304      	adds	r3, #4

08003424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003428:	d3f9      	bcc.n	800341e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800342c:	4c0a      	ldr	r4, [pc, #40]	@ (8003458 <LoopForever+0x16>)
  movs r3, #0
 800342e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003430:	e001      	b.n	8003436 <LoopFillZerobss>

08003432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003434:	3204      	adds	r2, #4

08003436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003438:	d3fb      	bcc.n	8003432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800343a:	f008 fbd1 	bl	800bbe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800343e:	f7fe fd87 	bl	8001f50 <main>

08003442 <LoopForever>:

LoopForever:
    b LoopForever
 8003442:	e7fe      	b.n	8003442 <LoopForever>
  ldr   r0, =_estack
 8003444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800344c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003450:	0800c5ac 	.word	0x0800c5ac
  ldr r2, =_sbss
 8003454:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003458:	20000ad4 	.word	0x20000ad4

0800345c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800345c:	e7fe      	b.n	800345c <ADC1_2_IRQHandler>

0800345e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003468:	2003      	movs	r0, #3
 800346a:	f001 fdd3 	bl	8005014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800346e:	2000      	movs	r0, #0
 8003470:	f000 f80e 	bl	8003490 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	71fb      	strb	r3, [r7, #7]
 800347e:	e001      	b.n	8003484 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003480:	f7ff fa5c 	bl	800293c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003484:	79fb      	ldrb	r3, [r7, #7]

}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_InitTick+0x68>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d022      	beq.n	80034ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_InitTick+0x6c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <HAL_InitTick+0x68>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80034b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fdde 	bl	800507a <HAL_SYSTICK_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10f      	bne.n	80034e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d809      	bhi.n	80034de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ca:	2200      	movs	r2, #0
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	f001 fdaa 	bl	800502a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <HAL_InitTick+0x70>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e007      	b.n	80034ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e004      	b.n	80034ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e001      	b.n	80034ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000044 	.word	0x20000044
 80034fc:	2000003c 	.word	0x2000003c
 8003500:	20000040 	.word	0x20000040

08003504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_IncTick+0x1c>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_IncTick+0x20>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4413      	add	r3, r2
 8003512:	4a03      	ldr	r2, [pc, #12]	@ (8003520 <HAL_IncTick+0x1c>)
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	20000988 	.word	0x20000988
 8003524:	20000044 	.word	0x20000044

08003528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_GetTick+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000988 	.word	0x20000988

08003540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff ffee 	bl	8003528 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d004      	beq.n	8003564 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_Delay+0x40>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003564:	bf00      	nop
 8003566:	f7ff ffdf 	bl	8003528 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	d8f7      	bhi.n	8003566 <HAL_Delay+0x26>
  {
  }
}
 8003576:	bf00      	nop
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000044 	.word	0x20000044

08003584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	609a      	str	r2, [r3, #8]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3360      	adds	r3, #96	@ 0x60
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <LL_ADC_SetOffset+0x44>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	03fff000 	.word	0x03fff000

08003634 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3360      	adds	r3, #96	@ 0x60
 8003642:	461a      	mov	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3360      	adds	r3, #96	@ 0x60
 8003670:	461a      	mov	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3360      	adds	r3, #96	@ 0x60
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3360      	adds	r3, #96	@ 0x60
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	615a      	str	r2, [r3, #20]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3330      	adds	r3, #48	@ 0x30
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	4413      	add	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	211f      	movs	r1, #31
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	401a      	ands	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	f003 011f 	and.w	r1, r3, #31
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	431a      	orrs	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3314      	adds	r3, #20
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	0e5b      	lsrs	r3, r3, #25
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	4413      	add	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0d1b      	lsrs	r3, r3, #20
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2107      	movs	r1, #7
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	401a      	ands	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0d1b      	lsrs	r3, r3, #20
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	431a      	orrs	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f003 0318 	and.w	r3, r3, #24
 800381e:	4908      	ldr	r1, [pc, #32]	@ (8003840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003820:	40d9      	lsrs	r1, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	400b      	ands	r3, r1
 8003826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	0007ffff 	.word	0x0007ffff

08003844 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 031f 	and.w	r3, r3, #31
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6093      	str	r3, [r2, #8]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003898:	d101      	bne.n	800389e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80038bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e8:	d101      	bne.n	80038ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003938:	f043 0202 	orr.w	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <LL_ADC_IsEnabled+0x18>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_ADC_IsEnabled+0x1a>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d101      	bne.n	800398a <LL_ADC_IsDisableOngoing+0x18>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_IsDisableOngoing+0x1a>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d101      	bne.n	80039d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d101      	bne.n	80039fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b089      	sub	sp, #36	@ 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1a9      	b.n	8003d7a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fd fa2d 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff19 	bl	8003884 <LL_ADC_IsDeepPowerDownEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff feff 	bl	8003860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff34 	bl	80038d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff18 	bl	80038ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a7c:	4b9c      	ldr	r3, [pc, #624]	@ (8003cf0 <HAL_ADC_Init+0x2e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	4a9c      	ldr	r2, [pc, #624]	@ (8003cf4 <HAL_ADC_Init+0x2e8>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a90:	e002      	b.n	8003a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f9      	bne.n	8003a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff16 	bl	80038d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10d      	bne.n	8003aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff76 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 8142 	bne.w	8003d68 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 813e 	bne.w	8003d68 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003af4:	f043 0202 	orr.w	r2, r3, #2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff23 	bl	800394c <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d141      	bne.n	8003b90 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b14:	d004      	beq.n	8003b20 <HAL_ADC_Init+0x114>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a77      	ldr	r2, [pc, #476]	@ (8003cf8 <HAL_ADC_Init+0x2ec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10f      	bne.n	8003b40 <HAL_ADC_Init+0x134>
 8003b20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b24:	f7ff ff12 	bl	800394c <LL_ADC_IsEnabled>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	4873      	ldr	r0, [pc, #460]	@ (8003cf8 <HAL_ADC_Init+0x2ec>)
 8003b2c:	f7ff ff0e 	bl	800394c <LL_ADC_IsEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4323      	orrs	r3, r4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e012      	b.n	8003b66 <HAL_ADC_Init+0x15a>
 8003b40:	486e      	ldr	r0, [pc, #440]	@ (8003cfc <HAL_ADC_Init+0x2f0>)
 8003b42:	f7ff ff03 	bl	800394c <LL_ADC_IsEnabled>
 8003b46:	4604      	mov	r4, r0
 8003b48:	486d      	ldr	r0, [pc, #436]	@ (8003d00 <HAL_ADC_Init+0x2f4>)
 8003b4a:	f7ff feff 	bl	800394c <LL_ADC_IsEnabled>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	431c      	orrs	r4, r3
 8003b52:	486c      	ldr	r0, [pc, #432]	@ (8003d04 <HAL_ADC_Init+0x2f8>)
 8003b54:	f7ff fefa 	bl	800394c <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d012      	beq.n	8003b90 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b72:	d004      	beq.n	8003b7e <HAL_ADC_Init+0x172>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5f      	ldr	r2, [pc, #380]	@ (8003cf8 <HAL_ADC_Init+0x2ec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_Init+0x176>
 8003b7e:	4a62      	ldr	r2, [pc, #392]	@ (8003d08 <HAL_ADC_Init+0x2fc>)
 8003b80:	e000      	b.n	8003b84 <HAL_ADC_Init+0x178>
 8003b82:	4a62      	ldr	r2, [pc, #392]	@ (8003d0c <HAL_ADC_Init+0x300>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f7ff fcfa 	bl	8003584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7f5b      	ldrb	r3, [r3, #29]
 8003b94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ba0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ba6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	045b      	lsls	r3, r3, #17
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	4b48      	ldr	r3, [pc, #288]	@ (8003d10 <HAL_ADC_Init+0x304>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fee5 	bl	80039e6 <LL_ADC_INJ_IsConversionOngoing>
 8003c1c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d17f      	bne.n	8003d24 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d17c      	bne.n	8003d24 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c2e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c36:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c46:	f023 0302 	bic.w	r3, r3, #2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	69b9      	ldr	r1, [r7, #24]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6911      	ldr	r1, [r2, #16]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c8a:	e013      	b.n	8003cb4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d12a      	bne.n	8003d14 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cc8:	f023 0304 	bic.w	r3, r3, #4
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	611a      	str	r2, [r3, #16]
 8003cee:	e019      	b.n	8003d24 <HAL_ADC_Init+0x318>
 8003cf0:	2000003c 	.word	0x2000003c
 8003cf4:	053e2d63 	.word	0x053e2d63
 8003cf8:	50000100 	.word	0x50000100
 8003cfc:	50000400 	.word	0x50000400
 8003d00:	50000500 	.word	0x50000500
 8003d04:	50000600 	.word	0x50000600
 8003d08:	50000300 	.word	0x50000300
 8003d0c:	50000700 	.word	0x50000700
 8003d10:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10c      	bne.n	8003d46 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f023 010f 	bic.w	r1, r3, #15
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d44:	e007      	b.n	8003d56 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020f 	bic.w	r2, r2, #15
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d66:	e007      	b.n	8003d78 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	f043 0210 	orr.w	r2, r3, #16
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd90      	pop	{r4, r7, pc}
 8003d82:	bf00      	nop

08003d84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_Start_DMA+0x20>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8003f08 <HAL_ADC_Start_DMA+0x184>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_Start_DMA+0x24>
 8003da4:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_ADC_Start_DMA+0x188>)
 8003da6:	e000      	b.n	8003daa <HAL_ADC_Start_DMA+0x26>
 8003da8:	4b59      	ldr	r3, [pc, #356]	@ (8003f10 <HAL_ADC_Start_DMA+0x18c>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd4a 	bl	8003844 <LL_ADC_GetMultimode>
 8003db0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fe02 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 809b 	bne.w	8003efa <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x4e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e096      	b.n	8003f00 <HAL_ADC_Start_DMA+0x17c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4d      	ldr	r2, [pc, #308]	@ (8003f14 <HAL_ADC_Start_DMA+0x190>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d008      	beq.n	8003df6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d002      	beq.n	8003df6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d17a      	bne.n	8003eec <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fcf6 	bl	80047e8 <ADC_Enable>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d16d      	bne.n	8003ee2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f08 <HAL_ADC_Start_DMA+0x184>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_ADC_Start_DMA+0xb4>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3b      	ldr	r2, [pc, #236]	@ (8003f18 <HAL_ADC_Start_DMA+0x194>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d002      	beq.n	8003e34 <HAL_ADC_Start_DMA+0xb0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_Start_DMA+0xb8>
 8003e34:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_ADC_Start_DMA+0x198>)
 8003e36:	e001      	b.n	8003e3c <HAL_ADC_Start_DMA+0xb8>
 8003e38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d002      	beq.n	8003e4a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f023 0206 	bic.w	r2, r3, #6
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <HAL_ADC_Start_DMA+0x19c>)
 8003e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	4a28      	ldr	r2, [pc, #160]	@ (8003f24 <HAL_ADC_Start_DMA+0x1a0>)
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <HAL_ADC_Start_DMA+0x1a4>)
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	221c      	movs	r2, #28
 8003e94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0210 	orr.w	r2, r2, #16
 8003eac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3340      	adds	r3, #64	@ 0x40
 8003ec8:	4619      	mov	r1, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f001 f989 	bl	80051e4 <HAL_DMA_Start_IT>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fd5c 	bl	8003998 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ee0:	e00d      	b.n	8003efe <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003eea:	e008      	b.n	8003efe <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003ef8:	e001      	b.n	8003efe <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	50000100 	.word	0x50000100
 8003f0c:	50000300 	.word	0x50000300
 8003f10:	50000700 	.word	0x50000700
 8003f14:	50000600 	.word	0x50000600
 8003f18:	50000500 	.word	0x50000500
 8003f1c:	50000400 	.word	0x50000400
 8003f20:	080049d3 	.word	0x080049d3
 8003f24:	08004aab 	.word	0x08004aab
 8003f28:	08004ac7 	.word	0x08004ac7

08003f2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b0b6      	sub	sp, #216	@ 0xd8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x24>
 8003f86:	2302      	movs	r3, #2
 8003f88:	f000 bc13 	b.w	80047b2 <HAL_ADC_ConfigChannel+0x84a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fd11 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 83f3 	bne.w	800478c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7ff fbcb 	bl	800374e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fcff 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003fc2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fd0b 	bl	80039e6 <LL_ADC_INJ_IsConversionOngoing>
 8003fd0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 81d9 	bne.w	8004390 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 81d4 	bne.w	8004390 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ff0:	d10f      	bne.n	8004012 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7ff fbd2 	bl	80037a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fb79 	bl	8003702 <LL_ADC_SetSamplingTimeCommonConfig>
 8004010:	e00e      	b.n	8004030 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	461a      	mov	r2, r3
 8004020:	f7ff fbc1 	bl	80037a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fb69 	bl	8003702 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	08db      	lsrs	r3, r3, #3
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d022      	beq.n	8004098 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6919      	ldr	r1, [r3, #16]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004062:	f7ff fac3 	bl	80035ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6919      	ldr	r1, [r3, #16]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	461a      	mov	r2, r3
 8004074:	f7ff fb0f 	bl	8003696 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_ADC_ConfigChannel+0x126>
 8004088:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800408c:	e000      	b.n	8004090 <HAL_ADC_ConfigChannel+0x128>
 800408e:	2300      	movs	r3, #0
 8004090:	461a      	mov	r2, r3
 8004092:	f7ff fb1b 	bl	80036cc <LL_ADC_SetOffsetSaturation>
 8004096:	e17b      	b.n	8004390 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fac8 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x15c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fabd 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	f003 021f 	and.w	r2, r3, #31
 80040c2:	e01e      	b.n	8004102 <HAL_ADC_ConfigChannel+0x19a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fab2 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80040f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <HAL_ADC_ConfigChannel+0x1b2>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	e018      	b.n	800414c <HAL_ADC_ConfigChannel+0x1e4>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800412e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800413e:	2320      	movs	r3, #32
 8004140:	e004      	b.n	800414c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800414c:	429a      	cmp	r2, r3
 800414e:	d106      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fa81 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fa65 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800416a:	4603      	mov	r3, r0
 800416c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_ADC_ConfigChannel+0x222>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fa5a 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004180:	4603      	mov	r3, r0
 8004182:	0e9b      	lsrs	r3, r3, #26
 8004184:	f003 021f 	and.w	r2, r3, #31
 8004188:	e01e      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x260>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fa4f 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e004      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80041bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x278>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0e9b      	lsrs	r3, r3, #26
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	e018      	b.n	8004212 <HAL_ADC_ConfigChannel+0x2aa>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80041f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80041fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e004      	b.n	8004212 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004212:	429a      	cmp	r2, r3
 8004214:	d106      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fa1e 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fa02 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004230:	4603      	mov	r3, r0
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x2e8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f9f7 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004246:	4603      	mov	r3, r0
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	f003 021f 	and.w	r2, r3, #31
 800424e:	e01e      	b.n	800428e <HAL_ADC_ConfigChannel+0x326>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f9ec 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800425c:	4603      	mov	r3, r0
 800425e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800426e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004276:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e004      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x33e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0e9b      	lsrs	r3, r3, #26
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	e016      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x36c>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80042be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80042c6:	2320      	movs	r3, #32
 80042c8:	e004      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80042ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d106      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff f9bd 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2103      	movs	r1, #3
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f9a1 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x3aa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2103      	movs	r1, #3
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff f996 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004308:	4603      	mov	r3, r0
 800430a:	0e9b      	lsrs	r3, r3, #26
 800430c:	f003 021f 	and.w	r2, r3, #31
 8004310:	e017      	b.n	8004342 <HAL_ADC_ConfigChannel+0x3da>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2103      	movs	r1, #3
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff f98b 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800431e:	4603      	mov	r3, r0
 8004320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800432a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800432c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800432e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e003      	b.n	8004340 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_ADC_ConfigChannel+0x3f2>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	0e9b      	lsrs	r3, r3, #26
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	e011      	b.n	800437e <HAL_ADC_ConfigChannel+0x416>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800436a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800436c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004372:	2320      	movs	r3, #32
 8004374:	e003      	b.n	800437e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800437e:	429a      	cmp	r2, r3
 8004380:	d106      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	2103      	movs	r1, #3
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f968 	bl	8003660 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fad9 	bl	800394c <LL_ADC_IsEnabled>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 813d 	bne.w	800461c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7ff fa24 	bl	80037fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4aa2      	ldr	r2, [pc, #648]	@ (8004644 <HAL_ADC_ConfigChannel+0x6dc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f040 812e 	bne.w	800461c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x480>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0e9b      	lsrs	r3, r3, #26
 80043d6:	3301      	adds	r3, #1
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2b09      	cmp	r3, #9
 80043de:	bf94      	ite	ls
 80043e0:	2301      	movls	r3, #1
 80043e2:	2300      	movhi	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e019      	b.n	800441c <HAL_ADC_ConfigChannel+0x4b4>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80043f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80043fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2b09      	cmp	r3, #9
 8004414:	bf94      	ite	ls
 8004416:	2301      	movls	r3, #1
 8004418:	2300      	movhi	r3, #0
 800441a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800441c:	2b00      	cmp	r3, #0
 800441e:	d079      	beq.n	8004514 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_ADC_ConfigChannel+0x4d4>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	3301      	adds	r3, #1
 8004434:	069b      	lsls	r3, r3, #26
 8004436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800443a:	e015      	b.n	8004468 <HAL_ADC_ConfigChannel+0x500>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800444a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	069b      	lsls	r3, r3, #26
 8004464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x520>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0e9b      	lsrs	r3, r3, #26
 800447a:	3301      	adds	r3, #1
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	e017      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x550>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004498:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800449a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044a0:	2320      	movs	r3, #32
 80044a2:	e003      	b.n	80044ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	ea42 0103 	orr.w	r1, r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <HAL_ADC_ConfigChannel+0x576>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	051b      	lsls	r3, r3, #20
 80044dc:	e018      	b.n	8004510 <HAL_ADC_ConfigChannel+0x5a8>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80044f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80044f6:	2320      	movs	r3, #32
 80044f8:	e003      	b.n	8004502 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	b2db      	uxtb	r3, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004510:	430b      	orrs	r3, r1
 8004512:	e07e      	b.n	8004612 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x5c8>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0e9b      	lsrs	r3, r3, #26
 8004526:	3301      	adds	r3, #1
 8004528:	069b      	lsls	r3, r3, #26
 800452a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800452e:	e015      	b.n	800455c <HAL_ADC_ConfigChannel+0x5f4>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004548:	2320      	movs	r3, #32
 800454a:	e003      	b.n	8004554 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	3301      	adds	r3, #1
 8004556:	069b      	lsls	r3, r3, #26
 8004558:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_ADC_ConfigChannel+0x614>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0e9b      	lsrs	r3, r3, #26
 800456e:	3301      	adds	r3, #1
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	e017      	b.n	80045ac <HAL_ADC_ConfigChannel+0x644>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	61fb      	str	r3, [r7, #28]
  return result;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e003      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x670>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	3b1e      	subs	r3, #30
 80045d0:	051b      	lsls	r3, r3, #20
 80045d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	e01b      	b.n	8004610 <HAL_ADC_ConfigChannel+0x6a8>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	613b      	str	r3, [r7, #16]
  return result;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80045f0:	2320      	movs	r3, #32
 80045f2:	e003      	b.n	80045fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3301      	adds	r3, #1
 80045fe:	f003 021f 	and.w	r2, r3, #31
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	3b1e      	subs	r3, #30
 800460a:	051b      	lsls	r3, r3, #20
 800460c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004610:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004616:	4619      	mov	r1, r3
 8004618:	f7ff f8c5 	bl	80037a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_ADC_ConfigChannel+0x6e0>)
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80be 	beq.w	80047a6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004632:	d004      	beq.n	800463e <HAL_ADC_ConfigChannel+0x6d6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <HAL_ADC_ConfigChannel+0x6e4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10a      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x6ec>
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <HAL_ADC_ConfigChannel+0x6e8>)
 8004640:	e009      	b.n	8004656 <HAL_ADC_ConfigChannel+0x6ee>
 8004642:	bf00      	nop
 8004644:	407f0000 	.word	0x407f0000
 8004648:	80080000 	.word	0x80080000
 800464c:	50000100 	.word	0x50000100
 8004650:	50000300 	.word	0x50000300
 8004654:	4b59      	ldr	r3, [pc, #356]	@ (80047bc <HAL_ADC_ConfigChannel+0x854>)
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe ffba 	bl	80035d0 <LL_ADC_GetCommonPathInternalCh>
 800465c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a56      	ldr	r2, [pc, #344]	@ (80047c0 <HAL_ADC_ConfigChannel+0x858>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x70c>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a55      	ldr	r2, [pc, #340]	@ (80047c4 <HAL_ADC_ConfigChannel+0x85c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d13a      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d134      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004688:	d005      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x72e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4e      	ldr	r2, [pc, #312]	@ (80047c8 <HAL_ADC_ConfigChannel+0x860>)
 8004690:	4293      	cmp	r3, r2
 8004692:	f040 8085 	bne.w	80047a0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800469e:	d004      	beq.n	80046aa <HAL_ADC_ConfigChannel+0x742>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a49      	ldr	r2, [pc, #292]	@ (80047cc <HAL_ADC_ConfigChannel+0x864>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x746>
 80046aa:	4a49      	ldr	r2, [pc, #292]	@ (80047d0 <HAL_ADC_ConfigChannel+0x868>)
 80046ac:	e000      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x748>
 80046ae:	4a43      	ldr	r2, [pc, #268]	@ (80047bc <HAL_ADC_ConfigChannel+0x854>)
 80046b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe ff75 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046c0:	4b44      	ldr	r3, [pc, #272]	@ (80047d4 <HAL_ADC_ConfigChannel+0x86c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	4a44      	ldr	r2, [pc, #272]	@ (80047d8 <HAL_ADC_ConfigChannel+0x870>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046da:	e002      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b01      	subs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f9      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046e8:	e05a      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3b      	ldr	r2, [pc, #236]	@ (80047dc <HAL_ADC_ConfigChannel+0x874>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d125      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11f      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a31      	ldr	r2, [pc, #196]	@ (80047cc <HAL_ADC_ConfigChannel+0x864>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d104      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x7ac>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a34      	ldr	r2, [pc, #208]	@ (80047e0 <HAL_ADC_ConfigChannel+0x878>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d047      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800471c:	d004      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x7c0>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_ADC_ConfigChannel+0x864>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x7c4>
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <HAL_ADC_ConfigChannel+0x868>)
 800472a:	e000      	b.n	800472e <HAL_ADC_ConfigChannel+0x7c6>
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <HAL_ADC_ConfigChannel+0x854>)
 800472e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe ff36 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800473e:	e031      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <HAL_ADC_ConfigChannel+0x87c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d12d      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800474a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800474e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d127      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1c      	ldr	r2, [pc, #112]	@ (80047cc <HAL_ADC_ConfigChannel+0x864>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004768:	d004      	beq.n	8004774 <HAL_ADC_ConfigChannel+0x80c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_ADC_ConfigChannel+0x864>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x810>
 8004774:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <HAL_ADC_ConfigChannel+0x868>)
 8004776:	e000      	b.n	800477a <HAL_ADC_ConfigChannel+0x812>
 8004778:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <HAL_ADC_ConfigChannel+0x854>)
 800477a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800477e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe ff10 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
 800478a:	e00c      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	37d8      	adds	r7, #216	@ 0xd8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	50000700 	.word	0x50000700
 80047c0:	c3210000 	.word	0xc3210000
 80047c4:	90c00010 	.word	0x90c00010
 80047c8:	50000600 	.word	0x50000600
 80047cc:	50000100 	.word	0x50000100
 80047d0:	50000300 	.word	0x50000300
 80047d4:	2000003c 	.word	0x2000003c
 80047d8:	053e2d63 	.word	0x053e2d63
 80047dc:	c7520000 	.word	0xc7520000
 80047e0:	50000500 	.word	0x50000500
 80047e4:	cb840000 	.word	0xcb840000

080047e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff f8a7 	bl	800394c <LL_ADC_IsEnabled>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d176      	bne.n	80048f2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	4b3c      	ldr	r3, [pc, #240]	@ (80048fc <ADC_Enable+0x114>)
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004816:	f043 0210 	orr.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e062      	b.n	80048f4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff f862 	bl	80038fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004840:	d004      	beq.n	800484c <ADC_Enable+0x64>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2e      	ldr	r2, [pc, #184]	@ (8004900 <ADC_Enable+0x118>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <ADC_Enable+0x68>
 800484c:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <ADC_Enable+0x11c>)
 800484e:	e000      	b.n	8004852 <ADC_Enable+0x6a>
 8004850:	4b2d      	ldr	r3, [pc, #180]	@ (8004908 <ADC_Enable+0x120>)
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe febc 	bl	80035d0 <LL_ADC_GetCommonPathInternalCh>
 8004858:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800485a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800485e:	2b00      	cmp	r3, #0
 8004860:	d013      	beq.n	800488a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004862:	4b2a      	ldr	r3, [pc, #168]	@ (800490c <ADC_Enable+0x124>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	4a29      	ldr	r2, [pc, #164]	@ (8004910 <ADC_Enable+0x128>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800487c:	e002      	b.n	8004884 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3b01      	subs	r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f9      	bne.n	800487e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800488a:	f7fe fe4d 	bl	8003528 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004890:	e028      	b.n	80048e4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff f858 	bl	800394c <LL_ADC_IsEnabled>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f828 	bl	80038fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048ac:	f7fe fe3c 	bl	8003528 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d914      	bls.n	80048e4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d00d      	beq.n	80048e4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048cc:	f043 0210 	orr.w	r2, r3, #16
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e007      	b.n	80048f4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d1cf      	bne.n	8004892 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	8000003f 	.word	0x8000003f
 8004900:	50000100 	.word	0x50000100
 8004904:	50000300 	.word	0x50000300
 8004908:	50000700 	.word	0x50000700
 800490c:	2000003c 	.word	0x2000003c
 8004910:	053e2d63 	.word	0x053e2d63

08004914 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f826 	bl	8003972 <LL_ADC_IsDisableOngoing>
 8004926:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff f80d 	bl	800394c <LL_ADC_IsEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d047      	beq.n	80049c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d144      	bne.n	80049c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030d 	and.w	r3, r3, #13
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10c      	bne.n	8004966 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe ffe7 	bl	8003924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2203      	movs	r2, #3
 800495c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800495e:	f7fe fde3 	bl	8003528 <HAL_GetTick>
 8004962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004964:	e029      	b.n	80049ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e023      	b.n	80049ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004982:	f7fe fdd1 	bl	8003528 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d914      	bls.n	80049ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e007      	b.n	80049ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1dc      	bne.n	8004982 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d14b      	bne.n	8004a84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d021      	beq.n	8004a4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fe8c 	bl	8003728 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d032      	beq.n	8004a7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d12b      	bne.n	8004a7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11f      	bne.n	8004a7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a48:	e018      	b.n	8004a7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d111      	bne.n	8004a7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fa55 	bl	8003f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a82:	e00e      	b.n	8004aa2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fa5f 	bl	8003f54 <HAL_ADC_ErrorCallback>
}
 8004a96:	e004      	b.n	8004aa2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff fa41 	bl	8003f40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae4:	f043 0204 	orr.w	r2, r3, #4
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fa31 	bl	8003f54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <LL_ADC_IsEnabled>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_IsEnabled+0x18>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_IsEnabled+0x1a>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_StartCalibration>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	609a      	str	r2, [r3, #8]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b66:	d101      	bne.n	8004b6c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d101      	bne.n	8004b92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADCEx_Calibration_Start+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e04d      	b.n	8004c58 <HAL_ADCEx_Calibration_Start+0xb8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fea5 	bl	8004914 <ADC_Disable>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d136      	bne.n	8004c42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bdc:	f023 0302 	bic.w	r3, r3, #2
 8004be0:	f043 0202 	orr.w	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ff96 	bl	8004b20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bf4:	e014      	b.n	8004c20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d90d      	bls.n	8004c20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c08:	f023 0312 	bic.w	r3, r3, #18
 8004c0c:	f043 0210 	orr.w	r2, r3, #16
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e01b      	b.n	8004c58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff94 	bl	8004b52 <LL_ADC_IsCalibrationOnGoing>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e2      	bne.n	8004bf6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	f023 0303 	bic.w	r3, r3, #3
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c40:	e005      	b.n	8004c4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	f043 0210 	orr.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	0004de01 	.word	0x0004de01

08004c64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b0a1      	sub	sp, #132	@ 0x84
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0e7      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c9a:	d102      	bne.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	e009      	b.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6e      	ldr	r2, [pc, #440]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004cac:	4b6d      	ldr	r3, [pc, #436]	@ (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	e001      	b.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0be      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff4f 	bl	8004b7a <LL_ADC_REG_IsConversionOngoing>
 8004cdc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ff49 	bl	8004b7a <LL_ADC_REG_IsConversionOngoing>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 80a0 	bne.w	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 809c 	bne.w	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d00:	d004      	beq.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a55      	ldr	r2, [pc, #340]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004d0c:	4b56      	ldr	r3, [pc, #344]	@ (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004d0e:	e000      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004d10:	4b56      	ldr	r3, [pc, #344]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d04b      	beq.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d2e:	035b      	lsls	r3, r3, #13
 8004d30:	430b      	orrs	r3, r1
 8004d32:	431a      	orrs	r2, r3
 8004d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d40:	d004      	beq.n	8004d4c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a45      	ldr	r2, [pc, #276]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10f      	bne.n	8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d50:	f7ff fed3 	bl	8004afa <LL_ADC_IsEnabled>
 8004d54:	4604      	mov	r4, r0
 8004d56:	4841      	ldr	r0, [pc, #260]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d58:	f7ff fecf 	bl	8004afa <LL_ADC_IsEnabled>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4323      	orrs	r3, r4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e012      	b.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d6c:	483c      	ldr	r0, [pc, #240]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d6e:	f7ff fec4 	bl	8004afa <LL_ADC_IsEnabled>
 8004d72:	4604      	mov	r4, r0
 8004d74:	483b      	ldr	r0, [pc, #236]	@ (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d76:	f7ff fec0 	bl	8004afa <LL_ADC_IsEnabled>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	431c      	orrs	r4, r3
 8004d7e:	483c      	ldr	r0, [pc, #240]	@ (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d80:	f7ff febb 	bl	8004afa <LL_ADC_IsEnabled>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4323      	orrs	r3, r4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d056      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d9e:	f023 030f 	bic.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	6811      	ldr	r1, [r2, #0]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	431a      	orrs	r2, r3
 8004dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db2:	e047      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dbe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc8:	d004      	beq.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a23      	ldr	r2, [pc, #140]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10f      	bne.n	8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004dd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dd8:	f7ff fe8f 	bl	8004afa <LL_ADC_IsEnabled>
 8004ddc:	4604      	mov	r4, r0
 8004dde:	481f      	ldr	r0, [pc, #124]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004de0:	f7ff fe8b 	bl	8004afa <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4323      	orrs	r3, r4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e012      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004df4:	481a      	ldr	r0, [pc, #104]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004df6:	f7ff fe80 	bl	8004afa <LL_ADC_IsEnabled>
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4819      	ldr	r0, [pc, #100]	@ (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dfe:	f7ff fe7c 	bl	8004afa <LL_ADC_IsEnabled>
 8004e02:	4603      	mov	r3, r0
 8004e04:	431c      	orrs	r4, r3
 8004e06:	481a      	ldr	r0, [pc, #104]	@ (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e08:	f7ff fe77 	bl	8004afa <LL_ADC_IsEnabled>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4323      	orrs	r3, r4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e26:	f023 030f 	bic.w	r3, r3, #15
 8004e2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2e:	e009      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e42:	e000      	b.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3784      	adds	r7, #132	@ 0x84
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	50000100 	.word	0x50000100
 8004e60:	50000400 	.word	0x50000400
 8004e64:	50000500 	.word	0x50000500
 8004e68:	50000300 	.word	0x50000300
 8004e6c:	50000700 	.word	0x50000700
 8004e70:	50000600 	.word	0x50000600

08004e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e84:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e90:	4013      	ands	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	60d3      	str	r3, [r2, #12]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec0:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	f003 0307 	and.w	r3, r3, #7
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	db0b      	blt.n	8004f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	4907      	ldr	r1, [pc, #28]	@ (8004f10 <__NVIC_EnableIRQ+0x38>)
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2001      	movs	r0, #1
 8004efa:	fa00 f202 	lsl.w	r2, r0, r2
 8004efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e100 	.word	0xe000e100

08004f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db0a      	blt.n	8004f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	490c      	ldr	r1, [pc, #48]	@ (8004f60 <__NVIC_SetPriority+0x4c>)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	440b      	add	r3, r1
 8004f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f3c:	e00a      	b.n	8004f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4908      	ldr	r1, [pc, #32]	@ (8004f64 <__NVIC_SetPriority+0x50>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	440b      	add	r3, r1
 8004f52:	761a      	strb	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	@ 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f1c3 0307 	rsb	r3, r3, #7
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf28      	it	cs
 8004f86:	2304      	movcs	r3, #4
 8004f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d902      	bls.n	8004f98 <NVIC_EncodePriority+0x30>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3b03      	subs	r3, #3
 8004f96:	e000      	b.n	8004f9a <NVIC_EncodePriority+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc0:	4313      	orrs	r3, r2
         );
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	@ 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe0:	d301      	bcc.n	8004fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <SysTick_Config+0x40>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fee:	210f      	movs	r1, #15
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	f7ff ff8e 	bl	8004f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <SysTick_Config+0x40>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffe:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <SysTick_Config+0x40>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff29 	bl	8004e74 <__NVIC_SetPriorityGrouping>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005038:	f7ff ff40 	bl	8004ebc <__NVIC_GetPriorityGrouping>
 800503c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	f7ff ff90 	bl	8004f68 <NVIC_EncodePriority>
 8005048:	4602      	mov	r2, r0
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff5f 	bl	8004f14 <__NVIC_SetPriority>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff33 	bl	8004ed8 <__NVIC_EnableIRQ>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ffa4 	bl	8004fd0 <SysTick_Config>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e08d      	b.n	80051c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_DMA_Init+0x138>)
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d80f      	bhi.n	80050d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b45      	ldr	r3, [pc, #276]	@ (80051d0 <HAL_DMA_Init+0x13c>)
 80050ba:	4413      	add	r3, r2
 80050bc:	4a45      	ldr	r2, [pc, #276]	@ (80051d4 <HAL_DMA_Init+0x140>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	009a      	lsls	r2, r3, #2
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a42      	ldr	r2, [pc, #264]	@ (80051d8 <HAL_DMA_Init+0x144>)
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80050d0:	e00e      	b.n	80050f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b40      	ldr	r3, [pc, #256]	@ (80051dc <HAL_DMA_Init+0x148>)
 80050da:	4413      	add	r3, r2
 80050dc:	4a3d      	ldr	r2, [pc, #244]	@ (80051d4 <HAL_DMA_Init+0x140>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	009a      	lsls	r2, r3, #2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a3c      	ldr	r2, [pc, #240]	@ (80051e0 <HAL_DMA_Init+0x14c>)
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800512c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa84 	bl	8005650 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005150:	d102      	bne.n	8005158 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800516c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_DMA_Init+0x104>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d80c      	bhi.n	8005198 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 faa4 	bl	80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	e008      	b.n	80051aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40020407 	.word	0x40020407
 80051d0:	bffdfff8 	.word	0xbffdfff8
 80051d4:	cccccccd 	.word	0xcccccccd
 80051d8:	40020000 	.word	0x40020000
 80051dc:	bffdfbf8 	.word	0xbffdfbf8
 80051e0:	40020400 	.word	0x40020400

080051e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Start_IT+0x20>
 8005200:	2302      	movs	r3, #2
 8005202:	e066      	b.n	80052d2 <HAL_DMA_Start_IT+0xee>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d155      	bne.n	80052c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f9c9 	bl	80055d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 020e 	orr.w	r2, r2, #14
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e00f      	b.n	800527c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0204 	bic.w	r2, r2, #4
 800526a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 020a 	orr.w	r2, r2, #10
 800527a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005298:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e005      	b.n	80052d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d005      	beq.n	80052fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e037      	b.n	800536e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 020e 	bic.w	r2, r2, #14
 800530c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800531c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	f003 021f 	and.w	r2, r3, #31
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800534a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005362:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800536c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d00d      	beq.n	80053c0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2204      	movs	r2, #4
 80053a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
 80053be:	e047      	b.n	8005450 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 020e 	bic.w	r2, r2, #14
 80053ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	f003 021f 	and.w	r2, r3, #31
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800540c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800542e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
    }
  }
  return status;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2204      	movs	r2, #4
 800547c:	409a      	lsls	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d026      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x7a>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d021      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0204 	bic.w	r2, r2, #4
 80054ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b2:	f003 021f 	and.w	r2, r3, #31
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	2104      	movs	r1, #4
 80054bc:	fa01 f202 	lsl.w	r2, r1, r2
 80054c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d071      	beq.n	80055ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054d2:	e06c      	b.n	80055ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2202      	movs	r2, #2
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02e      	beq.n	8005546 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d029      	beq.n	8005546 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 020a 	bic.w	r2, r2, #10
 800550e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f003 021f 	and.w	r2, r3, #31
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	2102      	movs	r1, #2
 8005526:	fa01 f202 	lsl.w	r2, r1, r2
 800552a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d038      	beq.n	80055ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005544:	e033      	b.n	80055ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2208      	movs	r2, #8
 8005550:	409a      	lsls	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02a      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d025      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 020e 	bic.w	r2, r2, #14
 8005572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005578:	f003 021f 	and.w	r2, r3, #31
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f202 	lsl.w	r2, r1, r2
 8005586:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
}
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055c6:	b2db      	uxtb	r3, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	f003 021f 	and.w	r2, r3, #31
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	2101      	movs	r1, #1
 800560c:	fa01 f202 	lsl.w	r2, r1, r2
 8005610:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b10      	cmp	r3, #16
 8005620:	d108      	bne.n	8005634 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005632:	e007      	b.n	8005644 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	4b16      	ldr	r3, [pc, #88]	@ (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d802      	bhi.n	800566a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005664:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e001      	b.n	800566e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800566a:	4b15      	ldr	r3, [pc, #84]	@ (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800566c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	3b08      	subs	r3, #8
 800567a:	4a12      	ldr	r2, [pc, #72]	@ (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	009a      	lsls	r2, r3, #2
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4413      	add	r3, r2
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800569a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2201      	movs	r2, #1
 80056a4:	409a      	lsls	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40020407 	.word	0x40020407
 80056bc:	40020800 	.word	0x40020800
 80056c0:	40020820 	.word	0x40020820
 80056c4:	cccccccd 	.word	0xcccccccd
 80056c8:	40020880 	.word	0x40020880

080056cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a08      	ldr	r2, [pc, #32]	@ (8005710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	1000823f 	.word	0x1000823f
 8005710:	40020940 	.word	0x40020940

08005714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005722:	e15a      	b.n	80059da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 814c 	beq.w	80059d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d005      	beq.n	8005754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005750:	2b02      	cmp	r3, #2
 8005752:	d130      	bne.n	80057b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	2203      	movs	r2, #3
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800578a:	2201      	movs	r2, #1
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4013      	ands	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 0201 	and.w	r2, r3, #1
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d017      	beq.n	80057f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d123      	bne.n	8005846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	08da      	lsrs	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3208      	adds	r2, #8
 8005806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	220f      	movs	r2, #15
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	6939      	ldr	r1, [r7, #16]
 8005842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2203      	movs	r2, #3
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 0203 	and.w	r2, r3, #3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80a6 	beq.w	80059d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005888:	4b5b      	ldr	r3, [pc, #364]	@ (80059f8 <HAL_GPIO_Init+0x2e4>)
 800588a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588c:	4a5a      	ldr	r2, [pc, #360]	@ (80059f8 <HAL_GPIO_Init+0x2e4>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	6613      	str	r3, [r2, #96]	@ 0x60
 8005894:	4b58      	ldr	r3, [pc, #352]	@ (80059f8 <HAL_GPIO_Init+0x2e4>)
 8005896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a0:	4a56      	ldr	r2, [pc, #344]	@ (80059fc <HAL_GPIO_Init+0x2e8>)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	3302      	adds	r3, #2
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	220f      	movs	r2, #15
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058ca:	d01f      	beq.n	800590c <HAL_GPIO_Init+0x1f8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005a00 <HAL_GPIO_Init+0x2ec>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d019      	beq.n	8005908 <HAL_GPIO_Init+0x1f4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a4b      	ldr	r2, [pc, #300]	@ (8005a04 <HAL_GPIO_Init+0x2f0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_GPIO_Init+0x1f0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a4a      	ldr	r2, [pc, #296]	@ (8005a08 <HAL_GPIO_Init+0x2f4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00d      	beq.n	8005900 <HAL_GPIO_Init+0x1ec>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a49      	ldr	r2, [pc, #292]	@ (8005a0c <HAL_GPIO_Init+0x2f8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <HAL_GPIO_Init+0x1e8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a48      	ldr	r2, [pc, #288]	@ (8005a10 <HAL_GPIO_Init+0x2fc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <HAL_GPIO_Init+0x1e4>
 80058f4:	2305      	movs	r3, #5
 80058f6:	e00a      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 80058f8:	2306      	movs	r3, #6
 80058fa:	e008      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 80058fc:	2304      	movs	r3, #4
 80058fe:	e006      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 8005900:	2303      	movs	r3, #3
 8005902:	e004      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 8005904:	2302      	movs	r3, #2
 8005906:	e002      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <HAL_GPIO_Init+0x1fa>
 800590c:	2300      	movs	r3, #0
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	f002 0203 	and.w	r2, r2, #3
 8005914:	0092      	lsls	r2, r2, #2
 8005916:	4093      	lsls	r3, r2
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800591e:	4937      	ldr	r1, [pc, #220]	@ (80059fc <HAL_GPIO_Init+0x2e8>)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	3302      	adds	r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800592c:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	43db      	mvns	r3, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005950:	4a30      	ldr	r2, [pc, #192]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005956:	4b2f      	ldr	r3, [pc, #188]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	43db      	mvns	r3, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4013      	ands	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800597a:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005980:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059ce:	4a11      	ldr	r2, [pc, #68]	@ (8005a14 <HAL_GPIO_Init+0x300>)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3301      	adds	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f47f ae9d 	bne.w	8005724 <HAL_GPIO_Init+0x10>
  }
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40010000 	.word	0x40010000
 8005a00:	48000400 	.word	0x48000400
 8005a04:	48000800 	.word	0x48000800
 8005a08:	48000c00 	.word	0x48000c00
 8005a0c:	48001000 	.word	0x48001000
 8005a10:	48001400 	.word	0x48001400
 8005a14:	40010400 	.word	0x40010400

08005a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	807b      	strh	r3, [r7, #2]
 8005a24:	4613      	mov	r3, r2
 8005a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a28:	787b      	ldrb	r3, [r7, #1]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a34:	e002      	b.n	8005a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a52:	4b08      	ldr	r3, [pc, #32]	@ (8005a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a5e:	4a05      	ldr	r2, [pc, #20]	@ (8005a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f806 	bl	8005a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40010400 	.word	0x40010400

08005a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e08d      	b.n	8005bbc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fb fe7f 	bl	80017b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2224      	movs	r2, #36	@ 0x24
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ade:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	e006      	b.n	8005b16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d108      	bne.n	8005b30 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	e007      	b.n	8005b40 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69d9      	ldr	r1, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	@ 0x28
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	817b      	strh	r3, [r7, #10]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	f040 80ef 	bne.w	8005dc8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0e5      	b.n	8005dca <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e0de      	b.n	8005dca <HAL_I2C_Master_Transmit_DMA+0x206>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2221      	movs	r2, #33	@ 0x21
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2210      	movs	r2, #16
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	893a      	ldrh	r2, [r7, #8]
 8005c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a66      	ldr	r2, [pc, #408]	@ (8005dd4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a66      	ldr	r2, [pc, #408]	@ (8005dd8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005c40:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2bff      	cmp	r3, #255	@ 0xff
 8005c4a:	d906      	bls.n	8005c5a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	22ff      	movs	r2, #255	@ 0xff
 8005c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e007      	b.n	8005c6a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c68:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01a      	beq.n	8005ca8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	781a      	ldrb	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d074      	beq.n	8005d9a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d022      	beq.n	8005cfe <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	4a47      	ldr	r2, [pc, #284]	@ (8005ddc <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc4:	4a46      	ldr	r2, [pc, #280]	@ (8005de0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005cc6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005ce8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005cee:	f7ff fa79 	bl	80051e4 <HAL_DMA_Start_IT>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d13a      	bne.n	8005d72 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005cfc:	e013      	b.n	8005d26 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e051      	b.n	8005dca <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	8979      	ldrh	r1, [r7, #10]
 8005d32:	4b2c      	ldr	r3, [pc, #176]	@ (8005de4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f001 fba3 	bl	8007484 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d58:	2110      	movs	r1, #16
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 fbc4 	bl	80074e8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e028      	b.n	8005dc4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f043 0210 	orr.w	r2, r3, #16
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e017      	b.n	8005dca <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005d9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	8979      	ldrh	r1, [r7, #10]
 8005da6:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f001 fb68 	bl	8007484 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f001 fb92 	bl	80074e8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e000      	b.n	8005dca <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	ffff0000 	.word	0xffff0000
 8005dd8:	08006403 	.word	0x08006403
 8005ddc:	08007383 	.word	0x08007383
 8005de0:	08007419 	.word	0x08007419
 8005de4:	80002000 	.word	0x80002000
 8005de8:	08005fc3 	.word	0x08005fc3

08005dec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	f043 0201 	orr.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e60:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	f043 0208 	orr.w	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea4:	f043 0202 	orr.w	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 030b 	and.w	r3, r3, #11
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 f91f 	bl	800710c <I2C_ITError>
  }
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
 8005f32:	4613      	mov	r3, r2
 8005f34:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b088      	sub	sp, #32
 8005fc6:	af02      	add	r7, sp, #8
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <I2C_Master_ISR_IT+0x1e>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e113      	b.n	8006208 <I2C_Master_ISR_IT+0x246>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d012      	beq.n	8006018 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2210      	movs	r2, #16
 8006002:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 f992 	bl	800733a <I2C_Flush_TXDR>
 8006016:	e0e4      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d022      	beq.n	8006068 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01d      	beq.n	8006068 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0304 	bic.w	r3, r3, #4
 8006032:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006066:	e0bc      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d128      	bne.n	80060c4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d023      	beq.n	80060c4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01e      	beq.n	80060c4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80a8 	beq.w	80061e2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80060c2:	e08e      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d05c      	beq.n	8006188 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d057      	beq.n	8006188 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d040      	beq.n	8006164 <I2C_Master_ISR_IT+0x1a2>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d13c      	bne.n	8006164 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2bff      	cmp	r3, #255	@ 0xff
 8006100:	d90e      	bls.n	8006120 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	22ff      	movs	r2, #255	@ 0xff
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8a79      	ldrh	r1, [r7, #18]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f001 f9b3 	bl	8007484 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611e:	e032      	b.n	8006186 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006132:	d00b      	beq.n	800614c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006138:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800613e:	8a79      	ldrh	r1, [r7, #18]
 8006140:	2000      	movs	r0, #0
 8006142:	9000      	str	r0, [sp, #0]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f99d 	bl	8007484 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614a:	e01c      	b.n	8006186 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8a79      	ldrh	r1, [r7, #18]
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f001 f991 	bl	8007484 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006162:	e010      	b.n	8006186 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006172:	d003      	beq.n	800617c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fcb0 	bl	8006ada <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800617a:	e032      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800617c:	2140      	movs	r1, #64	@ 0x40
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 ffc4 	bl	800710c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006184:	e02d      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
 8006186:	e02c      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d027      	beq.n	80061e2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006198:	2b00      	cmp	r3, #0
 800619a:	d022      	beq.n	80061e2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d119      	bne.n	80061da <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b4:	d015      	beq.n	80061e2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061be:	d108      	bne.n	80061d2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	e007      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fc81 	bl	8006ada <I2C_ITMasterSeqCplt>
 80061d8:	e003      	b.n	80061e2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061da:	2140      	movs	r1, #64	@ 0x40
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 ff95 	bl	800710c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fd07 	bl	8006c0c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <I2C_Slave_ISR_IT+0x24>
 8006230:	2302      	movs	r3, #2
 8006232:	e0e2      	b.n	80063fa <I2C_Slave_ISR_IT+0x1ea>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006250:	6939      	ldr	r1, [r7, #16]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fda2 	bl	8006d9c <I2C_ITSlaveCplt>
 8006258:	e0ca      	b.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d04b      	beq.n	80062fc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800626a:	2b00      	cmp	r3, #0
 800626c:	d046      	beq.n	80062fc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d128      	bne.n	80062ca <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b28      	cmp	r3, #40	@ 0x28
 8006282:	d108      	bne.n	8006296 <I2C_Slave_ISR_IT+0x86>
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800628a:	d104      	bne.n	8006296 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800628c:	6939      	ldr	r1, [r7, #16]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fee8 	bl	8007064 <I2C_ITListenCplt>
 8006294:	e031      	b.n	80062fa <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b29      	cmp	r3, #41	@ 0x29
 80062a0:	d10e      	bne.n	80062c0 <I2C_Slave_ISR_IT+0xb0>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062a8:	d00a      	beq.n	80062c0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2210      	movs	r2, #16
 80062b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 f841 	bl	800733a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fc4b 	bl	8006b54 <I2C_ITSlaveSeqCplt>
 80062be:	e01c      	b.n	80062fa <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2210      	movs	r2, #16
 80062c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80062c8:	e08f      	b.n	80063ea <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	f043 0204 	orr.w	r2, r3, #4
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <I2C_Slave_ISR_IT+0xdc>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ea:	d17e      	bne.n	80063ea <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f0:	4619      	mov	r1, r3
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 ff0a 	bl	800710c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80062f8:	e077      	b.n	80063ea <I2C_Slave_ISR_IT+0x1da>
 80062fa:	e076      	b.n	80063ea <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02f      	beq.n	8006366 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02a      	beq.n	8006366 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d018      	beq.n	800634c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d14b      	bne.n	80063ee <I2C_Slave_ISR_IT+0x1de>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800635c:	d047      	beq.n	80063ee <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fbf8 	bl	8006b54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006364:	e043      	b.n	80063ee <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800637a:	6939      	ldr	r1, [r7, #16]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fb28 	bl	80069d2 <I2C_ITAddrCplt>
 8006382:	e035      	b.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d030      	beq.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006394:	2b00      	cmp	r3, #0
 8006396:	d02b      	beq.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d018      	beq.n	80063d4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80063d2:	e00d      	b.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063da:	d002      	beq.n	80063e2 <I2C_Slave_ISR_IT+0x1d2>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fbb6 	bl	8006b54 <I2C_ITSlaveSeqCplt>
 80063e8:	e002      	b.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80063ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b088      	sub	sp, #32
 8006406:	af02      	add	r7, sp, #8
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <I2C_Master_ISR_DMA+0x1a>
 8006418:	2302      	movs	r3, #2
 800641a:	e0d9      	b.n	80065d0 <I2C_Master_ISR_DMA+0x1ce>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006434:	2b00      	cmp	r3, #0
 8006436:	d011      	beq.n	800645c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2210      	movs	r2, #16
 800643e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006444:	f043 0204 	orr.w	r2, r3, #4
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800644c:	2120      	movs	r1, #32
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f001 f84a 	bl	80074e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 ff70 	bl	800733a <I2C_Flush_TXDR>
 800645a:	e0b4      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d071      	beq.n	800654a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800646c:	2b00      	cmp	r3, #0
 800646e:	d06c      	beq.n	800654a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04e      	beq.n	8006528 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006496:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2bff      	cmp	r3, #255	@ 0xff
 80064a0:	d906      	bls.n	80064b0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	22ff      	movs	r2, #255	@ 0xff
 80064a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80064a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e010      	b.n	80064d2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064c2:	d003      	beq.n	80064cc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e002      	b.n	80064d2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80064cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064d0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	8a79      	ldrh	r1, [r7, #18]
 80064da:	2300      	movs	r3, #0
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 ffcf 	bl	8007484 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b22      	cmp	r3, #34	@ 0x22
 8006502:	d108      	bne.n	8006516 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006512:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006514:	e057      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006524:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006526:	e04e      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006536:	d003      	beq.n	8006540 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 face 	bl	8006ada <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800653e:	e042      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006540:	2140      	movs	r1, #64	@ 0x40
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fde2 	bl	800710c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006548:	e03d      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800655a:	2b00      	cmp	r3, #0
 800655c:	d023      	beq.n	80065a6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d119      	bne.n	800659c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006576:	d025      	beq.n	80065c4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006580:	d108      	bne.n	8006594 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006590:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006592:	e017      	b.n	80065c4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 faa0 	bl	8006ada <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800659a:	e013      	b.n	80065c4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800659c:	2140      	movs	r1, #64	@ 0x40
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fdb4 	bl	800710c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80065a4:	e00e      	b.n	80065c4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fb25 	bl	8006c0c <I2C_ITMasterCplt>
 80065c2:	e000      	b.n	80065c6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80065c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80065e4:	4b8d      	ldr	r3, [pc, #564]	@ (800681c <I2C_Mem_ISR_DMA+0x244>)
 80065e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <I2C_Mem_ISR_DMA+0x1e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e10e      	b.n	8006814 <I2C_Mem_ISR_DMA+0x23c>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d016      	beq.n	8006636 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800660e:	2b00      	cmp	r3, #0
 8006610:	d011      	beq.n	8006636 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2210      	movs	r2, #16
 8006618:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006626:	2120      	movs	r1, #32
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 ff5d 	bl	80074e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fe83 	bl	800733a <I2C_Flush_TXDR>
 8006634:	e0e9      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00e      	beq.n	800665e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006652:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f04f 32ff 	mov.w	r2, #4294967295
 800665a:	651a      	str	r2, [r3, #80]	@ 0x50
 800665c:	e0d5      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05f      	beq.n	8006728 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800666e:	2b00      	cmp	r3, #0
 8006670:	d05a      	beq.n	8006728 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006672:	2101      	movs	r1, #1
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 ffbb 	bl	80075f0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800667a:	2110      	movs	r1, #16
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 ff33 	bl	80074e8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d048      	beq.n	800671e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2bff      	cmp	r3, #255	@ 0xff
 8006694:	d910      	bls.n	80066b8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	b299      	uxth	r1, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fee7 	bl	8007484 <I2C_TransferConfig>
 80066b6:	e011      	b.n	80066dc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c6:	b299      	uxth	r1, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fed4 	bl	8007484 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b22      	cmp	r3, #34	@ 0x22
 80066f8:	d108      	bne.n	800670c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006708:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800670a:	e07e      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800671a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800671c:	e075      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800671e:	2140      	movs	r1, #64	@ 0x40
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fcf3 	bl	800710c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006726:	e070      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d05d      	beq.n	80067ee <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006738:	2b00      	cmp	r3, #0
 800673a:	d058      	beq.n	80067ee <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800673c:	2101      	movs	r1, #1
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 ff56 	bl	80075f0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006744:	2110      	movs	r1, #16
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fece 	bl	80074e8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b22      	cmp	r3, #34	@ 0x22
 8006756:	d101      	bne.n	800675c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006758:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <I2C_Mem_ISR_DMA+0x248>)
 800675a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2bff      	cmp	r3, #255	@ 0xff
 8006764:	d910      	bls.n	8006788 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	22ff      	movs	r2, #255	@ 0xff
 800676a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006770:	b299      	uxth	r1, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006776:	b2da      	uxtb	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fe7f 	bl	8007484 <I2C_TransferConfig>
 8006786:	e011      	b.n	80067ac <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006796:	b299      	uxth	r1, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679c:	b2da      	uxtb	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fe6c 	bl	8007484 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b22      	cmp	r3, #34	@ 0x22
 80067c8:	d108      	bne.n	80067dc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067da:	e016      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ec:	e00d      	b.n	800680a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fa01 	bl	8006c0c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	80002000 	.word	0x80002000
 8006820:	80002400 	.word	0x80002400

08006824 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <I2C_Slave_ISR_DMA+0x24>
 8006844:	2302      	movs	r3, #2
 8006846:	e0c0      	b.n	80069ca <I2C_Slave_ISR_DMA+0x1a6>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fa98 	bl	8006d9c <I2C_ITSlaveCplt>
 800686c:	e0a8      	b.n	80069c0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8095 	beq.w	80069a4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 808f 	beq.w	80069a4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006896:	2b00      	cmp	r3, #0
 8006898:	d07d      	beq.n	8006996 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00c      	beq.n	80068bc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80068b8:	2301      	movs	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80068da:	2301      	movs	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d128      	bne.n	8006936 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b28      	cmp	r3, #40	@ 0x28
 80068ee:	d108      	bne.n	8006902 <I2C_Slave_ISR_DMA+0xde>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068f6:	d104      	bne.n	8006902 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fbb2 	bl	8007064 <I2C_ITListenCplt>
 8006900:	e048      	b.n	8006994 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b29      	cmp	r3, #41	@ 0x29
 800690c:	d10e      	bne.n	800692c <I2C_Slave_ISR_DMA+0x108>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006914:	d00a      	beq.n	800692c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fd0b 	bl	800733a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f915 	bl	8006b54 <I2C_ITSlaveSeqCplt>
 800692a:	e033      	b.n	8006994 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2210      	movs	r2, #16
 8006932:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006934:	e034      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f043 0204 	orr.w	r2, r3, #4
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006950:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <I2C_Slave_ISR_DMA+0x13c>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800695e:	d11f      	bne.n	80069a0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b21      	cmp	r3, #33	@ 0x21
 8006964:	d002      	beq.n	800696c <I2C_Slave_ISR_DMA+0x148>
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b29      	cmp	r3, #41	@ 0x29
 800696a:	d103      	bne.n	8006974 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2221      	movs	r2, #33	@ 0x21
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
 8006972:	e008      	b.n	8006986 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b22      	cmp	r3, #34	@ 0x22
 8006978:	d002      	beq.n	8006980 <I2C_Slave_ISR_DMA+0x15c>
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	2b2a      	cmp	r3, #42	@ 0x2a
 800697e:	d102      	bne.n	8006986 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2222      	movs	r2, #34	@ 0x22
 8006984:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	4619      	mov	r1, r3
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fbbd 	bl	800710c <I2C_ITError>
      if (treatdmanack == 1U)
 8006992:	e005      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x17c>
 8006994:	e004      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2210      	movs	r2, #16
 800699c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800699e:	e00f      	b.n	80069c0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80069a0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069a2:	e00d      	b.n	80069c0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f809 	bl	80069d2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069e8:	2b28      	cmp	r3, #40	@ 0x28
 80069ea:	d16a      	bne.n	8006ac2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	0c1b      	lsrs	r3, r3, #16
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a0a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a18:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a26:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d138      	bne.n	8006aa2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006a30:	897b      	ldrh	r3, [r7, #10]
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	89bb      	ldrh	r3, [r7, #12]
 8006a38:	4053      	eors	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f003 0306 	and.w	r3, r3, #6
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11c      	bne.n	8006a7e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006a44:	897b      	ldrh	r3, [r7, #10]
 8006a46:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d13b      	bne.n	8006ad2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2208      	movs	r2, #8
 8006a66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a70:	89ba      	ldrh	r2, [r7, #12]
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fa55 	bl	8005f26 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a7c:	e029      	b.n	8006ad2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fdb2 	bl	80075f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a94:	89ba      	ldrh	r2, [r7, #12]
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fa43 	bl	8005f26 <HAL_I2C_AddrCallback>
}
 8006aa0:	e017      	b.n	8006ad2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fda2 	bl	80075f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ab4:	89ba      	ldrh	r2, [r7, #12]
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fa33 	bl	8005f26 <HAL_I2C_AddrCallback>
}
 8006ac0:	e007      	b.n	8006ad2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b21      	cmp	r3, #33	@ 0x21
 8006af4:	d115      	bne.n	8006b22 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2211      	movs	r2, #17
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fd6f 	bl	80075f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff f9db 	bl	8005ed6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b20:	e014      	b.n	8006b4c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2212      	movs	r2, #18
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b36:	2102      	movs	r1, #2
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fd59 	bl	80075f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff f9cf 	bl	8005eea <HAL_I2C_MasterRxCpltCallback>
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e00c      	b.n	8006ba2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ba0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b29      	cmp	r3, #41	@ 0x29
 8006bac:	d112      	bne.n	8006bd4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2228      	movs	r2, #40	@ 0x28
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2221      	movs	r2, #33	@ 0x21
 8006bba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fd16 	bl	80075f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f996 	bl	8005efe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bd2:	e017      	b.n	8006c04 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bde:	d111      	bne.n	8006c04 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2228      	movs	r2, #40	@ 0x28
 8006be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2222      	movs	r2, #34	@ 0x22
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006bee:	2102      	movs	r1, #2
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fcfd 	bl	80075f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff f987 	bl	8005f12 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b21      	cmp	r3, #33	@ 0x21
 8006c2c:	d107      	bne.n	8006c3e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c2e:	2101      	movs	r1, #1
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fcdd 	bl	80075f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2211      	movs	r2, #17
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c3c:	e00c      	b.n	8006c58 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b22      	cmp	r3, #34	@ 0x22
 8006c48:	d106      	bne.n	8006c58 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fccf 	bl	80075f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2212      	movs	r2, #18
 8006c56:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b4c      	ldr	r3, [pc, #304]	@ (8006d94 <I2C_ITMasterCplt+0x188>)
 8006c64:	400b      	ands	r3, r1
 8006c66:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a49      	ldr	r2, [pc, #292]	@ (8006d98 <I2C_ITMasterCplt+0x18c>)
 8006c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2210      	movs	r2, #16
 8006c84:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8a:	f043 0204 	orr.w	r2, r3, #4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b60      	cmp	r3, #96	@ 0x60
 8006c9c:	d10a      	bne.n	8006cb4 <I2C_ITMasterCplt+0xa8>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb40 	bl	800733a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b60      	cmp	r3, #96	@ 0x60
 8006cca:	d002      	beq.n	8006cd2 <I2C_ITMasterCplt+0xc6>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fa17 	bl	800710c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cde:	e054      	b.n	8006d8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b21      	cmp	r3, #33	@ 0x21
 8006cea:	d124      	bne.n	8006d36 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b40      	cmp	r3, #64	@ 0x40
 8006d04:	d10b      	bne.n	8006d1e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff f91d 	bl	8005f56 <HAL_I2C_MemTxCpltCallback>
}
 8006d1c:	e035      	b.n	8006d8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff f8d1 	bl	8005ed6 <HAL_I2C_MasterTxCpltCallback>
}
 8006d34:	e029      	b.n	8006d8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b22      	cmp	r3, #34	@ 0x22
 8006d40:	d123      	bne.n	8006d8a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	d10b      	bne.n	8006d74 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff f8fc 	bl	8005f6a <HAL_I2C_MemRxCpltCallback>
}
 8006d72:	e00a      	b.n	8006d8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff f8b0 	bl	8005eea <HAL_I2C_MasterRxCpltCallback>
}
 8006d8a:	bf00      	nop
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	fe00e800 	.word	0xfe00e800
 8006d98:	ffff0000 	.word	0xffff0000

08006d9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dbe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	2b21      	cmp	r3, #33	@ 0x21
 8006dcc:	d002      	beq.n	8006dd4 <I2C_ITSlaveCplt+0x38>
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	2b29      	cmp	r3, #41	@ 0x29
 8006dd2:	d108      	bne.n	8006de6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006dd4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fc09 	bl	80075f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2221      	movs	r2, #33	@ 0x21
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de4:	e019      	b.n	8006e1a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b22      	cmp	r3, #34	@ 0x22
 8006dea:	d002      	beq.n	8006df2 <I2C_ITSlaveCplt+0x56>
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df0:	d108      	bne.n	8006e04 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006df2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fbfa 	bl	80075f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2222      	movs	r2, #34	@ 0x22
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e02:	e00a      	b.n	8006e1a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	2b28      	cmp	r3, #40	@ 0x28
 8006e08:	d107      	bne.n	8006e1a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006e0a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fbee 	bl	80075f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e28:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b89      	ldr	r3, [pc, #548]	@ (800705c <I2C_ITSlaveCplt+0x2c0>)
 8006e36:	400b      	ands	r3, r1
 8006e38:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa7d 	bl	800733a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d013      	beq.n	8006e72 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01f      	beq.n	8006ea2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e70:	e017      	b.n	8006ea2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d012      	beq.n	8006ea2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d020      	beq.n	8006eee <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0304 	bic.w	r3, r3, #4
 8006eb2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00c      	beq.n	8006eee <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efc:	f043 0204 	orr.w	r2, r3, #4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d049      	beq.n	8006fa2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d044      	beq.n	8006fa2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d128      	bne.n	8006f74 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b28      	cmp	r3, #40	@ 0x28
 8006f2c:	d108      	bne.n	8006f40 <I2C_ITSlaveCplt+0x1a4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f34:	d104      	bne.n	8006f40 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f36:	6979      	ldr	r1, [r7, #20]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f893 	bl	8007064 <I2C_ITListenCplt>
 8006f3e:	e030      	b.n	8006fa2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b29      	cmp	r3, #41	@ 0x29
 8006f4a:	d10e      	bne.n	8006f6a <I2C_ITSlaveCplt+0x1ce>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f52:	d00a      	beq.n	8006f6a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2210      	movs	r2, #16
 8006f5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9ec 	bl	800733a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fdf6 	bl	8006b54 <I2C_ITSlaveSeqCplt>
 8006f68:	e01b      	b.n	8006fa2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	61da      	str	r2, [r3, #28]
 8006f72:	e016      	b.n	8006fa2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2210      	movs	r2, #16
 8006f7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f80:	f043 0204 	orr.w	r2, r3, #4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <I2C_ITSlaveCplt+0x1fa>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f94:	d105      	bne.n	8006fa2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8b5 	bl	800710c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8a4 	bl	800710c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b28      	cmp	r3, #40	@ 0x28
 8006fce:	d141      	bne.n	8007054 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006fd0:	6979      	ldr	r1, [r7, #20]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f846 	bl	8007064 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fd8:	e03c      	b.n	8007054 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fe2:	d014      	beq.n	800700e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fdb5 	bl	8006b54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	@ (8007060 <I2C_ITSlaveCplt+0x2c4>)
 8006fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fe ff9b 	bl	8005f42 <HAL_I2C_ListenCpltCallback>
}
 800700c:	e022      	b.n	8007054 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b22      	cmp	r3, #34	@ 0x22
 8007018:	d10e      	bne.n	8007038 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe ff6e 	bl	8005f12 <HAL_I2C_SlaveRxCpltCallback>
}
 8007036:	e00d      	b.n	8007054 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fe ff55 	bl	8005efe <HAL_I2C_SlaveTxCpltCallback>
}
 8007054:	bf00      	nop
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	fe00e800 	.word	0xfe00e800
 8007060:	ffff0000 	.word	0xffff0000

08007064 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a25      	ldr	r2, [pc, #148]	@ (8007108 <I2C_ITListenCplt+0xa4>)
 8007072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d022      	beq.n	80070e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d012      	beq.n	80070e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d8:	f043 0204 	orr.w	r2, r3, #4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa83 	bl	80075f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2210      	movs	r2, #16
 80070f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fe ff21 	bl	8005f42 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	ffff0000 	.word	0xffff0000

0800710c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800711c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a6d      	ldr	r2, [pc, #436]	@ (80072e0 <I2C_ITError+0x1d4>)
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b28      	cmp	r3, #40	@ 0x28
 8007142:	d005      	beq.n	8007150 <I2C_ITError+0x44>
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b29      	cmp	r3, #41	@ 0x29
 8007148:	d002      	beq.n	8007150 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b2a      	cmp	r3, #42	@ 0x2a
 800714e:	d10b      	bne.n	8007168 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007150:	2103      	movs	r1, #3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa4c 	bl	80075f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2228      	movs	r2, #40	@ 0x28
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a60      	ldr	r2, [pc, #384]	@ (80072e4 <I2C_ITError+0x1d8>)
 8007164:	635a      	str	r2, [r3, #52]	@ 0x34
 8007166:	e030      	b.n	80071ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007168:	f248 0103 	movw	r1, #32771	@ 0x8003
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa3f 	bl	80075f0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8e1 	bl	800733a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b60      	cmp	r3, #96	@ 0x60
 8007182:	d01f      	beq.n	80071c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b20      	cmp	r3, #32
 8007198:	d114      	bne.n	80071c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d109      	bne.n	80071bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2210      	movs	r2, #16
 80071ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b4:	f043 0204 	orr.w	r2, r3, #4
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2220      	movs	r2, #32
 80071c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d039      	beq.n	800724c <I2C_ITError+0x140>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b11      	cmp	r3, #17
 80071dc:	d002      	beq.n	80071e4 <I2C_ITError+0xd8>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b21      	cmp	r3, #33	@ 0x21
 80071e2:	d133      	bne.n	800724c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071f2:	d107      	bne.n	8007204 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007202:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe f9d5 	bl	80055b8 <HAL_DMA_GetState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b01      	cmp	r3, #1
 8007212:	d017      	beq.n	8007244 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	4a33      	ldr	r2, [pc, #204]	@ (80072e8 <I2C_ITError+0x1dc>)
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe f8af 	bl	800538c <HAL_DMA_Abort_IT>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d04d      	beq.n	80072d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800723e:	4610      	mov	r0, r2
 8007240:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007242:	e045      	b.n	80072d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f851 	bl	80072ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800724a:	e041      	b.n	80072d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d039      	beq.n	80072c8 <I2C_ITError+0x1bc>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b12      	cmp	r3, #18
 8007258:	d002      	beq.n	8007260 <I2C_ITError+0x154>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b22      	cmp	r3, #34	@ 0x22
 800725e:	d133      	bne.n	80072c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800726a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726e:	d107      	bne.n	8007280 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800727e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe f997 	bl	80055b8 <HAL_DMA_GetState>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d017      	beq.n	80072c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	4a14      	ldr	r2, [pc, #80]	@ (80072e8 <I2C_ITError+0x1dc>)
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe f871 	bl	800538c <HAL_DMA_Abort_IT>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d011      	beq.n	80072d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072ba:	4610      	mov	r0, r2
 80072bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072be:	e009      	b.n	80072d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f813 	bl	80072ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c6:	e005      	b.n	80072d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f80f 	bl	80072ec <I2C_TreatErrorCallback>
  }
}
 80072ce:	e002      	b.n	80072d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072d0:	bf00      	nop
 80072d2:	e000      	b.n	80072d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072d4:	bf00      	nop
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	ffff0000 	.word	0xffff0000
 80072e4:	08006211 	.word	0x08006211
 80072e8:	08007447 	.word	0x08007447

080072ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b60      	cmp	r3, #96	@ 0x60
 80072fe:	d10e      	bne.n	800731e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fe fe3b 	bl	8005f92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800731c:	e009      	b.n	8007332 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe fe26 	bl	8005f7e <HAL_I2C_ErrorCallback>
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d103      	bne.n	8007358 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2200      	movs	r2, #0
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b01      	cmp	r3, #1
 8007364:	d007      	beq.n	8007376 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	619a      	str	r2, [r3, #24]
  }
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800739e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073aa:	2120      	movs	r1, #32
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f89b 	bl	80074e8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073b2:	e02d      	b.n	8007410 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073bc:	441a      	add	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2bff      	cmp	r3, #255	@ 0xff
 80073ca:	d903      	bls.n	80073d4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	22ff      	movs	r2, #255	@ 0xff
 80073d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073d2:	e004      	b.n	80073de <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	4619      	mov	r1, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3328      	adds	r3, #40	@ 0x28
 80073ee:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80073f4:	f7fd fef6 	bl	80051e4 <HAL_DMA_Start_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073fe:	2110      	movs	r1, #16
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff fe83 	bl	800710c <I2C_ITError>
}
 8007406:	e003      	b.n	8007410 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007408:	2140      	movs	r1, #64	@ 0x40
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f86c 	bl	80074e8 <I2C_Enable_IRQ>
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007434:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007436:	2110      	movs	r1, #16
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fe67 	bl	800710c <I2C_ITError>
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	2200      	movs	r2, #0
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007470:	2200      	movs	r2, #0
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ff39 	bl	80072ec <I2C_TreatErrorCallback>
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	817b      	strh	r3, [r7, #10]
 8007492:	4613      	mov	r3, r2
 8007494:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007496:	897b      	ldrh	r3, [r7, #10]
 8007498:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800749c:	7a7b      	ldrb	r3, [r7, #9]
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	0d5b      	lsrs	r3, r3, #21
 80074be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80074c2:	4b08      	ldr	r3, [pc, #32]	@ (80074e4 <I2C_TransferConfig+0x60>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	43db      	mvns	r3, r3
 80074c8:	ea02 0103 	and.w	r1, r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	03ff63ff 	.word	0x03ff63ff

080074e8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fc:	4a39      	ldr	r2, [pc, #228]	@ (80075e4 <I2C_Enable_IRQ+0xfc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d032      	beq.n	8007568 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007506:	4a38      	ldr	r2, [pc, #224]	@ (80075e8 <I2C_Enable_IRQ+0x100>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d02d      	beq.n	8007568 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007510:	4a36      	ldr	r2, [pc, #216]	@ (80075ec <I2C_Enable_IRQ+0x104>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d028      	beq.n	8007568 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007516:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da03      	bge.n	8007526 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007524:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007526:	887b      	ldrh	r3, [r7, #2]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007536:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007548:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	2b10      	cmp	r3, #16
 800754e:	d103      	bne.n	8007558 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007556:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	2b20      	cmp	r3, #32
 800755c:	d133      	bne.n	80075c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f043 0320 	orr.w	r3, r3, #32
 8007564:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007566:	e02e      	b.n	80075c6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800756c:	2b00      	cmp	r3, #0
 800756e:	da03      	bge.n	8007578 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007576:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007588:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800758a:	887b      	ldrh	r3, [r7, #2]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800759a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800759c:	887b      	ldrh	r3, [r7, #2]
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d103      	bne.n	80075aa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d103      	bne.n	80075b8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80075b8:	887b      	ldrh	r3, [r7, #2]
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d103      	bne.n	80075c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6819      	ldr	r1, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	08006403 	.word	0x08006403
 80075e8:	08006825 	.word	0x08006825
 80075ec:	080065d9 	.word	0x080065d9

080075f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007600:	887b      	ldrh	r3, [r7, #2]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007610:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800761e:	2b28      	cmp	r3, #40	@ 0x28
 8007620:	d003      	beq.n	800762a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007628:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800762a:	887b      	ldrh	r3, [r7, #2]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800763a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007642:	b2db      	uxtb	r3, r3
 8007644:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007648:	2b28      	cmp	r3, #40	@ 0x28
 800764a:	d003      	beq.n	8007654 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007652:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007654:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	da03      	bge.n	8007664 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007662:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	2b10      	cmp	r3, #16
 8007668:	d103      	bne.n	8007672 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007670:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007672:	887b      	ldrh	r3, [r7, #2]
 8007674:	2b20      	cmp	r3, #32
 8007676:	d103      	bne.n	8007680 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f043 0320 	orr.w	r3, r3, #32
 800767e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007680:	887b      	ldrh	r3, [r7, #2]
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d103      	bne.n	800768e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	43da      	mvns	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	400a      	ands	r2, r1
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d138      	bne.n	8007734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e032      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	@ 0x24
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b20      	cmp	r3, #32
 8007756:	d139      	bne.n	80077cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007762:	2302      	movs	r3, #2
 8007764:	e033      	b.n	80077ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2224      	movs	r2, #36	@ 0x24
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d141      	bne.n	800786e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f6:	d131      	bne.n	800785c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077f8:	4b47      	ldr	r3, [pc, #284]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077fe:	4a46      	ldr	r2, [pc, #280]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007808:	4b43      	ldr	r3, [pc, #268]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007810:	4a41      	ldr	r2, [pc, #260]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007818:	4b40      	ldr	r3, [pc, #256]	@ (800791c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2232      	movs	r2, #50	@ 0x32
 800781e:	fb02 f303 	mul.w	r3, r2, r3
 8007822:	4a3f      	ldr	r2, [pc, #252]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007824:	fba2 2303 	umull	r2, r3, r2, r3
 8007828:	0c9b      	lsrs	r3, r3, #18
 800782a:	3301      	adds	r3, #1
 800782c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800782e:	e002      	b.n	8007836 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b01      	subs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007836:	4b38      	ldr	r3, [pc, #224]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800783e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007842:	d102      	bne.n	800784a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f2      	bne.n	8007830 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800784a:	4b33      	ldr	r3, [pc, #204]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007856:	d158      	bne.n	800790a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e057      	b.n	800790c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800785c:	4b2e      	ldr	r3, [pc, #184]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800785e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007862:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800786c:	e04d      	b.n	800790a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007874:	d141      	bne.n	80078fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007876:	4b28      	ldr	r3, [pc, #160]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800787e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007882:	d131      	bne.n	80078e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007884:	4b24      	ldr	r3, [pc, #144]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800788a:	4a23      	ldr	r2, [pc, #140]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007890:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007894:	4b20      	ldr	r3, [pc, #128]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800789c:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078a4:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2232      	movs	r2, #50	@ 0x32
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	0c9b      	lsrs	r3, r3, #18
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ba:	e002      	b.n	80078c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b01      	subs	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078c2:	4b15      	ldr	r3, [pc, #84]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ce:	d102      	bne.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f2      	bne.n	80078bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078d6:	4b10      	ldr	r3, [pc, #64]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e2:	d112      	bne.n	800790a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e011      	b.n	800790c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80078f8:	e007      	b.n	800790a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80078fa:	4b07      	ldr	r3, [pc, #28]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007902:	4a05      	ldr	r2, [pc, #20]	@ (8007918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007904:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007908:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40007000 	.word	0x40007000
 800791c:	2000003c 	.word	0x2000003c
 8007920:	431bde83 	.word	0x431bde83

08007924 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4a04      	ldr	r2, [pc, #16]	@ (8007940 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800792e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007932:	6093      	str	r3, [r2, #8]
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40007000 	.word	0x40007000

08007944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e2fe      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d075      	beq.n	8007a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007962:	4b97      	ldr	r3, [pc, #604]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 030c 	and.w	r3, r3, #12
 800796a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800796c:	4b94      	ldr	r3, [pc, #592]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b0c      	cmp	r3, #12
 800797a:	d102      	bne.n	8007982 <HAL_RCC_OscConfig+0x3e>
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b03      	cmp	r3, #3
 8007980:	d002      	beq.n	8007988 <HAL_RCC_OscConfig+0x44>
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b08      	cmp	r3, #8
 8007986:	d10b      	bne.n	80079a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007988:	4b8d      	ldr	r3, [pc, #564]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05b      	beq.n	8007a4c <HAL_RCC_OscConfig+0x108>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d157      	bne.n	8007a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e2d9      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a8:	d106      	bne.n	80079b8 <HAL_RCC_OscConfig+0x74>
 80079aa:	4b85      	ldr	r3, [pc, #532]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a84      	ldr	r2, [pc, #528]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e01d      	b.n	80079f4 <HAL_RCC_OscConfig+0xb0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c0:	d10c      	bne.n	80079dc <HAL_RCC_OscConfig+0x98>
 80079c2:	4b7f      	ldr	r3, [pc, #508]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a7e      	ldr	r2, [pc, #504]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	4b7c      	ldr	r3, [pc, #496]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a7b      	ldr	r2, [pc, #492]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e00b      	b.n	80079f4 <HAL_RCC_OscConfig+0xb0>
 80079dc:	4b78      	ldr	r3, [pc, #480]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a77      	ldr	r2, [pc, #476]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4b75      	ldr	r3, [pc, #468]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a74      	ldr	r2, [pc, #464]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 80079ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d013      	beq.n	8007a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fb fd94 	bl	8003528 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a04:	f7fb fd90 	bl	8003528 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b64      	cmp	r3, #100	@ 0x64
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e29e      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a16:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0xc0>
 8007a22:	e014      	b.n	8007a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7fb fd80 	bl	8003528 <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a2c:	f7fb fd7c 	bl	8003528 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	@ 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e28a      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a3e:	4b60      	ldr	r3, [pc, #384]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0xe8>
 8007a4a:	e000      	b.n	8007a4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d075      	beq.n	8007b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a5a:	4b59      	ldr	r3, [pc, #356]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a64:	4b56      	ldr	r3, [pc, #344]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b0c      	cmp	r3, #12
 8007a72:	d102      	bne.n	8007a7a <HAL_RCC_OscConfig+0x136>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d002      	beq.n	8007a80 <HAL_RCC_OscConfig+0x13c>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d11f      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a80:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_RCC_OscConfig+0x154>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e25d      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a98:	4b49      	ldr	r3, [pc, #292]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	061b      	lsls	r3, r3, #24
 8007aa6:	4946      	ldr	r1, [pc, #280]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007aac:	4b45      	ldr	r3, [pc, #276]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fb fced 	bl	8003490 <HAL_InitTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d043      	beq.n	8007b44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e249      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d023      	beq.n	8007b10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a3c      	ldr	r2, [pc, #240]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7fb fd28 	bl	8003528 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007adc:	f7fb fd24 	bl	8003528 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e232      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aee:	4b34      	ldr	r3, [pc, #208]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	4b31      	ldr	r3, [pc, #196]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	492d      	ldr	r1, [pc, #180]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	604b      	str	r3, [r1, #4]
 8007b0e:	e01a      	b.n	8007b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b10:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1c:	f7fb fd04 	bl	8003528 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b24:	f7fb fd00 	bl	8003528 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e20e      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b36:	4b22      	ldr	r3, [pc, #136]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x1e0>
 8007b42:	e000      	b.n	8007b46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d041      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01c      	beq.n	8007b94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b5a:	4b19      	ldr	r3, [pc, #100]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b60:	4a17      	ldr	r2, [pc, #92]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b62:	f043 0301 	orr.w	r3, r3, #1
 8007b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6a:	f7fb fcdd 	bl	8003528 <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b72:	f7fb fcd9 	bl	8003528 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e1e7      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b84:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <HAL_RCC_OscConfig+0x22e>
 8007b92:	e020      	b.n	8007bd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b94:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b9a:	4a09      	ldr	r2, [pc, #36]	@ (8007bc0 <HAL_RCC_OscConfig+0x27c>)
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba4:	f7fb fcc0 	bl	8003528 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007baa:	e00d      	b.n	8007bc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bac:	f7fb fcbc 	bl	8003528 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d906      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e1ca      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
 8007bbe:	bf00      	nop
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ea      	bne.n	8007bac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80a6 	beq.w	8007d30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007be4:	2300      	movs	r3, #0
 8007be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007be8:	4b84      	ldr	r3, [pc, #528]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x2b4>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <HAL_RCC_OscConfig+0x2b6>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00d      	beq.n	8007c1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	4a7e      	ldr	r2, [pc, #504]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c16:	2301      	movs	r3, #1
 8007c18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c1a:	4b79      	ldr	r3, [pc, #484]	@ (8007e00 <HAL_RCC_OscConfig+0x4bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d118      	bne.n	8007c58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c26:	4b76      	ldr	r3, [pc, #472]	@ (8007e00 <HAL_RCC_OscConfig+0x4bc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a75      	ldr	r2, [pc, #468]	@ (8007e00 <HAL_RCC_OscConfig+0x4bc>)
 8007c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c32:	f7fb fc79 	bl	8003528 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c3a:	f7fb fc75 	bl	8003528 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e183      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007e00 <HAL_RCC_OscConfig+0x4bc>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d108      	bne.n	8007c72 <HAL_RCC_OscConfig+0x32e>
 8007c60:	4b66      	ldr	r3, [pc, #408]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c66:	4a65      	ldr	r2, [pc, #404]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c70:	e024      	b.n	8007cbc <HAL_RCC_OscConfig+0x378>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	d110      	bne.n	8007c9c <HAL_RCC_OscConfig+0x358>
 8007c7a:	4b60      	ldr	r3, [pc, #384]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	4a5e      	ldr	r2, [pc, #376]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c82:	f043 0304 	orr.w	r3, r3, #4
 8007c86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c90:	4a5a      	ldr	r2, [pc, #360]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c9a:	e00f      	b.n	8007cbc <HAL_RCC_OscConfig+0x378>
 8007c9c:	4b57      	ldr	r3, [pc, #348]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca2:	4a56      	ldr	r2, [pc, #344]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cac:	4b53      	ldr	r3, [pc, #332]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb2:	4a52      	ldr	r2, [pc, #328]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007cb4:	f023 0304 	bic.w	r3, r3, #4
 8007cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d016      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc4:	f7fb fc30 	bl	8003528 <HAL_GetTick>
 8007cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ccc:	f7fb fc2c 	bl	8003528 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e138      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ce2:	4b46      	ldr	r3, [pc, #280]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0ed      	beq.n	8007ccc <HAL_RCC_OscConfig+0x388>
 8007cf0:	e015      	b.n	8007d1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf2:	f7fb fc19 	bl	8003528 <HAL_GetTick>
 8007cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cf8:	e00a      	b.n	8007d10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfa:	f7fb fc15 	bl	8003528 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e121      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d10:	4b3a      	ldr	r3, [pc, #232]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1ed      	bne.n	8007cfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d105      	bne.n	8007d30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d24:	4b35      	ldr	r3, [pc, #212]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d28:	4a34      	ldr	r2, [pc, #208]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d03c      	beq.n	8007db6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01c      	beq.n	8007d7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d44:	4b2d      	ldr	r3, [pc, #180]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d54:	f7fb fbe8 	bl	8003528 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d5c:	f7fb fbe4 	bl	8003528 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e0f2      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d6e:	4b23      	ldr	r3, [pc, #140]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0ef      	beq.n	8007d5c <HAL_RCC_OscConfig+0x418>
 8007d7c:	e01b      	b.n	8007db6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d84:	4a1d      	ldr	r2, [pc, #116]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8e:	f7fb fbcb 	bl	8003528 <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d96:	f7fb fbc7 	bl	8003528 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e0d5      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007da8:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1ef      	bne.n	8007d96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80c9 	beq.w	8007f52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 030c 	and.w	r3, r3, #12
 8007dc8:	2b0c      	cmp	r3, #12
 8007dca:	f000 8083 	beq.w	8007ed4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d15e      	bne.n	8007e94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd6:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a08      	ldr	r2, [pc, #32]	@ (8007dfc <HAL_RCC_OscConfig+0x4b8>)
 8007ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de2:	f7fb fba1 	bl	8003528 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007de8:	e00c      	b.n	8007e04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dea:	f7fb fb9d 	bl	8003528 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d905      	bls.n	8007e04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e0ab      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e04:	4b55      	ldr	r3, [pc, #340]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1ec      	bne.n	8007dea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e10:	4b52      	ldr	r3, [pc, #328]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	4b52      	ldr	r3, [pc, #328]	@ (8007f60 <HAL_RCC_OscConfig+0x61c>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6a11      	ldr	r1, [r2, #32]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e20:	3a01      	subs	r2, #1
 8007e22:	0112      	lsls	r2, r2, #4
 8007e24:	4311      	orrs	r1, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007e2a:	0212      	lsls	r2, r2, #8
 8007e2c:	4311      	orrs	r1, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e32:	0852      	lsrs	r2, r2, #1
 8007e34:	3a01      	subs	r2, #1
 8007e36:	0552      	lsls	r2, r2, #21
 8007e38:	4311      	orrs	r1, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e3e:	0852      	lsrs	r2, r2, #1
 8007e40:	3a01      	subs	r2, #1
 8007e42:	0652      	lsls	r2, r2, #25
 8007e44:	4311      	orrs	r1, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e4a:	06d2      	lsls	r2, r2, #27
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	4943      	ldr	r1, [pc, #268]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e54:	4b41      	ldr	r3, [pc, #260]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a40      	ldr	r2, [pc, #256]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e60:	4b3e      	ldr	r3, [pc, #248]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a3d      	ldr	r2, [pc, #244]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fb fb5c 	bl	8003528 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e74:	f7fb fb58 	bl	8003528 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e066      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e86:	4b35      	ldr	r3, [pc, #212]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0x530>
 8007e92:	e05e      	b.n	8007f52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e94:	4b31      	ldr	r3, [pc, #196]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a30      	ldr	r2, [pc, #192]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea0:	f7fb fb42 	bl	8003528 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea8:	f7fb fb3e 	bl	8003528 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e04c      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eba:	4b28      	ldr	r3, [pc, #160]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f0      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ec6:	4b25      	ldr	r3, [pc, #148]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	4924      	ldr	r1, [pc, #144]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007ecc:	4b25      	ldr	r3, [pc, #148]	@ (8007f64 <HAL_RCC_OscConfig+0x620>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	60cb      	str	r3, [r1, #12]
 8007ed2:	e03e      	b.n	8007f52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e039      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <HAL_RCC_OscConfig+0x618>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f003 0203 	and.w	r2, r3, #3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d12c      	bne.n	8007f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	3b01      	subs	r3, #1
 8007f00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d123      	bne.n	8007f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d11b      	bne.n	8007f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d113      	bne.n	8007f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	3b01      	subs	r3, #1
 8007f34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d109      	bne.n	8007f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	3b01      	subs	r3, #1
 8007f48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d001      	beq.n	8007f52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	019f800c 	.word	0x019f800c
 8007f64:	feeefffc 	.word	0xfeeefffc

08007f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e11e      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f80:	4b91      	ldr	r3, [pc, #580]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d910      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b8e      	ldr	r3, [pc, #568]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 020f 	bic.w	r2, r3, #15
 8007f96:	498c      	ldr	r1, [pc, #560]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9e:	4b8a      	ldr	r3, [pc, #552]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d001      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e106      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d073      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d129      	bne.n	8008018 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fc4:	4b81      	ldr	r3, [pc, #516]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e0f4      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007fd4:	f000 f99e 	bl	8008314 <RCC_GetSysClockFreqFromPLLSource>
 8007fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80081d0 <HAL_RCC_ClockConfig+0x268>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d93f      	bls.n	8008062 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d033      	beq.n	8008062 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d12f      	bne.n	8008062 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008002:	4b72      	ldr	r3, [pc, #456]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800800a:	4a70      	ldr	r2, [pc, #448]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 800800c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008010:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008012:	2380      	movs	r3, #128	@ 0x80
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	e024      	b.n	8008062 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d107      	bne.n	8008030 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008020:	4b6a      	ldr	r3, [pc, #424]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0c6      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008030:	4b66      	ldr	r3, [pc, #408]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e0be      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008040:	f000 f8ce 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 8008044:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4a61      	ldr	r2, [pc, #388]	@ (80081d0 <HAL_RCC_ClockConfig+0x268>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d909      	bls.n	8008062 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800804e:	4b5f      	ldr	r3, [pc, #380]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008056:	4a5d      	ldr	r2, [pc, #372]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800805e:	2380      	movs	r3, #128	@ 0x80
 8008060:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008062:	4b5a      	ldr	r3, [pc, #360]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f023 0203 	bic.w	r2, r3, #3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	4957      	ldr	r1, [pc, #348]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008070:	4313      	orrs	r3, r2
 8008072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008074:	f7fb fa58 	bl	8003528 <HAL_GetTick>
 8008078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807a:	e00a      	b.n	8008092 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800807c:	f7fb fa54 	bl	8003528 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e095      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008092:	4b4e      	ldr	r3, [pc, #312]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 020c 	and.w	r2, r3, #12
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d1eb      	bne.n	800807c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d023      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080bc:	4b43      	ldr	r3, [pc, #268]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	4a42      	ldr	r2, [pc, #264]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080d4:	4b3d      	ldr	r3, [pc, #244]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080dc:	4a3b      	ldr	r2, [pc, #236]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080e4:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	4936      	ldr	r1, [pc, #216]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	e008      	b.n	800810a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b80      	cmp	r3, #128	@ 0x80
 80080fc:	d105      	bne.n	800810a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80080fe:	4b33      	ldr	r3, [pc, #204]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4a32      	ldr	r2, [pc, #200]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008104:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008108:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800810a:	4b2f      	ldr	r3, [pc, #188]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d21d      	bcs.n	8008154 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008118:	4b2b      	ldr	r3, [pc, #172]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f023 020f 	bic.w	r2, r3, #15
 8008120:	4929      	ldr	r1, [pc, #164]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	4313      	orrs	r3, r2
 8008126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008128:	f7fb f9fe 	bl	8003528 <HAL_GetTick>
 800812c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800812e:	e00a      	b.n	8008146 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008130:	f7fb f9fa 	bl	8003528 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e03b      	b.n	80081be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008146:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <HAL_RCC_ClockConfig+0x260>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d1ed      	bne.n	8008130 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008160:	4b1a      	ldr	r3, [pc, #104]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4917      	ldr	r1, [pc, #92]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 800816e:	4313      	orrs	r3, r2
 8008170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800817e:	4b13      	ldr	r3, [pc, #76]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	490f      	ldr	r1, [pc, #60]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 800818e:	4313      	orrs	r3, r2
 8008190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008192:	f000 f825 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 8008196:	4602      	mov	r2, r0
 8008198:	4b0c      	ldr	r3, [pc, #48]	@ (80081cc <HAL_RCC_ClockConfig+0x264>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	091b      	lsrs	r3, r3, #4
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	490c      	ldr	r1, [pc, #48]	@ (80081d4 <HAL_RCC_ClockConfig+0x26c>)
 80081a4:	5ccb      	ldrb	r3, [r1, r3]
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	fa22 f303 	lsr.w	r3, r2, r3
 80081ae:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <HAL_RCC_ClockConfig+0x270>)
 80081b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081b2:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <HAL_RCC_ClockConfig+0x274>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fb f96a 	bl	8003490 <HAL_InitTick>
 80081bc:	4603      	mov	r3, r0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40022000 	.word	0x40022000
 80081cc:	40021000 	.word	0x40021000
 80081d0:	04c4b400 	.word	0x04c4b400
 80081d4:	0800c528 	.word	0x0800c528
 80081d8:	2000003c 	.word	0x2000003c
 80081dc:	20000040 	.word	0x20000040

080081e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 030c 	and.w	r3, r3, #12
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d102      	bne.n	80081f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081f2:	4b2a      	ldr	r3, [pc, #168]	@ (800829c <HAL_RCC_GetSysClockFreq+0xbc>)
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	e047      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80081f8:	4b27      	ldr	r3, [pc, #156]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 030c 	and.w	r3, r3, #12
 8008200:	2b08      	cmp	r3, #8
 8008202:	d102      	bne.n	800820a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008204:	4b26      	ldr	r3, [pc, #152]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	e03e      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800820a:	4b23      	ldr	r3, [pc, #140]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 030c 	and.w	r3, r3, #12
 8008212:	2b0c      	cmp	r3, #12
 8008214:	d136      	bne.n	8008284 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008216:	4b20      	ldr	r3, [pc, #128]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008220:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	3301      	adds	r3, #1
 800822c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d10c      	bne.n	800824e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008234:	4a1a      	ldr	r2, [pc, #104]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	fbb2 f3f3 	udiv	r3, r2, r3
 800823c:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800823e:	68d2      	ldr	r2, [r2, #12]
 8008240:	0a12      	lsrs	r2, r2, #8
 8008242:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008246:	fb02 f303 	mul.w	r3, r2, r3
 800824a:	617b      	str	r3, [r7, #20]
      break;
 800824c:	e00c      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800824e:	4a13      	ldr	r2, [pc, #76]	@ (800829c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	4a10      	ldr	r2, [pc, #64]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008258:	68d2      	ldr	r2, [r2, #12]
 800825a:	0a12      	lsrs	r2, r2, #8
 800825c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	617b      	str	r3, [r7, #20]
      break;
 8008266:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008268:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	0e5b      	lsrs	r3, r3, #25
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	3301      	adds	r3, #1
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	e001      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008288:	693b      	ldr	r3, [r7, #16]
}
 800828a:	4618      	mov	r0, r3
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40021000 	.word	0x40021000
 800829c:	00f42400 	.word	0x00f42400
 80082a0:	016e3600 	.word	0x016e3600

080082a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082aa:	681b      	ldr	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	2000003c 	.word	0x2000003c

080082bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082c0:	f7ff fff0 	bl	80082a4 <HAL_RCC_GetHCLKFreq>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	4904      	ldr	r1, [pc, #16]	@ (80082e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082d2:	5ccb      	ldrb	r3, [r1, r3]
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082dc:	4618      	mov	r0, r3
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40021000 	.word	0x40021000
 80082e4:	0800c538 	.word	0x0800c538

080082e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082ec:	f7ff ffda 	bl	80082a4 <HAL_RCC_GetHCLKFreq>
 80082f0:	4602      	mov	r2, r0
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <HAL_RCC_GetPCLK2Freq+0x24>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	0adb      	lsrs	r3, r3, #11
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	4904      	ldr	r1, [pc, #16]	@ (8008310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80082fe:	5ccb      	ldrb	r3, [r1, r3]
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40021000 	.word	0x40021000
 8008310:	0800c538 	.word	0x0800c538

08008314 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800831a:	4b1e      	ldr	r3, [pc, #120]	@ (8008394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008324:	4b1b      	ldr	r3, [pc, #108]	@ (8008394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d10c      	bne.n	8008352 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008338:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	4a14      	ldr	r2, [pc, #80]	@ (8008394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008342:	68d2      	ldr	r2, [r2, #12]
 8008344:	0a12      	lsrs	r2, r2, #8
 8008346:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800834a:	fb02 f303 	mul.w	r3, r2, r3
 800834e:	617b      	str	r3, [r7, #20]
    break;
 8008350:	e00c      	b.n	800836c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008352:	4a12      	ldr	r2, [pc, #72]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	fbb2 f3f3 	udiv	r3, r2, r3
 800835a:	4a0e      	ldr	r2, [pc, #56]	@ (8008394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800835c:	68d2      	ldr	r2, [r2, #12]
 800835e:	0a12      	lsrs	r2, r2, #8
 8008360:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008364:	fb02 f303 	mul.w	r3, r2, r3
 8008368:	617b      	str	r3, [r7, #20]
    break;
 800836a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800836c:	4b09      	ldr	r3, [pc, #36]	@ (8008394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	0e5b      	lsrs	r3, r3, #25
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	3301      	adds	r3, #1
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	fbb2 f3f3 	udiv	r3, r2, r3
 8008384:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008386:	687b      	ldr	r3, [r7, #4]
}
 8008388:	4618      	mov	r0, r3
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40021000 	.word	0x40021000
 8008398:	016e3600 	.word	0x016e3600
 800839c:	00f42400 	.word	0x00f42400

080083a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083a8:	2300      	movs	r3, #0
 80083aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083ac:	2300      	movs	r3, #0
 80083ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8098 	beq.w	80084ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083be:	2300      	movs	r3, #0
 80083c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083c2:	4b43      	ldr	r3, [pc, #268]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10d      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ce:	4b40      	ldr	r3, [pc, #256]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d2:	4a3f      	ldr	r2, [pc, #252]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80083da:	4b3d      	ldr	r3, [pc, #244]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083e2:	60bb      	str	r3, [r7, #8]
 80083e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083e6:	2301      	movs	r3, #1
 80083e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083ea:	4b3a      	ldr	r3, [pc, #232]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a39      	ldr	r2, [pc, #228]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083f6:	f7fb f897 	bl	8003528 <HAL_GetTick>
 80083fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083fc:	e009      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fe:	f7fb f893 	bl	8003528 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d902      	bls.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	74fb      	strb	r3, [r7, #19]
        break;
 8008410:	e005      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008412:	4b30      	ldr	r3, [pc, #192]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0ef      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800841e:	7cfb      	ldrb	r3, [r7, #19]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d159      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008424:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800842a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800842e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01e      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d019      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008440:	4b23      	ldr	r3, [pc, #140]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800844a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800844c:	4b20      	ldr	r3, [pc, #128]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008452:	4a1f      	ldr	r2, [pc, #124]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800845c:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008462:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800846c:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d016      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fb f853 	bl	8003528 <HAL_GetTick>
 8008482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008484:	e00b      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008486:	f7fb f84f 	bl	8003528 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008494:	4293      	cmp	r3, r2
 8008496:	d902      	bls.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	74fb      	strb	r3, [r7, #19]
            break;
 800849c:	e006      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0ec      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084ac:	7cfb      	ldrb	r3, [r7, #19]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084b2:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c0:	4903      	ldr	r1, [pc, #12]	@ (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80084c8:	e008      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ca:	7cfb      	ldrb	r3, [r7, #19]
 80084cc:	74bb      	strb	r3, [r7, #18]
 80084ce:	e005      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80084d0:	40021000 	.word	0x40021000
 80084d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	7cfb      	ldrb	r3, [r7, #19]
 80084da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084dc:	7c7b      	ldrb	r3, [r7, #17]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d105      	bne.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e6:	4aa6      	ldr	r2, [pc, #664]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084fa:	4ba1      	ldr	r3, [pc, #644]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008500:	f023 0203 	bic.w	r2, r3, #3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	499d      	ldr	r1, [pc, #628]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800851c:	4b98      	ldr	r3, [pc, #608]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008522:	f023 020c 	bic.w	r2, r3, #12
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	4995      	ldr	r1, [pc, #596]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800853e:	4b90      	ldr	r3, [pc, #576]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008544:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	498c      	ldr	r1, [pc, #560]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008560:	4b87      	ldr	r3, [pc, #540]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008566:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	4984      	ldr	r1, [pc, #528]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008582:	4b7f      	ldr	r3, [pc, #508]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008588:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	497b      	ldr	r1, [pc, #492]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085a4:	4b76      	ldr	r3, [pc, #472]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	4973      	ldr	r1, [pc, #460]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	496a      	ldr	r1, [pc, #424]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085e8:	4b65      	ldr	r3, [pc, #404]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	4962      	ldr	r1, [pc, #392]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800860a:	4b5d      	ldr	r3, [pc, #372]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008610:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008618:	4959      	ldr	r1, [pc, #356]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800862c:	4b54      	ldr	r3, [pc, #336]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800862e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008632:	f023 0203 	bic.w	r2, r3, #3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863a:	4951      	ldr	r1, [pc, #324]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800864e:	4b4c      	ldr	r3, [pc, #304]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008654:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	4948      	ldr	r1, [pc, #288]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800866c:	2b00      	cmp	r3, #0
 800866e:	d015      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008670:	4b43      	ldr	r3, [pc, #268]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867e:	4940      	ldr	r1, [pc, #256]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800868e:	d105      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008690:	4b3b      	ldr	r3, [pc, #236]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4a3a      	ldr	r2, [pc, #232]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d015      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086a8:	4b35      	ldr	r3, [pc, #212]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b6:	4932      	ldr	r1, [pc, #200]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c6:	d105      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d015      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086e0:	4b27      	ldr	r3, [pc, #156]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ee:	4924      	ldr	r1, [pc, #144]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086fe:	d105      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008700:	4b1f      	ldr	r3, [pc, #124]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4a1e      	ldr	r2, [pc, #120]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800870a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d015      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008718:	4b19      	ldr	r3, [pc, #100]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008726:	4916      	ldr	r1, [pc, #88]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008728:	4313      	orrs	r3, r2
 800872a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008736:	d105      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008738:	4b11      	ldr	r3, [pc, #68]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	4a10      	ldr	r2, [pc, #64]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800873e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008742:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d019      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008756:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875e:	4908      	ldr	r1, [pc, #32]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008760:	4313      	orrs	r3, r2
 8008762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800876e:	d109      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008770:	4b03      	ldr	r3, [pc, #12]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	4a02      	ldr	r2, [pc, #8]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800877a:	60d3      	str	r3, [r2, #12]
 800877c:	e002      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800877e:	bf00      	nop
 8008780:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d015      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008790:	4b29      	ldr	r3, [pc, #164]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008796:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	4926      	ldr	r1, [pc, #152]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ae:	d105      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087b0:	4b21      	ldr	r3, [pc, #132]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4a20      	ldr	r2, [pc, #128]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d015      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80087c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087d6:	4918      	ldr	r1, [pc, #96]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e6:	d105      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087e8:	4b13      	ldr	r3, [pc, #76]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4a12      	ldr	r2, [pc, #72]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d015      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008800:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880e:	490a      	ldr	r1, [pc, #40]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008810:	4313      	orrs	r3, r2
 8008812:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800881e:	d105      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	4a04      	ldr	r2, [pc, #16]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800882a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800882c:	7cbb      	ldrb	r3, [r7, #18]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40021000 	.word	0x40021000

0800883c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e049      	b.n	80088e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fa fb98 	bl	8002f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3304      	adds	r3, #4
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f000 ff8e 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e049      	b.n	8008990 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f841 	bl	8008998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f000 ff37 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_TIM_PWM_Start+0x24>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	bf14      	ite	ne
 80089c8:	2301      	movne	r3, #1
 80089ca:	2300      	moveq	r3, #0
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	e03c      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d109      	bne.n	80089ea <HAL_TIM_PWM_Start+0x3e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	bf14      	ite	ne
 80089e2:	2301      	movne	r3, #1
 80089e4:	2300      	moveq	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	e02f      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d109      	bne.n	8008a04 <HAL_TIM_PWM_Start+0x58>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	bf14      	ite	ne
 80089fc:	2301      	movne	r3, #1
 80089fe:	2300      	moveq	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	e022      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	d109      	bne.n	8008a1e <HAL_TIM_PWM_Start+0x72>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	bf14      	ite	ne
 8008a16:	2301      	movne	r3, #1
 8008a18:	2300      	moveq	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	e015      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	d109      	bne.n	8008a38 <HAL_TIM_PWM_Start+0x8c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	e008      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e0a6      	b.n	8008ba0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Start+0xb6>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a60:	e023      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_PWM_Start+0xc6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a70:	e01b      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_PWM_Start+0xd6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a80:	e013      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_PWM_Start+0xe6>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a90:	e00b      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_PWM_Start+0xf6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aa0:	e003      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 fc16 	bl	800a2e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a3a      	ldr	r2, [pc, #232]	@ (8008ba8 <HAL_TIM_PWM_Start+0x1fc>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d018      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x148>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a39      	ldr	r2, [pc, #228]	@ (8008bac <HAL_TIM_PWM_Start+0x200>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d013      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x148>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a37      	ldr	r2, [pc, #220]	@ (8008bb0 <HAL_TIM_PWM_Start+0x204>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00e      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x148>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a36      	ldr	r2, [pc, #216]	@ (8008bb4 <HAL_TIM_PWM_Start+0x208>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d009      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x148>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a34      	ldr	r2, [pc, #208]	@ (8008bb8 <HAL_TIM_PWM_Start+0x20c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x148>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a33      	ldr	r2, [pc, #204]	@ (8008bbc <HAL_TIM_PWM_Start+0x210>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d101      	bne.n	8008af8 <HAL_TIM_PWM_Start+0x14c>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e000      	b.n	8008afa <HAL_TIM_PWM_Start+0x14e>
 8008af8:	2300      	movs	r3, #0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a25      	ldr	r2, [pc, #148]	@ (8008ba8 <HAL_TIM_PWM_Start+0x1fc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d022      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b20:	d01d      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <HAL_TIM_PWM_Start+0x214>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d018      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a24      	ldr	r2, [pc, #144]	@ (8008bc4 <HAL_TIM_PWM_Start+0x218>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a23      	ldr	r2, [pc, #140]	@ (8008bc8 <HAL_TIM_PWM_Start+0x21c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a19      	ldr	r2, [pc, #100]	@ (8008bac <HAL_TIM_PWM_Start+0x200>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	@ (8008bb0 <HAL_TIM_PWM_Start+0x204>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_TIM_PWM_Start+0x1b2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <HAL_TIM_PWM_Start+0x210>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d115      	bne.n	8008b8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	4b19      	ldr	r3, [pc, #100]	@ (8008bcc <HAL_TIM_PWM_Start+0x220>)
 8008b66:	4013      	ands	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d015      	beq.n	8008b9c <HAL_TIM_PWM_Start+0x1f0>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b76:	d011      	beq.n	8008b9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b88:	e008      	b.n	8008b9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0201 	orr.w	r2, r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	e000      	b.n	8008b9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40013400 	.word	0x40013400
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40014400 	.word	0x40014400
 8008bb8:	40014800 	.word	0x40014800
 8008bbc:	40015000 	.word	0x40015000
 8008bc0:	40000400 	.word	0x40000400
 8008bc4:	40000800 	.word	0x40000800
 8008bc8:	40000c00 	.word	0x40000c00
 8008bcc:	00010007 	.word	0x00010007

08008bd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e049      	b.n	8008c76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f841 	bl	8008c7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f000 fdc4 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <HAL_TIM_IC_Start_IT+0x1e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	e023      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x66>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d104      	bne.n	8008cc2 <HAL_TIM_IC_Start_IT+0x2e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	e01b      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x66>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d104      	bne.n	8008cd2 <HAL_TIM_IC_Start_IT+0x3e>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	e013      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x66>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b0c      	cmp	r3, #12
 8008cd6:	d104      	bne.n	8008ce2 <HAL_TIM_IC_Start_IT+0x4e>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	e00b      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x66>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d104      	bne.n	8008cf2 <HAL_TIM_IC_Start_IT+0x5e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	e003      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x66>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <HAL_TIM_IC_Start_IT+0x78>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	e013      	b.n	8008d34 <HAL_TIM_IC_Start_IT+0xa0>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d104      	bne.n	8008d1c <HAL_TIM_IC_Start_IT+0x88>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	e00b      	b.n	8008d34 <HAL_TIM_IC_Start_IT+0xa0>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d104      	bne.n	8008d2c <HAL_TIM_IC_Start_IT+0x98>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	e003      	b.n	8008d34 <HAL_TIM_IC_Start_IT+0xa0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d102      	bne.n	8008d42 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d3c:	7b7b      	ldrb	r3, [r7, #13]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d001      	beq.n	8008d46 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e0e2      	b.n	8008f0c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_IC_Start_IT+0xc2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d54:	e023      	b.n	8008d9e <HAL_TIM_IC_Start_IT+0x10a>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d104      	bne.n	8008d66 <HAL_TIM_IC_Start_IT+0xd2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d64:	e01b      	b.n	8008d9e <HAL_TIM_IC_Start_IT+0x10a>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_IC_Start_IT+0xe2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d74:	e013      	b.n	8008d9e <HAL_TIM_IC_Start_IT+0x10a>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b0c      	cmp	r3, #12
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_IC_Start_IT+0xf2>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d84:	e00b      	b.n	8008d9e <HAL_TIM_IC_Start_IT+0x10a>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d104      	bne.n	8008d96 <HAL_TIM_IC_Start_IT+0x102>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d94:	e003      	b.n	8008d9e <HAL_TIM_IC_Start_IT+0x10a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_IC_Start_IT+0x11a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dac:	e013      	b.n	8008dd6 <HAL_TIM_IC_Start_IT+0x142>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_IC_Start_IT+0x12a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dbc:	e00b      	b.n	8008dd6 <HAL_TIM_IC_Start_IT+0x142>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_IC_Start_IT+0x13a>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dcc:	e003      	b.n	8008dd6 <HAL_TIM_IC_Start_IT+0x142>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b0c      	cmp	r3, #12
 8008dda:	d841      	bhi.n	8008e60 <HAL_TIM_IC_Start_IT+0x1cc>
 8008ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <HAL_TIM_IC_Start_IT+0x150>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e19 	.word	0x08008e19
 8008de8:	08008e61 	.word	0x08008e61
 8008dec:	08008e61 	.word	0x08008e61
 8008df0:	08008e61 	.word	0x08008e61
 8008df4:	08008e2b 	.word	0x08008e2b
 8008df8:	08008e61 	.word	0x08008e61
 8008dfc:	08008e61 	.word	0x08008e61
 8008e00:	08008e61 	.word	0x08008e61
 8008e04:	08008e3d 	.word	0x08008e3d
 8008e08:	08008e61 	.word	0x08008e61
 8008e0c:	08008e61 	.word	0x08008e61
 8008e10:	08008e61 	.word	0x08008e61
 8008e14:	08008e4f 	.word	0x08008e4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0202 	orr.w	r2, r2, #2
 8008e26:	60da      	str	r2, [r3, #12]
      break;
 8008e28:	e01d      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0204 	orr.w	r2, r2, #4
 8008e38:	60da      	str	r2, [r3, #12]
      break;
 8008e3a:	e014      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0208 	orr.w	r2, r2, #8
 8008e4a:	60da      	str	r2, [r3, #12]
      break;
 8008e4c:	e00b      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0210 	orr.w	r2, r2, #16
 8008e5c:	60da      	str	r2, [r3, #12]
      break;
 8008e5e:	e002      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
      break;
 8008e64:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d14e      	bne.n	8008f0a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2201      	movs	r2, #1
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fa35 	bl	800a2e4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a25      	ldr	r2, [pc, #148]	@ (8008f14 <HAL_TIM_IC_Start_IT+0x280>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d022      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8c:	d01d      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a21      	ldr	r2, [pc, #132]	@ (8008f18 <HAL_TIM_IC_Start_IT+0x284>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d018      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f1c <HAL_TIM_IC_Start_IT+0x288>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <HAL_TIM_IC_Start_IT+0x28c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f24 <HAL_TIM_IC_Start_IT+0x290>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1b      	ldr	r2, [pc, #108]	@ (8008f28 <HAL_TIM_IC_Start_IT+0x294>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <HAL_TIM_IC_Start_IT+0x236>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a19      	ldr	r2, [pc, #100]	@ (8008f2c <HAL_TIM_IC_Start_IT+0x298>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d115      	bne.n	8008ef6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	4b17      	ldr	r3, [pc, #92]	@ (8008f30 <HAL_TIM_IC_Start_IT+0x29c>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d015      	beq.n	8008f08 <HAL_TIM_IC_Start_IT+0x274>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee2:	d011      	beq.n	8008f08 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef4:	e008      	b.n	8008f08 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e000      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40012c00 	.word	0x40012c00
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40013400 	.word	0x40013400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40015000 	.word	0x40015000
 8008f30:	00010007 	.word	0x00010007

08008f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d020      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f06f 0202 	mvn.w	r2, #2
 8008f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f8 fb10 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8008f84:	e005      	b.n	8008f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fbea 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fbf1 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d020      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01b      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0204 	mvn.w	r2, #4
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f8 faea 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fbc4 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fbcb 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d020      	beq.n	8009030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01b      	beq.n	8009030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0208 	mvn.w	r2, #8
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2204      	movs	r2, #4
 8009006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f8 fac4 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb9e 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fba5 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 0310 	and.w	r3, r3, #16
 8009036:	2b00      	cmp	r3, #0
 8009038:	d020      	beq.n	800907c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01b      	beq.n	800907c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0210 	mvn.w	r2, #16
 800904c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2208      	movs	r2, #8
 8009052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7f8 fa9e 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8009068:	e005      	b.n	8009076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb78 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fb7f 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0201 	mvn.w	r2, #1
 8009098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7f9 f80e 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00c      	beq.n	80090ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fa65 	bl	800a598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00c      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fa5d 	bl	800a5ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00c      	beq.n	8009116 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800910e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fb39 	bl	8009788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00c      	beq.n	800913a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f06f 0220 	mvn.w	r2, #32
 8009132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 fa25 	bl	800a584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00c      	beq.n	800915e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 fa31 	bl	800a5c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00c      	beq.n	8009182 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d007      	beq.n	8009182 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800917a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fa29 	bl	800a5d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00c      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d007      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800919e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fa21 	bl	800a5e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00c      	beq.n	80091ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80091c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fa19 	bl	800a5fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e088      	b.n	8009302 <HAL_TIM_IC_ConfigChannel+0x130>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d11b      	bne.n	8009236 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800920e:	f000 fea3 	bl	8009f58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 020c 	bic.w	r2, r2, #12
 8009220:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6999      	ldr	r1, [r3, #24]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	619a      	str	r2, [r3, #24]
 8009234:	e060      	b.n	80092f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b04      	cmp	r3, #4
 800923a:	d11c      	bne.n	8009276 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800924c:	f000 ff27 	bl	800a09e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800925e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6999      	ldr	r1, [r3, #24]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	021a      	lsls	r2, r3, #8
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	619a      	str	r2, [r3, #24]
 8009274:	e040      	b.n	80092f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b08      	cmp	r3, #8
 800927a:	d11b      	bne.n	80092b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800928c:	f000 ff74 	bl	800a178 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69da      	ldr	r2, [r3, #28]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 020c 	bic.w	r2, r2, #12
 800929e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69d9      	ldr	r1, [r3, #28]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	61da      	str	r2, [r3, #28]
 80092b2:	e021      	b.n	80092f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b0c      	cmp	r3, #12
 80092b8:	d11c      	bne.n	80092f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80092ca:	f000 ff91 	bl	800a1f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69da      	ldr	r2, [r3, #28]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80092dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69d9      	ldr	r1, [r3, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	021a      	lsls	r2, r3, #8
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	61da      	str	r2, [r3, #28]
 80092f2:	e001      	b.n	80092f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009326:	2302      	movs	r3, #2
 8009328:	e0ff      	b.n	800952a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b14      	cmp	r3, #20
 8009336:	f200 80f0 	bhi.w	800951a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800933a:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009395 	.word	0x08009395
 8009344:	0800951b 	.word	0x0800951b
 8009348:	0800951b 	.word	0x0800951b
 800934c:	0800951b 	.word	0x0800951b
 8009350:	080093d5 	.word	0x080093d5
 8009354:	0800951b 	.word	0x0800951b
 8009358:	0800951b 	.word	0x0800951b
 800935c:	0800951b 	.word	0x0800951b
 8009360:	08009417 	.word	0x08009417
 8009364:	0800951b 	.word	0x0800951b
 8009368:	0800951b 	.word	0x0800951b
 800936c:	0800951b 	.word	0x0800951b
 8009370:	08009457 	.word	0x08009457
 8009374:	0800951b 	.word	0x0800951b
 8009378:	0800951b 	.word	0x0800951b
 800937c:	0800951b 	.word	0x0800951b
 8009380:	08009499 	.word	0x08009499
 8009384:	0800951b 	.word	0x0800951b
 8009388:	0800951b 	.word	0x0800951b
 800938c:	0800951b 	.word	0x0800951b
 8009390:	080094d9 	.word	0x080094d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fab2 	bl	8009904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0208 	orr.w	r2, r2, #8
 80093ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0204 	bic.w	r2, r2, #4
 80093be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6999      	ldr	r1, [r3, #24]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	619a      	str	r2, [r3, #24]
      break;
 80093d2:	e0a5      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fb2c 	bl	8009a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	021a      	lsls	r2, r3, #8
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	619a      	str	r2, [r3, #24]
      break;
 8009414:	e084      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fb9f 	bl	8009b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0208 	orr.w	r2, r2, #8
 8009430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0204 	bic.w	r2, r2, #4
 8009440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69d9      	ldr	r1, [r3, #28]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	61da      	str	r2, [r3, #28]
      break;
 8009454:	e064      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fc11 	bl	8009c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69d9      	ldr	r1, [r3, #28]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	021a      	lsls	r2, r3, #8
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	61da      	str	r2, [r3, #28]
      break;
 8009496:	e043      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fc84 	bl	8009dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0208 	orr.w	r2, r2, #8
 80094b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0204 	bic.w	r2, r2, #4
 80094c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	691a      	ldr	r2, [r3, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80094d6:	e023      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fcce 	bl	8009e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009502:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	021a      	lsls	r2, r3, #8
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009518:	e002      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
      break;
 800951e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop

08009534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_TIM_ConfigClockSource+0x1c>
 800954c:	2302      	movs	r3, #2
 800954e:	e0f6      	b.n	800973e <HAL_TIM_ConfigClockSource+0x20a>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800956e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800957a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a6f      	ldr	r2, [pc, #444]	@ (8009748 <HAL_TIM_ConfigClockSource+0x214>)
 800958a:	4293      	cmp	r3, r2
 800958c:	f000 80c1 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 8009590:	4a6d      	ldr	r2, [pc, #436]	@ (8009748 <HAL_TIM_ConfigClockSource+0x214>)
 8009592:	4293      	cmp	r3, r2
 8009594:	f200 80c6 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009598:	4a6c      	ldr	r2, [pc, #432]	@ (800974c <HAL_TIM_ConfigClockSource+0x218>)
 800959a:	4293      	cmp	r3, r2
 800959c:	f000 80b9 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095a0:	4a6a      	ldr	r2, [pc, #424]	@ (800974c <HAL_TIM_ConfigClockSource+0x218>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	f200 80be 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095a8:	4a69      	ldr	r2, [pc, #420]	@ (8009750 <HAL_TIM_ConfigClockSource+0x21c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	f000 80b1 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095b0:	4a67      	ldr	r2, [pc, #412]	@ (8009750 <HAL_TIM_ConfigClockSource+0x21c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	f200 80b6 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095b8:	4a66      	ldr	r2, [pc, #408]	@ (8009754 <HAL_TIM_ConfigClockSource+0x220>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	f000 80a9 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095c0:	4a64      	ldr	r2, [pc, #400]	@ (8009754 <HAL_TIM_ConfigClockSource+0x220>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	f200 80ae 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095c8:	4a63      	ldr	r2, [pc, #396]	@ (8009758 <HAL_TIM_ConfigClockSource+0x224>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	f000 80a1 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095d0:	4a61      	ldr	r2, [pc, #388]	@ (8009758 <HAL_TIM_ConfigClockSource+0x224>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	f200 80a6 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095d8:	4a60      	ldr	r2, [pc, #384]	@ (800975c <HAL_TIM_ConfigClockSource+0x228>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	f000 8099 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095e0:	4a5e      	ldr	r2, [pc, #376]	@ (800975c <HAL_TIM_ConfigClockSource+0x228>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	f200 809e 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095ec:	f000 8091 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 80095f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095f4:	f200 8096 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 80095f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095fc:	f000 8089 	beq.w	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 8009600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009604:	f200 808e 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800960c:	d03e      	beq.n	800968c <HAL_TIM_ConfigClockSource+0x158>
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009612:	f200 8087 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800961a:	f000 8086 	beq.w	800972a <HAL_TIM_ConfigClockSource+0x1f6>
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009622:	d87f      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009624:	2b70      	cmp	r3, #112	@ 0x70
 8009626:	d01a      	beq.n	800965e <HAL_TIM_ConfigClockSource+0x12a>
 8009628:	2b70      	cmp	r3, #112	@ 0x70
 800962a:	d87b      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 800962c:	2b60      	cmp	r3, #96	@ 0x60
 800962e:	d050      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x19e>
 8009630:	2b60      	cmp	r3, #96	@ 0x60
 8009632:	d877      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009634:	2b50      	cmp	r3, #80	@ 0x50
 8009636:	d03c      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x17e>
 8009638:	2b50      	cmp	r3, #80	@ 0x50
 800963a:	d873      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 800963c:	2b40      	cmp	r3, #64	@ 0x40
 800963e:	d058      	beq.n	80096f2 <HAL_TIM_ConfigClockSource+0x1be>
 8009640:	2b40      	cmp	r3, #64	@ 0x40
 8009642:	d86f      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009644:	2b30      	cmp	r3, #48	@ 0x30
 8009646:	d064      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 8009648:	2b30      	cmp	r3, #48	@ 0x30
 800964a:	d86b      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d060      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 8009650:	2b20      	cmp	r3, #32
 8009652:	d867      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d05c      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 8009658:	2b10      	cmp	r3, #16
 800965a:	d05a      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x1de>
 800965c:	e062      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800966e:	f000 fe19 	bl	800a2a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	609a      	str	r2, [r3, #8]
      break;
 800968a:	e04f      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800969c:	f000 fe02 	bl	800a2a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096ae:	609a      	str	r2, [r3, #8]
      break;
 80096b0:	e03c      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096be:	461a      	mov	r2, r3
 80096c0:	f000 fcbe 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2150      	movs	r1, #80	@ 0x50
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fdcd 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 80096d0:	e02c      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096de:	461a      	mov	r2, r3
 80096e0:	f000 fd1a 	bl	800a118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2160      	movs	r1, #96	@ 0x60
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fdbd 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 80096f0:	e01c      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fe:	461a      	mov	r2, r3
 8009700:	f000 fc9e 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2140      	movs	r1, #64	@ 0x40
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fdad 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 8009710:	e00c      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f000 fda4 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 8009722:	e003      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	73fb      	strb	r3, [r7, #15]
      break;
 8009728:	e000      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800972a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	00100070 	.word	0x00100070
 800974c:	00100060 	.word	0x00100060
 8009750:	00100050 	.word	0x00100050
 8009754:	00100040 	.word	0x00100040
 8009758:	00100030 	.word	0x00100030
 800975c:	00100020 	.word	0x00100020

08009760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a4c      	ldr	r2, [pc, #304]	@ (80098e0 <TIM_Base_SetConfig+0x144>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d017      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ba:	d013      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a49      	ldr	r2, [pc, #292]	@ (80098e4 <TIM_Base_SetConfig+0x148>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00f      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a48      	ldr	r2, [pc, #288]	@ (80098e8 <TIM_Base_SetConfig+0x14c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00b      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a47      	ldr	r2, [pc, #284]	@ (80098ec <TIM_Base_SetConfig+0x150>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d007      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a46      	ldr	r2, [pc, #280]	@ (80098f0 <TIM_Base_SetConfig+0x154>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d003      	beq.n	80097e4 <TIM_Base_SetConfig+0x48>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a45      	ldr	r2, [pc, #276]	@ (80098f4 <TIM_Base_SetConfig+0x158>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d108      	bne.n	80097f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a39      	ldr	r2, [pc, #228]	@ (80098e0 <TIM_Base_SetConfig+0x144>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d023      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009804:	d01f      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a36      	ldr	r2, [pc, #216]	@ (80098e4 <TIM_Base_SetConfig+0x148>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d01b      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a35      	ldr	r2, [pc, #212]	@ (80098e8 <TIM_Base_SetConfig+0x14c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d017      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a34      	ldr	r2, [pc, #208]	@ (80098ec <TIM_Base_SetConfig+0x150>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d013      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a33      	ldr	r2, [pc, #204]	@ (80098f0 <TIM_Base_SetConfig+0x154>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d00f      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a33      	ldr	r2, [pc, #204]	@ (80098f8 <TIM_Base_SetConfig+0x15c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00b      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a32      	ldr	r2, [pc, #200]	@ (80098fc <TIM_Base_SetConfig+0x160>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d007      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a31      	ldr	r2, [pc, #196]	@ (8009900 <TIM_Base_SetConfig+0x164>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d003      	beq.n	8009846 <TIM_Base_SetConfig+0xaa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2c      	ldr	r2, [pc, #176]	@ (80098f4 <TIM_Base_SetConfig+0x158>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d108      	bne.n	8009858 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800984c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4313      	orrs	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	4313      	orrs	r3, r2
 8009864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a18      	ldr	r2, [pc, #96]	@ (80098e0 <TIM_Base_SetConfig+0x144>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d013      	beq.n	80098ac <TIM_Base_SetConfig+0x110>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a1a      	ldr	r2, [pc, #104]	@ (80098f0 <TIM_Base_SetConfig+0x154>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00f      	beq.n	80098ac <TIM_Base_SetConfig+0x110>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a1a      	ldr	r2, [pc, #104]	@ (80098f8 <TIM_Base_SetConfig+0x15c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00b      	beq.n	80098ac <TIM_Base_SetConfig+0x110>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a19      	ldr	r2, [pc, #100]	@ (80098fc <TIM_Base_SetConfig+0x160>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d007      	beq.n	80098ac <TIM_Base_SetConfig+0x110>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <TIM_Base_SetConfig+0x164>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d003      	beq.n	80098ac <TIM_Base_SetConfig+0x110>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a13      	ldr	r2, [pc, #76]	@ (80098f4 <TIM_Base_SetConfig+0x158>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d103      	bne.n	80098b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d105      	bne.n	80098d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	f023 0201 	bic.w	r2, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	611a      	str	r2, [r3, #16]
  }
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40012c00 	.word	0x40012c00
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40013400 	.word	0x40013400
 80098f4:	40015000 	.word	0x40015000
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400
 8009900:	40014800 	.word	0x40014800

08009904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	f023 0201 	bic.w	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f023 0302 	bic.w	r3, r3, #2
 8009950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	4313      	orrs	r3, r2
 800995a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a30      	ldr	r2, [pc, #192]	@ (8009a20 <TIM_OC1_SetConfig+0x11c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2f      	ldr	r2, [pc, #188]	@ (8009a24 <TIM_OC1_SetConfig+0x120>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a2e      	ldr	r2, [pc, #184]	@ (8009a28 <TIM_OC1_SetConfig+0x124>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2d      	ldr	r2, [pc, #180]	@ (8009a2c <TIM_OC1_SetConfig+0x128>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a2c      	ldr	r2, [pc, #176]	@ (8009a30 <TIM_OC1_SetConfig+0x12c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a2b      	ldr	r2, [pc, #172]	@ (8009a34 <TIM_OC1_SetConfig+0x130>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d10c      	bne.n	80099a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0308 	bic.w	r3, r3, #8
 8009992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 0304 	bic.w	r3, r3, #4
 80099a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a20 <TIM_OC1_SetConfig+0x11c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d013      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009a24 <TIM_OC1_SetConfig+0x120>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00f      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <TIM_OC1_SetConfig+0x124>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00b      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a1a      	ldr	r2, [pc, #104]	@ (8009a2c <TIM_OC1_SetConfig+0x128>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d007      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a19      	ldr	r2, [pc, #100]	@ (8009a30 <TIM_OC1_SetConfig+0x12c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a18      	ldr	r2, [pc, #96]	@ (8009a34 <TIM_OC1_SetConfig+0x130>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d111      	bne.n	80099fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	621a      	str	r2, [r3, #32]
}
 8009a14:	bf00      	nop
 8009a16:	371c      	adds	r7, #28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	40012c00 	.word	0x40012c00
 8009a24:	40013400 	.word	0x40013400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40014400 	.word	0x40014400
 8009a30:	40014800 	.word	0x40014800
 8009a34:	40015000 	.word	0x40015000

08009a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	f023 0210 	bic.w	r2, r3, #16
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f023 0320 	bic.w	r3, r3, #32
 8009a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a2c      	ldr	r2, [pc, #176]	@ (8009b48 <TIM_OC2_SetConfig+0x110>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d007      	beq.n	8009aac <TIM_OC2_SetConfig+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8009b4c <TIM_OC2_SetConfig+0x114>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC2_SetConfig+0x74>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b50 <TIM_OC2_SetConfig+0x118>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10d      	bne.n	8009ac8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a1f      	ldr	r2, [pc, #124]	@ (8009b48 <TIM_OC2_SetConfig+0x110>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d013      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b4c <TIM_OC2_SetConfig+0x114>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d00f      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a1e      	ldr	r2, [pc, #120]	@ (8009b54 <TIM_OC2_SetConfig+0x11c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00b      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8009b58 <TIM_OC2_SetConfig+0x120>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d007      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1c      	ldr	r2, [pc, #112]	@ (8009b5c <TIM_OC2_SetConfig+0x124>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a17      	ldr	r2, [pc, #92]	@ (8009b50 <TIM_OC2_SetConfig+0x118>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d113      	bne.n	8009b20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40013400 	.word	0x40013400
 8009b50:	40015000 	.word	0x40015000
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40014400 	.word	0x40014400
 8009b5c:	40014800 	.word	0x40014800

08009b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8009c6c <TIM_OC3_SetConfig+0x10c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d007      	beq.n	8009bd2 <TIM_OC3_SetConfig+0x72>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8009c70 <TIM_OC3_SetConfig+0x110>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d003      	beq.n	8009bd2 <TIM_OC3_SetConfig+0x72>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a29      	ldr	r2, [pc, #164]	@ (8009c74 <TIM_OC3_SetConfig+0x114>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d10d      	bne.n	8009bee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c6c <TIM_OC3_SetConfig+0x10c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d013      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c70 <TIM_OC3_SetConfig+0x110>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00f      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1d      	ldr	r2, [pc, #116]	@ (8009c78 <TIM_OC3_SetConfig+0x118>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a1c      	ldr	r2, [pc, #112]	@ (8009c7c <TIM_OC3_SetConfig+0x11c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a1b      	ldr	r2, [pc, #108]	@ (8009c80 <TIM_OC3_SetConfig+0x120>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a16      	ldr	r2, [pc, #88]	@ (8009c74 <TIM_OC3_SetConfig+0x114>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d113      	bne.n	8009c46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40013400 	.word	0x40013400
 8009c74:	40015000 	.word	0x40015000
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800

08009c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	031b      	lsls	r3, r3, #12
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d94 <TIM_OC4_SetConfig+0x110>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d007      	beq.n	8009cf8 <TIM_OC4_SetConfig+0x74>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2b      	ldr	r2, [pc, #172]	@ (8009d98 <TIM_OC4_SetConfig+0x114>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC4_SetConfig+0x74>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d9c <TIM_OC4_SetConfig+0x118>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10d      	bne.n	8009d14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	031b      	lsls	r3, r3, #12
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1f      	ldr	r2, [pc, #124]	@ (8009d94 <TIM_OC4_SetConfig+0x110>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d013      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009d98 <TIM_OC4_SetConfig+0x114>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00f      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1e      	ldr	r2, [pc, #120]	@ (8009da0 <TIM_OC4_SetConfig+0x11c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d00b      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009da4 <TIM_OC4_SetConfig+0x120>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d007      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a1c      	ldr	r2, [pc, #112]	@ (8009da8 <TIM_OC4_SetConfig+0x124>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a17      	ldr	r2, [pc, #92]	@ (8009d9c <TIM_OC4_SetConfig+0x118>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d113      	bne.n	8009d6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	019b      	lsls	r3, r3, #6
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40013400 	.word	0x40013400
 8009d9c:	40015000 	.word	0x40015000
 8009da0:	40014000 	.word	0x40014000
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800

08009dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a19      	ldr	r2, [pc, #100]	@ (8009e68 <TIM_OC5_SetConfig+0xbc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d013      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a18      	ldr	r2, [pc, #96]	@ (8009e6c <TIM_OC5_SetConfig+0xc0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00f      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a17      	ldr	r2, [pc, #92]	@ (8009e70 <TIM_OC5_SetConfig+0xc4>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00b      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a16      	ldr	r2, [pc, #88]	@ (8009e74 <TIM_OC5_SetConfig+0xc8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d007      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a15      	ldr	r2, [pc, #84]	@ (8009e78 <TIM_OC5_SetConfig+0xcc>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a14      	ldr	r2, [pc, #80]	@ (8009e7c <TIM_OC5_SetConfig+0xd0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d109      	bne.n	8009e42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	621a      	str	r2, [r3, #32]
}
 8009e5c:	bf00      	nop
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	40012c00 	.word	0x40012c00
 8009e6c:	40013400 	.word	0x40013400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800
 8009e7c:	40015000 	.word	0x40015000

08009e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	021b      	lsls	r3, r3, #8
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f40 <TIM_OC6_SetConfig+0xc0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <TIM_OC6_SetConfig+0xc4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00f      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	@ (8009f48 <TIM_OC6_SetConfig+0xc8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00b      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a17      	ldr	r2, [pc, #92]	@ (8009f4c <TIM_OC6_SetConfig+0xcc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d007      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a16      	ldr	r2, [pc, #88]	@ (8009f50 <TIM_OC6_SetConfig+0xd0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d003      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a15      	ldr	r2, [pc, #84]	@ (8009f54 <TIM_OC6_SetConfig+0xd4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d109      	bne.n	8009f18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	029b      	lsls	r3, r3, #10
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40013400 	.word	0x40013400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	40015000 	.word	0x40015000

08009f58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f023 0201 	bic.w	r2, r3, #1
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a28      	ldr	r2, [pc, #160]	@ (800a024 <TIM_TI1_SetConfig+0xcc>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d01b      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f8c:	d017      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4a25      	ldr	r2, [pc, #148]	@ (800a028 <TIM_TI1_SetConfig+0xd0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d013      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4a24      	ldr	r2, [pc, #144]	@ (800a02c <TIM_TI1_SetConfig+0xd4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00f      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4a23      	ldr	r2, [pc, #140]	@ (800a030 <TIM_TI1_SetConfig+0xd8>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00b      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a22      	ldr	r2, [pc, #136]	@ (800a034 <TIM_TI1_SetConfig+0xdc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d007      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4a21      	ldr	r2, [pc, #132]	@ (800a038 <TIM_TI1_SetConfig+0xe0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d003      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a20      	ldr	r2, [pc, #128]	@ (800a03c <TIM_TI1_SetConfig+0xe4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d101      	bne.n	8009fc2 <TIM_TI1_SetConfig+0x6a>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <TIM_TI1_SetConfig+0x6c>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	e003      	b.n	8009fe2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f023 030a 	bic.w	r3, r3, #10
 8009ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f003 030a 	and.w	r3, r3, #10
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40012c00 	.word	0x40012c00
 800a028:	40000400 	.word	0x40000400
 800a02c:	40000800 	.word	0x40000800
 800a030:	40000c00 	.word	0x40000c00
 800a034:	40013400 	.word	0x40013400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40015000 	.word	0x40015000

0800a040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 030a 	bic.w	r3, r3, #10
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f023 0210 	bic.w	r2, r3, #16
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	031b      	lsls	r3, r3, #12
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	621a      	str	r2, [r3, #32]
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0210 	bic.w	r2, r3, #16
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	031b      	lsls	r3, r3, #12
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a154:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	bf00      	nop
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a1c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	621a      	str	r2, [r3, #32]
}
 800a1e4:	bf00      	nop
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a21c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a22e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	031b      	lsls	r3, r3, #12
 800a234:	b29b      	uxth	r3, r3
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a242:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	031b      	lsls	r3, r3, #12
 800a248:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	4313      	orrs	r3, r2
 800a250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	f043 0307 	orr.w	r3, r3, #7
 800a290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	609a      	str	r2, [r3, #8]
}
 800a298:	bf00      	nop
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	021a      	lsls	r2, r3, #8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	609a      	str	r2, [r3, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 031f 	and.w	r3, r3, #31
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	43db      	mvns	r3, r3
 800a306:	401a      	ands	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a1a      	ldr	r2, [r3, #32]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	fa01 f303 	lsl.w	r3, r1, r3
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
	...

0800a330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a344:	2302      	movs	r3, #2
 800a346:	e074      	b.n	800a432 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a34      	ldr	r2, [pc, #208]	@ (800a440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d009      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a33      	ldr	r2, [pc, #204]	@ (800a444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d004      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a31      	ldr	r2, [pc, #196]	@ (800a448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d108      	bne.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a38c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a39e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a21      	ldr	r2, [pc, #132]	@ (800a440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d022      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c8:	d01d      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a44c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d018      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a450 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d013      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a454 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d00e      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d009      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a18      	ldr	r2, [pc, #96]	@ (800a458 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d004      	beq.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a11      	ldr	r2, [pc, #68]	@ (800a448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d10c      	bne.n	800a420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a40c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	4313      	orrs	r3, r2
 800a416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	40012c00 	.word	0x40012c00
 800a444:	40013400 	.word	0x40013400
 800a448:	40015000 	.word	0x40015000
 800a44c:	40000400 	.word	0x40000400
 800a450:	40000800 	.word	0x40000800
 800a454:	40000c00 	.word	0x40000c00
 800a458:	40014000 	.word	0x40014000

0800a45c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a470:	2b01      	cmp	r3, #1
 800a472:	d101      	bne.n	800a478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a474:	2302      	movs	r3, #2
 800a476:	e078      	b.n	800a56a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	041b      	lsls	r3, r3, #16
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a1c      	ldr	r2, [pc, #112]	@ (800a578 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d009      	beq.n	800a51e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a1b      	ldr	r2, [pc, #108]	@ (800a57c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d004      	beq.n	800a51e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a19      	ldr	r2, [pc, #100]	@ (800a580 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d11c      	bne.n	800a558 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a528:	051b      	lsls	r3, r3, #20
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	4313      	orrs	r3, r2
 800a556:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	40012c00 	.word	0x40012c00
 800a57c:	40013400 	.word	0x40013400
 800a580:	40015000 	.word	0x40015000

0800a584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e042      	b.n	800a6a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7f8 fe2d 	bl	8003294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2224      	movs	r2, #36	@ 0x24
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 ff14 	bl	800b488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc15 	bl	800ae90 <UART_SetConfig>
 800a666:	4603      	mov	r3, r0
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e01b      	b.n	800a6a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0201 	orr.w	r2, r2, #1
 800a69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 ff93 	bl	800b5cc <UART_CheckIdleState>
 800a6a6:	4603      	mov	r3, r0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	@ 0x28
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	d17b      	bne.n	800a7c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <HAL_UART_Transmit+0x26>
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e074      	b.n	800a7c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2221      	movs	r2, #33	@ 0x21
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6ea:	f7f8 ff1d 	bl	8003528 <HAL_GetTick>
 800a6ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	88fa      	ldrh	r2, [r7, #6]
 800a6f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	88fa      	ldrh	r2, [r7, #6]
 800a6fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a708:	d108      	bne.n	800a71c <HAL_UART_Transmit+0x6c>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d104      	bne.n	800a71c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e003      	b.n	800a724 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a724:	e030      	b.n	800a788 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2200      	movs	r2, #0
 800a72e:	2180      	movs	r1, #128	@ 0x80
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 fff5 	bl	800b720 <UART_WaitOnFlagUntilTimeout>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e03d      	b.n	800a7c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a75c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	3302      	adds	r3, #2
 800a762:	61bb      	str	r3, [r7, #24]
 800a764:	e007      	b.n	800a776 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	781a      	ldrb	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	3301      	adds	r3, #1
 800a774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	3b01      	subs	r3, #1
 800a780:	b29a      	uxth	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1c8      	bne.n	800a726 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2200      	movs	r2, #0
 800a79c:	2140      	movs	r1, #64	@ 0x40
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 ffbe 	bl	800b720 <UART_WaitOnFlagUntilTimeout>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d005      	beq.n	800a7b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e006      	b.n	800a7c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e000      	b.n	800a7c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a7c2:	2302      	movs	r3, #2
  }
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3720      	adds	r7, #32
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b0ba      	sub	sp, #232	@ 0xe8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a7f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a7f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d11b      	bne.n	800a840 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a80c:	f003 0320 	and.w	r3, r3, #32
 800a810:	2b00      	cmp	r3, #0
 800a812:	d015      	beq.n	800a840 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d105      	bne.n	800a82c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d009      	beq.n	800a840 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 8300 	beq.w	800ae36 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
      }
      return;
 800a83e:	e2fa      	b.n	800ae36 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 8123 	beq.w	800aa90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a84a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a84e:	4b8d      	ldr	r3, [pc, #564]	@ (800aa84 <HAL_UART_IRQHandler+0x2b8>)
 800a850:	4013      	ands	r3, r2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a85a:	4b8b      	ldr	r3, [pc, #556]	@ (800aa88 <HAL_UART_IRQHandler+0x2bc>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 8116 	beq.w	800aa90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d011      	beq.n	800a894 <HAL_UART_IRQHandler+0xc8>
 800a870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2201      	movs	r2, #1
 800a882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a88a:	f043 0201 	orr.w	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a898:	f003 0302 	and.w	r3, r3, #2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d011      	beq.n	800a8c4 <HAL_UART_IRQHandler+0xf8>
 800a8a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00b      	beq.n	800a8c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ba:	f043 0204 	orr.w	r2, r3, #4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d011      	beq.n	800a8f4 <HAL_UART_IRQHandler+0x128>
 800a8d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2204      	movs	r2, #4
 800a8e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ea:	f043 0202 	orr.w	r2, r3, #2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f8:	f003 0308 	and.w	r3, r3, #8
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d017      	beq.n	800a930 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d105      	bne.n	800a918 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a90c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a910:	4b5c      	ldr	r3, [pc, #368]	@ (800aa84 <HAL_UART_IRQHandler+0x2b8>)
 800a912:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2208      	movs	r2, #8
 800a91e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a926:	f043 0208 	orr.w	r2, r3, #8
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d012      	beq.n	800a962 <HAL_UART_IRQHandler+0x196>
 800a93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a958:	f043 0220 	orr.w	r2, r3, #32
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 8266 	beq.w	800ae3a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d013      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a97a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a97e:	f003 0320 	and.w	r3, r3, #32
 800a982:	2b00      	cmp	r3, #0
 800a984:	d105      	bne.n	800a992 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a98a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d007      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b6:	2b40      	cmp	r3, #64	@ 0x40
 800a9b8:	d005      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d054      	beq.n	800aa70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 ff17 	bl	800b7fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d6:	2b40      	cmp	r3, #64	@ 0x40
 800a9d8:	d146      	bne.n	800aa68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a9f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3308      	adds	r3, #8
 800aa02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aa06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aa0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aa12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aa1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1d9      	bne.n	800a9da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d017      	beq.n	800aa60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa36:	4a15      	ldr	r2, [pc, #84]	@ (800aa8c <HAL_UART_IRQHandler+0x2c0>)
 800aa38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fa fca3 	bl	800538c <HAL_DMA_Abort_IT>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d019      	beq.n	800aa80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5e:	e00f      	b.n	800aa80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f9ff 	bl	800ae64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa66:	e00b      	b.n	800aa80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f9fb 	bl	800ae64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6e:	e007      	b.n	800aa80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f9f7 	bl	800ae64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa7e:	e1dc      	b.n	800ae3a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa80:	bf00      	nop
    return;
 800aa82:	e1da      	b.n	800ae3a <HAL_UART_IRQHandler+0x66e>
 800aa84:	10000001 	.word	0x10000001
 800aa88:	04000120 	.word	0x04000120
 800aa8c:	0800b8c7 	.word	0x0800b8c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	f040 8170 	bne.w	800ad7a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa9e:	f003 0310 	and.w	r3, r3, #16
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 8169 	beq.w	800ad7a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaac:	f003 0310 	and.w	r3, r3, #16
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 8162 	beq.w	800ad7a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2210      	movs	r2, #16
 800aabc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac8:	2b40      	cmp	r3, #64	@ 0x40
 800aaca:	f040 80d8 	bne.w	800ac7e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aadc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80af 	beq.w	800ac44 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aaec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	f080 80a7 	bcs.w	800ac44 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aafc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f040 8087 	bne.w	800ac22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ab28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ab4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1da      	bne.n	800ab14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3308      	adds	r3, #8
 800ab64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab70:	f023 0301 	bic.w	r3, r3, #1
 800ab74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e1      	bne.n	800ab5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800abaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3308      	adds	r3, #8
 800abba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800abbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800abc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800abc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800abcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e3      	bne.n	800ab9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abf0:	f023 0310 	bic.w	r3, r3, #16
 800abf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e4      	bne.n	800abe0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fa fb5c 	bl	80052da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2202      	movs	r2, #2
 800ac26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f91b 	bl	800ae78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ac42:	e0fc      	b.n	800ae3e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	f040 80f5 	bne.w	800ae3e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	f040 80eb 	bne.w	800ae3e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f8fe 	bl	800ae78 <HAL_UARTEx_RxEventCallback>
      return;
 800ac7c:	e0df      	b.n	800ae3e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 80d1 	beq.w	800ae42 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800aca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 80cc 	beq.w	800ae42 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800accc:	647b      	str	r3, [r7, #68]	@ 0x44
 800acce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e4      	bne.n	800acaa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3308      	adds	r3, #8
 800ace6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	623b      	str	r3, [r7, #32]
   return(result);
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acf6:	f023 0301 	bic.w	r3, r3, #1
 800acfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ad08:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e1      	bne.n	800ace0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2220      	movs	r2, #32
 800ad20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f023 0310 	bic.w	r3, r3, #16
 800ad44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad52:	61fb      	str	r3, [r7, #28]
 800ad54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	69b9      	ldr	r1, [r7, #24]
 800ad58:	69fa      	ldr	r2, [r7, #28]
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e4      	bne.n	800ad30 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f880 	bl	800ae78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad78:	e063      	b.n	800ae42 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00e      	beq.n	800ada4 <HAL_UART_IRQHandler+0x5d8>
 800ad86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d008      	beq.n	800ada4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fdcf 	bl	800b940 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ada2:	e051      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ada4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adac:	2b00      	cmp	r3, #0
 800adae:	d014      	beq.n	800adda <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d105      	bne.n	800adc8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800adbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d008      	beq.n	800adda <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d03a      	beq.n	800ae46 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
    }
    return;
 800add8:	e035      	b.n	800ae46 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d009      	beq.n	800adfa <HAL_UART_IRQHandler+0x62e>
 800ade6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fd79 	bl	800b8ea <UART_EndTransmit_IT>
    return;
 800adf8:	e026      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <HAL_UART_IRQHandler+0x64e>
 800ae06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fda8 	bl	800b968 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae18:	e016      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d010      	beq.n	800ae48 <HAL_UART_IRQHandler+0x67c>
 800ae26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	da0c      	bge.n	800ae48 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fd90 	bl	800b954 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae34:	e008      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
      return;
 800ae36:	bf00      	nop
 800ae38:	e006      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
    return;
 800ae3a:	bf00      	nop
 800ae3c:	e004      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
      return;
 800ae3e:	bf00      	nop
 800ae40:	e002      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
      return;
 800ae42:	bf00      	nop
 800ae44:	e000      	b.n	800ae48 <HAL_UART_IRQHandler+0x67c>
    return;
 800ae46:	bf00      	nop
  }
}
 800ae48:	37e8      	adds	r7, #232	@ 0xe8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop

0800ae50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae94:	b08c      	sub	sp, #48	@ 0x30
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4baa      	ldr	r3, [pc, #680]	@ (800b168 <UART_SetConfig+0x2d8>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	6812      	ldr	r2, [r2, #0]
 800aec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aec8:	430b      	orrs	r3, r1
 800aeca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a9f      	ldr	r2, [pc, #636]	@ (800b16c <UART_SetConfig+0x2dc>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d004      	beq.n	800aefc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aef8:	4313      	orrs	r3, r2
 800aefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800af06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	6812      	ldr	r2, [r2, #0]
 800af0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af10:	430b      	orrs	r3, r1
 800af12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af1a:	f023 010f 	bic.w	r1, r3, #15
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a90      	ldr	r2, [pc, #576]	@ (800b170 <UART_SetConfig+0x2e0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d125      	bne.n	800af80 <UART_SetConfig+0xf0>
 800af34:	4b8f      	ldr	r3, [pc, #572]	@ (800b174 <UART_SetConfig+0x2e4>)
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d81a      	bhi.n	800af78 <UART_SetConfig+0xe8>
 800af42:	a201      	add	r2, pc, #4	@ (adr r2, 800af48 <UART_SetConfig+0xb8>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af59 	.word	0x0800af59
 800af4c:	0800af69 	.word	0x0800af69
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af71 	.word	0x0800af71
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af5e:	e116      	b.n	800b18e <UART_SetConfig+0x2fe>
 800af60:	2302      	movs	r3, #2
 800af62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af66:	e112      	b.n	800b18e <UART_SetConfig+0x2fe>
 800af68:	2304      	movs	r3, #4
 800af6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6e:	e10e      	b.n	800b18e <UART_SetConfig+0x2fe>
 800af70:	2308      	movs	r3, #8
 800af72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af76:	e10a      	b.n	800b18e <UART_SetConfig+0x2fe>
 800af78:	2310      	movs	r3, #16
 800af7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7e:	e106      	b.n	800b18e <UART_SetConfig+0x2fe>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a7c      	ldr	r2, [pc, #496]	@ (800b178 <UART_SetConfig+0x2e8>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d138      	bne.n	800affc <UART_SetConfig+0x16c>
 800af8a:	4b7a      	ldr	r3, [pc, #488]	@ (800b174 <UART_SetConfig+0x2e4>)
 800af8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af90:	f003 030c 	and.w	r3, r3, #12
 800af94:	2b0c      	cmp	r3, #12
 800af96:	d82d      	bhi.n	800aff4 <UART_SetConfig+0x164>
 800af98:	a201      	add	r2, pc, #4	@ (adr r2, 800afa0 <UART_SetConfig+0x110>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800afd5 	.word	0x0800afd5
 800afa4:	0800aff5 	.word	0x0800aff5
 800afa8:	0800aff5 	.word	0x0800aff5
 800afac:	0800aff5 	.word	0x0800aff5
 800afb0:	0800afe5 	.word	0x0800afe5
 800afb4:	0800aff5 	.word	0x0800aff5
 800afb8:	0800aff5 	.word	0x0800aff5
 800afbc:	0800aff5 	.word	0x0800aff5
 800afc0:	0800afdd 	.word	0x0800afdd
 800afc4:	0800aff5 	.word	0x0800aff5
 800afc8:	0800aff5 	.word	0x0800aff5
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afda:	e0d8      	b.n	800b18e <UART_SetConfig+0x2fe>
 800afdc:	2302      	movs	r3, #2
 800afde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe2:	e0d4      	b.n	800b18e <UART_SetConfig+0x2fe>
 800afe4:	2304      	movs	r3, #4
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afea:	e0d0      	b.n	800b18e <UART_SetConfig+0x2fe>
 800afec:	2308      	movs	r3, #8
 800afee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff2:	e0cc      	b.n	800b18e <UART_SetConfig+0x2fe>
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affa:	e0c8      	b.n	800b18e <UART_SetConfig+0x2fe>
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a5e      	ldr	r2, [pc, #376]	@ (800b17c <UART_SetConfig+0x2ec>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d125      	bne.n	800b052 <UART_SetConfig+0x1c2>
 800b006:	4b5b      	ldr	r3, [pc, #364]	@ (800b174 <UART_SetConfig+0x2e4>)
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b00c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b010:	2b30      	cmp	r3, #48	@ 0x30
 800b012:	d016      	beq.n	800b042 <UART_SetConfig+0x1b2>
 800b014:	2b30      	cmp	r3, #48	@ 0x30
 800b016:	d818      	bhi.n	800b04a <UART_SetConfig+0x1ba>
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d00a      	beq.n	800b032 <UART_SetConfig+0x1a2>
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	d814      	bhi.n	800b04a <UART_SetConfig+0x1ba>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <UART_SetConfig+0x19a>
 800b024:	2b10      	cmp	r3, #16
 800b026:	d008      	beq.n	800b03a <UART_SetConfig+0x1aa>
 800b028:	e00f      	b.n	800b04a <UART_SetConfig+0x1ba>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b030:	e0ad      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b032:	2302      	movs	r3, #2
 800b034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b038:	e0a9      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b03a:	2304      	movs	r3, #4
 800b03c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b040:	e0a5      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b042:	2308      	movs	r3, #8
 800b044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b048:	e0a1      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b04a:	2310      	movs	r3, #16
 800b04c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b050:	e09d      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a4a      	ldr	r2, [pc, #296]	@ (800b180 <UART_SetConfig+0x2f0>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d125      	bne.n	800b0a8 <UART_SetConfig+0x218>
 800b05c:	4b45      	ldr	r3, [pc, #276]	@ (800b174 <UART_SetConfig+0x2e4>)
 800b05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b062:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b066:	2bc0      	cmp	r3, #192	@ 0xc0
 800b068:	d016      	beq.n	800b098 <UART_SetConfig+0x208>
 800b06a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b06c:	d818      	bhi.n	800b0a0 <UART_SetConfig+0x210>
 800b06e:	2b80      	cmp	r3, #128	@ 0x80
 800b070:	d00a      	beq.n	800b088 <UART_SetConfig+0x1f8>
 800b072:	2b80      	cmp	r3, #128	@ 0x80
 800b074:	d814      	bhi.n	800b0a0 <UART_SetConfig+0x210>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <UART_SetConfig+0x1f0>
 800b07a:	2b40      	cmp	r3, #64	@ 0x40
 800b07c:	d008      	beq.n	800b090 <UART_SetConfig+0x200>
 800b07e:	e00f      	b.n	800b0a0 <UART_SetConfig+0x210>
 800b080:	2300      	movs	r3, #0
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b086:	e082      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b088:	2302      	movs	r3, #2
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08e:	e07e      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b090:	2304      	movs	r3, #4
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b096:	e07a      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b098:	2308      	movs	r3, #8
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09e:	e076      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a6:	e072      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a35      	ldr	r2, [pc, #212]	@ (800b184 <UART_SetConfig+0x2f4>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d12a      	bne.n	800b108 <UART_SetConfig+0x278>
 800b0b2:	4b30      	ldr	r3, [pc, #192]	@ (800b174 <UART_SetConfig+0x2e4>)
 800b0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0c0:	d01a      	beq.n	800b0f8 <UART_SetConfig+0x268>
 800b0c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0c6:	d81b      	bhi.n	800b100 <UART_SetConfig+0x270>
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0cc:	d00c      	beq.n	800b0e8 <UART_SetConfig+0x258>
 800b0ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0d2:	d815      	bhi.n	800b100 <UART_SetConfig+0x270>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <UART_SetConfig+0x250>
 800b0d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0dc:	d008      	beq.n	800b0f0 <UART_SetConfig+0x260>
 800b0de:	e00f      	b.n	800b100 <UART_SetConfig+0x270>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e6:	e052      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ee:	e04e      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f6:	e04a      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fe:	e046      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b100:	2310      	movs	r3, #16
 800b102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b106:	e042      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a17      	ldr	r2, [pc, #92]	@ (800b16c <UART_SetConfig+0x2dc>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d13a      	bne.n	800b188 <UART_SetConfig+0x2f8>
 800b112:	4b18      	ldr	r3, [pc, #96]	@ (800b174 <UART_SetConfig+0x2e4>)
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b118:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b11c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b120:	d01a      	beq.n	800b158 <UART_SetConfig+0x2c8>
 800b122:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b126:	d81b      	bhi.n	800b160 <UART_SetConfig+0x2d0>
 800b128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b12c:	d00c      	beq.n	800b148 <UART_SetConfig+0x2b8>
 800b12e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b132:	d815      	bhi.n	800b160 <UART_SetConfig+0x2d0>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <UART_SetConfig+0x2b0>
 800b138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b13c:	d008      	beq.n	800b150 <UART_SetConfig+0x2c0>
 800b13e:	e00f      	b.n	800b160 <UART_SetConfig+0x2d0>
 800b140:	2300      	movs	r3, #0
 800b142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b146:	e022      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b148:	2302      	movs	r3, #2
 800b14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14e:	e01e      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b150:	2304      	movs	r3, #4
 800b152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b156:	e01a      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b158:	2308      	movs	r3, #8
 800b15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b15e:	e016      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b160:	2310      	movs	r3, #16
 800b162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b166:	e012      	b.n	800b18e <UART_SetConfig+0x2fe>
 800b168:	cfff69f3 	.word	0xcfff69f3
 800b16c:	40008000 	.word	0x40008000
 800b170:	40013800 	.word	0x40013800
 800b174:	40021000 	.word	0x40021000
 800b178:	40004400 	.word	0x40004400
 800b17c:	40004800 	.word	0x40004800
 800b180:	40004c00 	.word	0x40004c00
 800b184:	40005000 	.word	0x40005000
 800b188:	2310      	movs	r3, #16
 800b18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4aae      	ldr	r2, [pc, #696]	@ (800b44c <UART_SetConfig+0x5bc>)
 800b194:	4293      	cmp	r3, r2
 800b196:	f040 8097 	bne.w	800b2c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b19a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	2b08      	cmp	r3, #8
 800b1a0:	d823      	bhi.n	800b1ea <UART_SetConfig+0x35a>
 800b1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a8 <UART_SetConfig+0x318>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1cd 	.word	0x0800b1cd
 800b1ac:	0800b1eb 	.word	0x0800b1eb
 800b1b0:	0800b1d5 	.word	0x0800b1d5
 800b1b4:	0800b1eb 	.word	0x0800b1eb
 800b1b8:	0800b1db 	.word	0x0800b1db
 800b1bc:	0800b1eb 	.word	0x0800b1eb
 800b1c0:	0800b1eb 	.word	0x0800b1eb
 800b1c4:	0800b1eb 	.word	0x0800b1eb
 800b1c8:	0800b1e3 	.word	0x0800b1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1cc:	f7fd f876 	bl	80082bc <HAL_RCC_GetPCLK1Freq>
 800b1d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1d2:	e010      	b.n	800b1f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1d4:	4b9e      	ldr	r3, [pc, #632]	@ (800b450 <UART_SetConfig+0x5c0>)
 800b1d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1d8:	e00d      	b.n	800b1f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1da:	f7fd f801 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800b1de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1e0:	e009      	b.n	800b1f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1e8:	e005      	b.n	800b1f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 8130 	beq.w	800b45e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b202:	4a94      	ldr	r2, [pc, #592]	@ (800b454 <UART_SetConfig+0x5c4>)
 800b204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b208:	461a      	mov	r2, r3
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b210:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	4613      	mov	r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	4413      	add	r3, r2
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d305      	bcc.n	800b22e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d903      	bls.n	800b236 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b234:	e113      	b.n	800b45e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	2200      	movs	r2, #0
 800b23a:	60bb      	str	r3, [r7, #8]
 800b23c:	60fa      	str	r2, [r7, #12]
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b242:	4a84      	ldr	r2, [pc, #528]	@ (800b454 <UART_SetConfig+0x5c4>)
 800b244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	2200      	movs	r2, #0
 800b24c:	603b      	str	r3, [r7, #0]
 800b24e:	607a      	str	r2, [r7, #4]
 800b250:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b258:	f7f5 fa46 	bl	80006e8 <__aeabi_uldivmod>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4610      	mov	r0, r2
 800b262:	4619      	mov	r1, r3
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	f04f 0300 	mov.w	r3, #0
 800b26c:	020b      	lsls	r3, r1, #8
 800b26e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b272:	0202      	lsls	r2, r0, #8
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	6849      	ldr	r1, [r1, #4]
 800b278:	0849      	lsrs	r1, r1, #1
 800b27a:	2000      	movs	r0, #0
 800b27c:	460c      	mov	r4, r1
 800b27e:	4605      	mov	r5, r0
 800b280:	eb12 0804 	adds.w	r8, r2, r4
 800b284:	eb43 0905 	adc.w	r9, r3, r5
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	469a      	mov	sl, r3
 800b290:	4693      	mov	fp, r2
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f5 fa25 	bl	80006e8 <__aeabi_uldivmod>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ac:	d308      	bcc.n	800b2c0 <UART_SetConfig+0x430>
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b4:	d204      	bcs.n	800b2c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6a3a      	ldr	r2, [r7, #32]
 800b2bc:	60da      	str	r2, [r3, #12]
 800b2be:	e0ce      	b.n	800b45e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2c6:	e0ca      	b.n	800b45e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2d0:	d166      	bne.n	800b3a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b2d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	d827      	bhi.n	800b32a <UART_SetConfig+0x49a>
 800b2da:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e0 <UART_SetConfig+0x450>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b305 	.word	0x0800b305
 800b2e4:	0800b30d 	.word	0x0800b30d
 800b2e8:	0800b315 	.word	0x0800b315
 800b2ec:	0800b32b 	.word	0x0800b32b
 800b2f0:	0800b31b 	.word	0x0800b31b
 800b2f4:	0800b32b 	.word	0x0800b32b
 800b2f8:	0800b32b 	.word	0x0800b32b
 800b2fc:	0800b32b 	.word	0x0800b32b
 800b300:	0800b323 	.word	0x0800b323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b304:	f7fc ffda 	bl	80082bc <HAL_RCC_GetPCLK1Freq>
 800b308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b30a:	e014      	b.n	800b336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b30c:	f7fc ffec 	bl	80082e8 <HAL_RCC_GetPCLK2Freq>
 800b310:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b312:	e010      	b.n	800b336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b314:	4b4e      	ldr	r3, [pc, #312]	@ (800b450 <UART_SetConfig+0x5c0>)
 800b316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b318:	e00d      	b.n	800b336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b31a:	f7fc ff61 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800b31e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b320:	e009      	b.n	800b336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b328:	e005      	b.n	800b336 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 8090 	beq.w	800b45e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b342:	4a44      	ldr	r2, [pc, #272]	@ (800b454 <UART_SetConfig+0x5c4>)
 800b344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b348:	461a      	mov	r2, r3
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b350:	005a      	lsls	r2, r3, #1
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	085b      	lsrs	r3, r3, #1
 800b358:	441a      	add	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b362:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	2b0f      	cmp	r3, #15
 800b368:	d916      	bls.n	800b398 <UART_SetConfig+0x508>
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b370:	d212      	bcs.n	800b398 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	b29b      	uxth	r3, r3
 800b376:	f023 030f 	bic.w	r3, r3, #15
 800b37a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	b29b      	uxth	r3, r3
 800b382:	f003 0307 	and.w	r3, r3, #7
 800b386:	b29a      	uxth	r2, r3
 800b388:	8bfb      	ldrh	r3, [r7, #30]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	8bfa      	ldrh	r2, [r7, #30]
 800b394:	60da      	str	r2, [r3, #12]
 800b396:	e062      	b.n	800b45e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b39e:	e05e      	b.n	800b45e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d828      	bhi.n	800b3fa <UART_SetConfig+0x56a>
 800b3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b0 <UART_SetConfig+0x520>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b3d5 	.word	0x0800b3d5
 800b3b4:	0800b3dd 	.word	0x0800b3dd
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	0800b3fb 	.word	0x0800b3fb
 800b3c0:	0800b3eb 	.word	0x0800b3eb
 800b3c4:	0800b3fb 	.word	0x0800b3fb
 800b3c8:	0800b3fb 	.word	0x0800b3fb
 800b3cc:	0800b3fb 	.word	0x0800b3fb
 800b3d0:	0800b3f3 	.word	0x0800b3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d4:	f7fc ff72 	bl	80082bc <HAL_RCC_GetPCLK1Freq>
 800b3d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3da:	e014      	b.n	800b406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3dc:	f7fc ff84 	bl	80082e8 <HAL_RCC_GetPCLK2Freq>
 800b3e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3e2:	e010      	b.n	800b406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b450 <UART_SetConfig+0x5c0>)
 800b3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3e8:	e00d      	b.n	800b406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ea:	f7fc fef9 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800b3ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3f0:	e009      	b.n	800b406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3f8:	e005      	b.n	800b406 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b404:	bf00      	nop
    }

    if (pclk != 0U)
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d028      	beq.n	800b45e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b410:	4a10      	ldr	r2, [pc, #64]	@ (800b454 <UART_SetConfig+0x5c4>)
 800b412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b416:	461a      	mov	r2, r3
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	085b      	lsrs	r3, r3, #1
 800b424:	441a      	add	r2, r3
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d910      	bls.n	800b458 <UART_SetConfig+0x5c8>
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b43c:	d20c      	bcs.n	800b458 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	b29a      	uxth	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60da      	str	r2, [r3, #12]
 800b448:	e009      	b.n	800b45e <UART_SetConfig+0x5ce>
 800b44a:	bf00      	nop
 800b44c:	40008000 	.word	0x40008000
 800b450:	00f42400 	.word	0x00f42400
 800b454:	0800c540 	.word	0x0800c540
      }
      else
      {
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	2201      	movs	r2, #1
 800b462:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2201      	movs	r2, #1
 800b46a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2200      	movs	r2, #0
 800b472:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2200      	movs	r2, #0
 800b478:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b47a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3730      	adds	r7, #48	@ 0x30
 800b482:	46bd      	mov	sp, r7
 800b484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b494:	f003 0308 	and.w	r3, r3, #8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	f003 0304 	and.w	r3, r3, #4
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	f003 0310 	and.w	r3, r3, #16
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01a      	beq.n	800b59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b586:	d10a      	bne.n	800b59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	605a      	str	r2, [r3, #4]
  }
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b098      	sub	sp, #96	@ 0x60
 800b5d0:	af02      	add	r7, sp, #8
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5dc:	f7f7 ffa4 	bl	8003528 <HAL_GetTick>
 800b5e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0308 	and.w	r3, r3, #8
 800b5ec:	2b08      	cmp	r3, #8
 800b5ee:	d12f      	bne.n	800b650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f88e 	bl	800b720 <UART_WaitOnFlagUntilTimeout>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d022      	beq.n	800b650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b628:	647b      	str	r3, [r7, #68]	@ 0x44
 800b62a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b62e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e6      	bne.n	800b60a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2220      	movs	r2, #32
 800b640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e063      	b.n	800b718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0304 	and.w	r3, r3, #4
 800b65a:	2b04      	cmp	r3, #4
 800b65c:	d149      	bne.n	800b6f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b65e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b666:	2200      	movs	r2, #0
 800b668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f857 	bl	800b720 <UART_WaitOnFlagUntilTimeout>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d03c      	beq.n	800b6f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	623b      	str	r3, [r7, #32]
   return(result);
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b696:	633b      	str	r3, [r7, #48]	@ 0x30
 800b698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b69c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e6      	bne.n	800b678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	e853 3f00 	ldrex	r3, [r3]
 800b6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f023 0301 	bic.w	r3, r3, #1
 800b6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6ca:	61fa      	str	r2, [r7, #28]
 800b6cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	69b9      	ldr	r1, [r7, #24]
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e5      	bne.n	800b6aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e012      	b.n	800b718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2220      	movs	r2, #32
 800b6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3758      	adds	r7, #88	@ 0x58
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	4613      	mov	r3, r2
 800b72e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b730:	e04f      	b.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b738:	d04b      	beq.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b73a:	f7f7 fef5 	bl	8003528 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	429a      	cmp	r2, r3
 800b748:	d302      	bcc.n	800b750 <UART_WaitOnFlagUntilTimeout+0x30>
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e04e      	b.n	800b7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 0304 	and.w	r3, r3, #4
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d037      	beq.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b80      	cmp	r3, #128	@ 0x80
 800b766:	d034      	beq.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b40      	cmp	r3, #64	@ 0x40
 800b76c:	d031      	beq.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d110      	bne.n	800b79e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2208      	movs	r2, #8
 800b782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 f838 	bl	800b7fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2208      	movs	r2, #8
 800b78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e029      	b.n	800b7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7ac:	d111      	bne.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 f81e 	bl	800b7fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e00f      	b.n	800b7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	69da      	ldr	r2, [r3, #28]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	bf0c      	ite	eq
 800b7e2:	2301      	moveq	r3, #1
 800b7e4:	2300      	movne	r3, #0
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d0a0      	beq.n	800b732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b095      	sub	sp, #84	@ 0x54
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80a:	e853 3f00 	ldrex	r3, [r3]
 800b80e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	461a      	mov	r2, r3
 800b81e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b820:	643b      	str	r3, [r7, #64]	@ 0x40
 800b822:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e6      	bne.n	800b802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3308      	adds	r3, #8
 800b83a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	61fb      	str	r3, [r7, #28]
   return(result);
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3308      	adds	r3, #8
 800b856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b85a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b85e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b860:	e841 2300 	strex	r3, r2, [r1]
 800b864:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1e3      	bne.n	800b834 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b870:	2b01      	cmp	r3, #1
 800b872:	d118      	bne.n	800b8a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	60bb      	str	r3, [r7, #8]
   return(result);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f023 0310 	bic.w	r3, r3, #16
 800b888:	647b      	str	r3, [r7, #68]	@ 0x44
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b892:	61bb      	str	r3, [r7, #24]
 800b894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6979      	ldr	r1, [r7, #20]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e6      	bne.n	800b874 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8ba:	bf00      	nop
 800b8bc:	3754      	adds	r7, #84	@ 0x54
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fac1 	bl	800ae64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b088      	sub	sp, #32
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b906:	61fb      	str	r3, [r7, #28]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	461a      	mov	r2, r3
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	61bb      	str	r3, [r7, #24]
 800b912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b914:	6979      	ldr	r1, [r7, #20]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	e841 2300 	strex	r3, r2, [r1]
 800b91c:	613b      	str	r3, [r7, #16]
   return(result);
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e6      	bne.n	800b8f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2220      	movs	r2, #32
 800b928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff fa8c 	bl	800ae50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b938:	bf00      	nop
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <HAL_UARTEx_DisableFifoMode+0x16>
 800b98e:	2302      	movs	r3, #2
 800b990:	e027      	b.n	800b9e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2224      	movs	r2, #36	@ 0x24
 800b99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 0201 	bic.w	r2, r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2220      	movs	r2, #32
 800b9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d101      	bne.n	800ba06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba02:	2302      	movs	r3, #2
 800ba04:	e02d      	b.n	800ba62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2224      	movs	r2, #36	@ 0x24
 800ba12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f850 	bl	800bae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e02d      	b.n	800bade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2224      	movs	r2, #36	@ 0x24
 800ba8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f022 0201 	bic.w	r2, r2, #1
 800baa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f812 	bl	800bae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d108      	bne.n	800bb0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb08:	e031      	b.n	800bb6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb0a:	2308      	movs	r3, #8
 800bb0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb0e:	2308      	movs	r3, #8
 800bb10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	0e5b      	lsrs	r3, r3, #25
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	0f5b      	lsrs	r3, r3, #29
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	7b3a      	ldrb	r2, [r7, #12]
 800bb36:	4911      	ldr	r1, [pc, #68]	@ (800bb7c <UARTEx_SetNbDataToProcess+0x94>)
 800bb38:	5c8a      	ldrb	r2, [r1, r2]
 800bb3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb3e:	7b3a      	ldrb	r2, [r7, #12]
 800bb40:	490f      	ldr	r1, [pc, #60]	@ (800bb80 <UARTEx_SetNbDataToProcess+0x98>)
 800bb42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb44:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	7b7a      	ldrb	r2, [r7, #13]
 800bb54:	4909      	ldr	r1, [pc, #36]	@ (800bb7c <UARTEx_SetNbDataToProcess+0x94>)
 800bb56:	5c8a      	ldrb	r2, [r1, r2]
 800bb58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb5c:	7b7a      	ldrb	r2, [r7, #13]
 800bb5e:	4908      	ldr	r1, [pc, #32]	@ (800bb80 <UARTEx_SetNbDataToProcess+0x98>)
 800bb60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb62:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	0800c558 	.word	0x0800c558
 800bb80:	0800c560 	.word	0x0800c560

0800bb84 <siprintf>:
 800bb84:	b40e      	push	{r1, r2, r3}
 800bb86:	b500      	push	{lr}
 800bb88:	b09c      	sub	sp, #112	@ 0x70
 800bb8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb8c:	9002      	str	r0, [sp, #8]
 800bb8e:	9006      	str	r0, [sp, #24]
 800bb90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb94:	4809      	ldr	r0, [pc, #36]	@ (800bbbc <siprintf+0x38>)
 800bb96:	9107      	str	r1, [sp, #28]
 800bb98:	9104      	str	r1, [sp, #16]
 800bb9a:	4909      	ldr	r1, [pc, #36]	@ (800bbc0 <siprintf+0x3c>)
 800bb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bba0:	9105      	str	r1, [sp, #20]
 800bba2:	6800      	ldr	r0, [r0, #0]
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	a902      	add	r1, sp, #8
 800bba8:	f000 f994 	bl	800bed4 <_svfiprintf_r>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	b01c      	add	sp, #112	@ 0x70
 800bbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbb8:	b003      	add	sp, #12
 800bbba:	4770      	bx	lr
 800bbbc:	20000048 	.word	0x20000048
 800bbc0:	ffff0208 	.word	0xffff0208

0800bbc4 <memset>:
 800bbc4:	4402      	add	r2, r0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d100      	bne.n	800bbce <memset+0xa>
 800bbcc:	4770      	bx	lr
 800bbce:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd2:	e7f9      	b.n	800bbc8 <memset+0x4>

0800bbd4 <__errno>:
 800bbd4:	4b01      	ldr	r3, [pc, #4]	@ (800bbdc <__errno+0x8>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20000048 	.word	0x20000048

0800bbe0 <__libc_init_array>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4d0d      	ldr	r5, [pc, #52]	@ (800bc18 <__libc_init_array+0x38>)
 800bbe4:	4c0d      	ldr	r4, [pc, #52]	@ (800bc1c <__libc_init_array+0x3c>)
 800bbe6:	1b64      	subs	r4, r4, r5
 800bbe8:	10a4      	asrs	r4, r4, #2
 800bbea:	2600      	movs	r6, #0
 800bbec:	42a6      	cmp	r6, r4
 800bbee:	d109      	bne.n	800bc04 <__libc_init_array+0x24>
 800bbf0:	4d0b      	ldr	r5, [pc, #44]	@ (800bc20 <__libc_init_array+0x40>)
 800bbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800bc24 <__libc_init_array+0x44>)
 800bbf4:	f000 fc66 	bl	800c4c4 <_init>
 800bbf8:	1b64      	subs	r4, r4, r5
 800bbfa:	10a4      	asrs	r4, r4, #2
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	42a6      	cmp	r6, r4
 800bc00:	d105      	bne.n	800bc0e <__libc_init_array+0x2e>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc08:	4798      	blx	r3
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7ee      	b.n	800bbec <__libc_init_array+0xc>
 800bc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc12:	4798      	blx	r3
 800bc14:	3601      	adds	r6, #1
 800bc16:	e7f2      	b.n	800bbfe <__libc_init_array+0x1e>
 800bc18:	0800c5a4 	.word	0x0800c5a4
 800bc1c:	0800c5a4 	.word	0x0800c5a4
 800bc20:	0800c5a4 	.word	0x0800c5a4
 800bc24:	0800c5a8 	.word	0x0800c5a8

0800bc28 <__retarget_lock_acquire_recursive>:
 800bc28:	4770      	bx	lr

0800bc2a <__retarget_lock_release_recursive>:
 800bc2a:	4770      	bx	lr

0800bc2c <_free_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4605      	mov	r5, r0
 800bc30:	2900      	cmp	r1, #0
 800bc32:	d041      	beq.n	800bcb8 <_free_r+0x8c>
 800bc34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc38:	1f0c      	subs	r4, r1, #4
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfb8      	it	lt
 800bc3e:	18e4      	addlt	r4, r4, r3
 800bc40:	f000 f8e0 	bl	800be04 <__malloc_lock>
 800bc44:	4a1d      	ldr	r2, [pc, #116]	@ (800bcbc <_free_r+0x90>)
 800bc46:	6813      	ldr	r3, [r2, #0]
 800bc48:	b933      	cbnz	r3, 800bc58 <_free_r+0x2c>
 800bc4a:	6063      	str	r3, [r4, #4]
 800bc4c:	6014      	str	r4, [r2, #0]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc54:	f000 b8dc 	b.w	800be10 <__malloc_unlock>
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	d908      	bls.n	800bc6e <_free_r+0x42>
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	1821      	adds	r1, r4, r0
 800bc60:	428b      	cmp	r3, r1
 800bc62:	bf01      	itttt	eq
 800bc64:	6819      	ldreq	r1, [r3, #0]
 800bc66:	685b      	ldreq	r3, [r3, #4]
 800bc68:	1809      	addeq	r1, r1, r0
 800bc6a:	6021      	streq	r1, [r4, #0]
 800bc6c:	e7ed      	b.n	800bc4a <_free_r+0x1e>
 800bc6e:	461a      	mov	r2, r3
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	b10b      	cbz	r3, 800bc78 <_free_r+0x4c>
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	d9fa      	bls.n	800bc6e <_free_r+0x42>
 800bc78:	6811      	ldr	r1, [r2, #0]
 800bc7a:	1850      	adds	r0, r2, r1
 800bc7c:	42a0      	cmp	r0, r4
 800bc7e:	d10b      	bne.n	800bc98 <_free_r+0x6c>
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	4401      	add	r1, r0
 800bc84:	1850      	adds	r0, r2, r1
 800bc86:	4283      	cmp	r3, r0
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	d1e0      	bne.n	800bc4e <_free_r+0x22>
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	6053      	str	r3, [r2, #4]
 800bc92:	4408      	add	r0, r1
 800bc94:	6010      	str	r0, [r2, #0]
 800bc96:	e7da      	b.n	800bc4e <_free_r+0x22>
 800bc98:	d902      	bls.n	800bca0 <_free_r+0x74>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	e7d6      	b.n	800bc4e <_free_r+0x22>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	1821      	adds	r1, r4, r0
 800bca4:	428b      	cmp	r3, r1
 800bca6:	bf04      	itt	eq
 800bca8:	6819      	ldreq	r1, [r3, #0]
 800bcaa:	685b      	ldreq	r3, [r3, #4]
 800bcac:	6063      	str	r3, [r4, #4]
 800bcae:	bf04      	itt	eq
 800bcb0:	1809      	addeq	r1, r1, r0
 800bcb2:	6021      	streq	r1, [r4, #0]
 800bcb4:	6054      	str	r4, [r2, #4]
 800bcb6:	e7ca      	b.n	800bc4e <_free_r+0x22>
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000ad0 	.word	0x20000ad0

0800bcc0 <sbrk_aligned>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	4e0f      	ldr	r6, [pc, #60]	@ (800bd00 <sbrk_aligned+0x40>)
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	6831      	ldr	r1, [r6, #0]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	b911      	cbnz	r1, 800bcd2 <sbrk_aligned+0x12>
 800bccc:	f000 fba6 	bl	800c41c <_sbrk_r>
 800bcd0:	6030      	str	r0, [r6, #0]
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 fba1 	bl	800c41c <_sbrk_r>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d103      	bne.n	800bce6 <sbrk_aligned+0x26>
 800bcde:	f04f 34ff 	mov.w	r4, #4294967295
 800bce2:	4620      	mov	r0, r4
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	1cc4      	adds	r4, r0, #3
 800bce8:	f024 0403 	bic.w	r4, r4, #3
 800bcec:	42a0      	cmp	r0, r4
 800bcee:	d0f8      	beq.n	800bce2 <sbrk_aligned+0x22>
 800bcf0:	1a21      	subs	r1, r4, r0
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 fb92 	bl	800c41c <_sbrk_r>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d1f2      	bne.n	800bce2 <sbrk_aligned+0x22>
 800bcfc:	e7ef      	b.n	800bcde <sbrk_aligned+0x1e>
 800bcfe:	bf00      	nop
 800bd00:	20000acc 	.word	0x20000acc

0800bd04 <_malloc_r>:
 800bd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd08:	1ccd      	adds	r5, r1, #3
 800bd0a:	f025 0503 	bic.w	r5, r5, #3
 800bd0e:	3508      	adds	r5, #8
 800bd10:	2d0c      	cmp	r5, #12
 800bd12:	bf38      	it	cc
 800bd14:	250c      	movcc	r5, #12
 800bd16:	2d00      	cmp	r5, #0
 800bd18:	4606      	mov	r6, r0
 800bd1a:	db01      	blt.n	800bd20 <_malloc_r+0x1c>
 800bd1c:	42a9      	cmp	r1, r5
 800bd1e:	d904      	bls.n	800bd2a <_malloc_r+0x26>
 800bd20:	230c      	movs	r3, #12
 800bd22:	6033      	str	r3, [r6, #0]
 800bd24:	2000      	movs	r0, #0
 800bd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be00 <_malloc_r+0xfc>
 800bd2e:	f000 f869 	bl	800be04 <__malloc_lock>
 800bd32:	f8d8 3000 	ldr.w	r3, [r8]
 800bd36:	461c      	mov	r4, r3
 800bd38:	bb44      	cbnz	r4, 800bd8c <_malloc_r+0x88>
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff ffbf 	bl	800bcc0 <sbrk_aligned>
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	4604      	mov	r4, r0
 800bd46:	d158      	bne.n	800bdfa <_malloc_r+0xf6>
 800bd48:	f8d8 4000 	ldr.w	r4, [r8]
 800bd4c:	4627      	mov	r7, r4
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	d143      	bne.n	800bdda <_malloc_r+0xd6>
 800bd52:	2c00      	cmp	r4, #0
 800bd54:	d04b      	beq.n	800bdee <_malloc_r+0xea>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	eb04 0903 	add.w	r9, r4, r3
 800bd60:	f000 fb5c 	bl	800c41c <_sbrk_r>
 800bd64:	4581      	cmp	r9, r0
 800bd66:	d142      	bne.n	800bdee <_malloc_r+0xea>
 800bd68:	6821      	ldr	r1, [r4, #0]
 800bd6a:	1a6d      	subs	r5, r5, r1
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7ff ffa6 	bl	800bcc0 <sbrk_aligned>
 800bd74:	3001      	adds	r0, #1
 800bd76:	d03a      	beq.n	800bdee <_malloc_r+0xea>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	442b      	add	r3, r5
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	bb62      	cbnz	r2, 800bde0 <_malloc_r+0xdc>
 800bd86:	f8c8 7000 	str.w	r7, [r8]
 800bd8a:	e00f      	b.n	800bdac <_malloc_r+0xa8>
 800bd8c:	6822      	ldr	r2, [r4, #0]
 800bd8e:	1b52      	subs	r2, r2, r5
 800bd90:	d420      	bmi.n	800bdd4 <_malloc_r+0xd0>
 800bd92:	2a0b      	cmp	r2, #11
 800bd94:	d917      	bls.n	800bdc6 <_malloc_r+0xc2>
 800bd96:	1961      	adds	r1, r4, r5
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	6025      	str	r5, [r4, #0]
 800bd9c:	bf18      	it	ne
 800bd9e:	6059      	strne	r1, [r3, #4]
 800bda0:	6863      	ldr	r3, [r4, #4]
 800bda2:	bf08      	it	eq
 800bda4:	f8c8 1000 	streq.w	r1, [r8]
 800bda8:	5162      	str	r2, [r4, r5]
 800bdaa:	604b      	str	r3, [r1, #4]
 800bdac:	4630      	mov	r0, r6
 800bdae:	f000 f82f 	bl	800be10 <__malloc_unlock>
 800bdb2:	f104 000b 	add.w	r0, r4, #11
 800bdb6:	1d23      	adds	r3, r4, #4
 800bdb8:	f020 0007 	bic.w	r0, r0, #7
 800bdbc:	1ac2      	subs	r2, r0, r3
 800bdbe:	bf1c      	itt	ne
 800bdc0:	1a1b      	subne	r3, r3, r0
 800bdc2:	50a3      	strne	r3, [r4, r2]
 800bdc4:	e7af      	b.n	800bd26 <_malloc_r+0x22>
 800bdc6:	6862      	ldr	r2, [r4, #4]
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	bf0c      	ite	eq
 800bdcc:	f8c8 2000 	streq.w	r2, [r8]
 800bdd0:	605a      	strne	r2, [r3, #4]
 800bdd2:	e7eb      	b.n	800bdac <_malloc_r+0xa8>
 800bdd4:	4623      	mov	r3, r4
 800bdd6:	6864      	ldr	r4, [r4, #4]
 800bdd8:	e7ae      	b.n	800bd38 <_malloc_r+0x34>
 800bdda:	463c      	mov	r4, r7
 800bddc:	687f      	ldr	r7, [r7, #4]
 800bdde:	e7b6      	b.n	800bd4e <_malloc_r+0x4a>
 800bde0:	461a      	mov	r2, r3
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d1fb      	bne.n	800bde0 <_malloc_r+0xdc>
 800bde8:	2300      	movs	r3, #0
 800bdea:	6053      	str	r3, [r2, #4]
 800bdec:	e7de      	b.n	800bdac <_malloc_r+0xa8>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	6033      	str	r3, [r6, #0]
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 f80c 	bl	800be10 <__malloc_unlock>
 800bdf8:	e794      	b.n	800bd24 <_malloc_r+0x20>
 800bdfa:	6005      	str	r5, [r0, #0]
 800bdfc:	e7d6      	b.n	800bdac <_malloc_r+0xa8>
 800bdfe:	bf00      	nop
 800be00:	20000ad0 	.word	0x20000ad0

0800be04 <__malloc_lock>:
 800be04:	4801      	ldr	r0, [pc, #4]	@ (800be0c <__malloc_lock+0x8>)
 800be06:	f7ff bf0f 	b.w	800bc28 <__retarget_lock_acquire_recursive>
 800be0a:	bf00      	nop
 800be0c:	20000ac8 	.word	0x20000ac8

0800be10 <__malloc_unlock>:
 800be10:	4801      	ldr	r0, [pc, #4]	@ (800be18 <__malloc_unlock+0x8>)
 800be12:	f7ff bf0a 	b.w	800bc2a <__retarget_lock_release_recursive>
 800be16:	bf00      	nop
 800be18:	20000ac8 	.word	0x20000ac8

0800be1c <__ssputs_r>:
 800be1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	688e      	ldr	r6, [r1, #8]
 800be22:	461f      	mov	r7, r3
 800be24:	42be      	cmp	r6, r7
 800be26:	680b      	ldr	r3, [r1, #0]
 800be28:	4682      	mov	sl, r0
 800be2a:	460c      	mov	r4, r1
 800be2c:	4690      	mov	r8, r2
 800be2e:	d82d      	bhi.n	800be8c <__ssputs_r+0x70>
 800be30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be38:	d026      	beq.n	800be88 <__ssputs_r+0x6c>
 800be3a:	6965      	ldr	r5, [r4, #20]
 800be3c:	6909      	ldr	r1, [r1, #16]
 800be3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be42:	eba3 0901 	sub.w	r9, r3, r1
 800be46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be4a:	1c7b      	adds	r3, r7, #1
 800be4c:	444b      	add	r3, r9
 800be4e:	106d      	asrs	r5, r5, #1
 800be50:	429d      	cmp	r5, r3
 800be52:	bf38      	it	cc
 800be54:	461d      	movcc	r5, r3
 800be56:	0553      	lsls	r3, r2, #21
 800be58:	d527      	bpl.n	800beaa <__ssputs_r+0x8e>
 800be5a:	4629      	mov	r1, r5
 800be5c:	f7ff ff52 	bl	800bd04 <_malloc_r>
 800be60:	4606      	mov	r6, r0
 800be62:	b360      	cbz	r0, 800bebe <__ssputs_r+0xa2>
 800be64:	6921      	ldr	r1, [r4, #16]
 800be66:	464a      	mov	r2, r9
 800be68:	f000 fae8 	bl	800c43c <memcpy>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	6126      	str	r6, [r4, #16]
 800be7a:	6165      	str	r5, [r4, #20]
 800be7c:	444e      	add	r6, r9
 800be7e:	eba5 0509 	sub.w	r5, r5, r9
 800be82:	6026      	str	r6, [r4, #0]
 800be84:	60a5      	str	r5, [r4, #8]
 800be86:	463e      	mov	r6, r7
 800be88:	42be      	cmp	r6, r7
 800be8a:	d900      	bls.n	800be8e <__ssputs_r+0x72>
 800be8c:	463e      	mov	r6, r7
 800be8e:	6820      	ldr	r0, [r4, #0]
 800be90:	4632      	mov	r2, r6
 800be92:	4641      	mov	r1, r8
 800be94:	f000 faa8 	bl	800c3e8 <memmove>
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	1b9b      	subs	r3, r3, r6
 800be9c:	60a3      	str	r3, [r4, #8]
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	4433      	add	r3, r6
 800bea2:	6023      	str	r3, [r4, #0]
 800bea4:	2000      	movs	r0, #0
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	462a      	mov	r2, r5
 800beac:	f000 fad4 	bl	800c458 <_realloc_r>
 800beb0:	4606      	mov	r6, r0
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d1e0      	bne.n	800be78 <__ssputs_r+0x5c>
 800beb6:	6921      	ldr	r1, [r4, #16]
 800beb8:	4650      	mov	r0, sl
 800beba:	f7ff feb7 	bl	800bc2c <_free_r>
 800bebe:	230c      	movs	r3, #12
 800bec0:	f8ca 3000 	str.w	r3, [sl]
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	e7e9      	b.n	800bea6 <__ssputs_r+0x8a>
	...

0800bed4 <_svfiprintf_r>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	4698      	mov	r8, r3
 800beda:	898b      	ldrh	r3, [r1, #12]
 800bedc:	061b      	lsls	r3, r3, #24
 800bede:	b09d      	sub	sp, #116	@ 0x74
 800bee0:	4607      	mov	r7, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	d510      	bpl.n	800bf0a <_svfiprintf_r+0x36>
 800bee8:	690b      	ldr	r3, [r1, #16]
 800beea:	b973      	cbnz	r3, 800bf0a <_svfiprintf_r+0x36>
 800beec:	2140      	movs	r1, #64	@ 0x40
 800beee:	f7ff ff09 	bl	800bd04 <_malloc_r>
 800bef2:	6028      	str	r0, [r5, #0]
 800bef4:	6128      	str	r0, [r5, #16]
 800bef6:	b930      	cbnz	r0, 800bf06 <_svfiprintf_r+0x32>
 800bef8:	230c      	movs	r3, #12
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	b01d      	add	sp, #116	@ 0x74
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	2340      	movs	r3, #64	@ 0x40
 800bf08:	616b      	str	r3, [r5, #20]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf0e:	2320      	movs	r3, #32
 800bf10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf18:	2330      	movs	r3, #48	@ 0x30
 800bf1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0b8 <_svfiprintf_r+0x1e4>
 800bf1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf22:	f04f 0901 	mov.w	r9, #1
 800bf26:	4623      	mov	r3, r4
 800bf28:	469a      	mov	sl, r3
 800bf2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2e:	b10a      	cbz	r2, 800bf34 <_svfiprintf_r+0x60>
 800bf30:	2a25      	cmp	r2, #37	@ 0x25
 800bf32:	d1f9      	bne.n	800bf28 <_svfiprintf_r+0x54>
 800bf34:	ebba 0b04 	subs.w	fp, sl, r4
 800bf38:	d00b      	beq.n	800bf52 <_svfiprintf_r+0x7e>
 800bf3a:	465b      	mov	r3, fp
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff ff6b 	bl	800be1c <__ssputs_r>
 800bf46:	3001      	adds	r0, #1
 800bf48:	f000 80a7 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf4e:	445a      	add	r2, fp
 800bf50:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf52:	f89a 3000 	ldrb.w	r3, [sl]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 809f 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf66:	f10a 0a01 	add.w	sl, sl, #1
 800bf6a:	9304      	str	r3, [sp, #16]
 800bf6c:	9307      	str	r3, [sp, #28]
 800bf6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf72:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf74:	4654      	mov	r4, sl
 800bf76:	2205      	movs	r2, #5
 800bf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7c:	484e      	ldr	r0, [pc, #312]	@ (800c0b8 <_svfiprintf_r+0x1e4>)
 800bf7e:	f7f4 f957 	bl	8000230 <memchr>
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	b9d8      	cbnz	r0, 800bfbe <_svfiprintf_r+0xea>
 800bf86:	06d0      	lsls	r0, r2, #27
 800bf88:	bf44      	itt	mi
 800bf8a:	2320      	movmi	r3, #32
 800bf8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf90:	0711      	lsls	r1, r2, #28
 800bf92:	bf44      	itt	mi
 800bf94:	232b      	movmi	r3, #43	@ 0x2b
 800bf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfa0:	d015      	beq.n	800bfce <_svfiprintf_r+0xfa>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	4654      	mov	r4, sl
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f04f 0c0a 	mov.w	ip, #10
 800bfac:	4621      	mov	r1, r4
 800bfae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb2:	3b30      	subs	r3, #48	@ 0x30
 800bfb4:	2b09      	cmp	r3, #9
 800bfb6:	d94b      	bls.n	800c050 <_svfiprintf_r+0x17c>
 800bfb8:	b1b0      	cbz	r0, 800bfe8 <_svfiprintf_r+0x114>
 800bfba:	9207      	str	r2, [sp, #28]
 800bfbc:	e014      	b.n	800bfe8 <_svfiprintf_r+0x114>
 800bfbe:	eba0 0308 	sub.w	r3, r0, r8
 800bfc2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	46a2      	mov	sl, r4
 800bfcc:	e7d2      	b.n	800bf74 <_svfiprintf_r+0xa0>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	1d19      	adds	r1, r3, #4
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	bfbb      	ittet	lt
 800bfda:	425b      	neglt	r3, r3
 800bfdc:	f042 0202 	orrlt.w	r2, r2, #2
 800bfe0:	9307      	strge	r3, [sp, #28]
 800bfe2:	9307      	strlt	r3, [sp, #28]
 800bfe4:	bfb8      	it	lt
 800bfe6:	9204      	strlt	r2, [sp, #16]
 800bfe8:	7823      	ldrb	r3, [r4, #0]
 800bfea:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfec:	d10a      	bne.n	800c004 <_svfiprintf_r+0x130>
 800bfee:	7863      	ldrb	r3, [r4, #1]
 800bff0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bff2:	d132      	bne.n	800c05a <_svfiprintf_r+0x186>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c000:	3402      	adds	r4, #2
 800c002:	9305      	str	r3, [sp, #20]
 800c004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0c8 <_svfiprintf_r+0x1f4>
 800c008:	7821      	ldrb	r1, [r4, #0]
 800c00a:	2203      	movs	r2, #3
 800c00c:	4650      	mov	r0, sl
 800c00e:	f7f4 f90f 	bl	8000230 <memchr>
 800c012:	b138      	cbz	r0, 800c024 <_svfiprintf_r+0x150>
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	eba0 000a 	sub.w	r0, r0, sl
 800c01a:	2240      	movs	r2, #64	@ 0x40
 800c01c:	4082      	lsls	r2, r0
 800c01e:	4313      	orrs	r3, r2
 800c020:	3401      	adds	r4, #1
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c028:	4824      	ldr	r0, [pc, #144]	@ (800c0bc <_svfiprintf_r+0x1e8>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	f7f4 f8fe 	bl	8000230 <memchr>
 800c034:	2800      	cmp	r0, #0
 800c036:	d036      	beq.n	800c0a6 <_svfiprintf_r+0x1d2>
 800c038:	4b21      	ldr	r3, [pc, #132]	@ (800c0c0 <_svfiprintf_r+0x1ec>)
 800c03a:	bb1b      	cbnz	r3, 800c084 <_svfiprintf_r+0x1b0>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	3307      	adds	r3, #7
 800c040:	f023 0307 	bic.w	r3, r3, #7
 800c044:	3308      	adds	r3, #8
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c04a:	4433      	add	r3, r6
 800c04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c04e:	e76a      	b.n	800bf26 <_svfiprintf_r+0x52>
 800c050:	fb0c 3202 	mla	r2, ip, r2, r3
 800c054:	460c      	mov	r4, r1
 800c056:	2001      	movs	r0, #1
 800c058:	e7a8      	b.n	800bfac <_svfiprintf_r+0xd8>
 800c05a:	2300      	movs	r3, #0
 800c05c:	3401      	adds	r4, #1
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4620      	mov	r0, r4
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	@ 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x1a6>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c6      	beq.n	800c004 <_svfiprintf_r+0x130>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c4      	b.n	800c004 <_svfiprintf_r+0x130>
 800c07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07e:	4604      	mov	r4, r0
 800c080:	2301      	movs	r3, #1
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x192>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	462a      	mov	r2, r5
 800c08a:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c4 <_svfiprintf_r+0x1f0>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4638      	mov	r0, r7
 800c090:	f3af 8000 	nop.w
 800c094:	1c42      	adds	r2, r0, #1
 800c096:	4606      	mov	r6, r0
 800c098:	d1d6      	bne.n	800c048 <_svfiprintf_r+0x174>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	065b      	lsls	r3, r3, #25
 800c09e:	f53f af2d 	bmi.w	800befc <_svfiprintf_r+0x28>
 800c0a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0a4:	e72c      	b.n	800bf00 <_svfiprintf_r+0x2c>
 800c0a6:	ab03      	add	r3, sp, #12
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	462a      	mov	r2, r5
 800c0ac:	4b05      	ldr	r3, [pc, #20]	@ (800c0c4 <_svfiprintf_r+0x1f0>)
 800c0ae:	a904      	add	r1, sp, #16
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f000 f879 	bl	800c1a8 <_printf_i>
 800c0b6:	e7ed      	b.n	800c094 <_svfiprintf_r+0x1c0>
 800c0b8:	0800c568 	.word	0x0800c568
 800c0bc:	0800c572 	.word	0x0800c572
 800c0c0:	00000000 	.word	0x00000000
 800c0c4:	0800be1d 	.word	0x0800be1d
 800c0c8:	0800c56e 	.word	0x0800c56e

0800c0cc <_printf_common>:
 800c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d0:	4616      	mov	r6, r2
 800c0d2:	4698      	mov	r8, r3
 800c0d4:	688a      	ldr	r2, [r1, #8]
 800c0d6:	690b      	ldr	r3, [r1, #16]
 800c0d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	bfb8      	it	lt
 800c0e0:	4613      	movlt	r3, r2
 800c0e2:	6033      	str	r3, [r6, #0]
 800c0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	b10a      	cbz	r2, 800c0f2 <_printf_common+0x26>
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	6033      	str	r3, [r6, #0]
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	0699      	lsls	r1, r3, #26
 800c0f6:	bf42      	ittt	mi
 800c0f8:	6833      	ldrmi	r3, [r6, #0]
 800c0fa:	3302      	addmi	r3, #2
 800c0fc:	6033      	strmi	r3, [r6, #0]
 800c0fe:	6825      	ldr	r5, [r4, #0]
 800c100:	f015 0506 	ands.w	r5, r5, #6
 800c104:	d106      	bne.n	800c114 <_printf_common+0x48>
 800c106:	f104 0a19 	add.w	sl, r4, #25
 800c10a:	68e3      	ldr	r3, [r4, #12]
 800c10c:	6832      	ldr	r2, [r6, #0]
 800c10e:	1a9b      	subs	r3, r3, r2
 800c110:	42ab      	cmp	r3, r5
 800c112:	dc26      	bgt.n	800c162 <_printf_common+0x96>
 800c114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	3b00      	subs	r3, #0
 800c11c:	bf18      	it	ne
 800c11e:	2301      	movne	r3, #1
 800c120:	0692      	lsls	r2, r2, #26
 800c122:	d42b      	bmi.n	800c17c <_printf_common+0xb0>
 800c124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c128:	4641      	mov	r1, r8
 800c12a:	4638      	mov	r0, r7
 800c12c:	47c8      	blx	r9
 800c12e:	3001      	adds	r0, #1
 800c130:	d01e      	beq.n	800c170 <_printf_common+0xa4>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	6922      	ldr	r2, [r4, #16]
 800c136:	f003 0306 	and.w	r3, r3, #6
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	bf02      	ittt	eq
 800c13e:	68e5      	ldreq	r5, [r4, #12]
 800c140:	6833      	ldreq	r3, [r6, #0]
 800c142:	1aed      	subeq	r5, r5, r3
 800c144:	68a3      	ldr	r3, [r4, #8]
 800c146:	bf0c      	ite	eq
 800c148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c14c:	2500      	movne	r5, #0
 800c14e:	4293      	cmp	r3, r2
 800c150:	bfc4      	itt	gt
 800c152:	1a9b      	subgt	r3, r3, r2
 800c154:	18ed      	addgt	r5, r5, r3
 800c156:	2600      	movs	r6, #0
 800c158:	341a      	adds	r4, #26
 800c15a:	42b5      	cmp	r5, r6
 800c15c:	d11a      	bne.n	800c194 <_printf_common+0xc8>
 800c15e:	2000      	movs	r0, #0
 800c160:	e008      	b.n	800c174 <_printf_common+0xa8>
 800c162:	2301      	movs	r3, #1
 800c164:	4652      	mov	r2, sl
 800c166:	4641      	mov	r1, r8
 800c168:	4638      	mov	r0, r7
 800c16a:	47c8      	blx	r9
 800c16c:	3001      	adds	r0, #1
 800c16e:	d103      	bne.n	800c178 <_printf_common+0xac>
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c178:	3501      	adds	r5, #1
 800c17a:	e7c6      	b.n	800c10a <_printf_common+0x3e>
 800c17c:	18e1      	adds	r1, r4, r3
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	2030      	movs	r0, #48	@ 0x30
 800c182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c186:	4422      	add	r2, r4
 800c188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c18c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c190:	3302      	adds	r3, #2
 800c192:	e7c7      	b.n	800c124 <_printf_common+0x58>
 800c194:	2301      	movs	r3, #1
 800c196:	4622      	mov	r2, r4
 800c198:	4641      	mov	r1, r8
 800c19a:	4638      	mov	r0, r7
 800c19c:	47c8      	blx	r9
 800c19e:	3001      	adds	r0, #1
 800c1a0:	d0e6      	beq.n	800c170 <_printf_common+0xa4>
 800c1a2:	3601      	adds	r6, #1
 800c1a4:	e7d9      	b.n	800c15a <_printf_common+0x8e>
	...

0800c1a8 <_printf_i>:
 800c1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ac:	7e0f      	ldrb	r7, [r1, #24]
 800c1ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1b0:	2f78      	cmp	r7, #120	@ 0x78
 800c1b2:	4691      	mov	r9, r2
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	469a      	mov	sl, r3
 800c1ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1be:	d807      	bhi.n	800c1d0 <_printf_i+0x28>
 800c1c0:	2f62      	cmp	r7, #98	@ 0x62
 800c1c2:	d80a      	bhi.n	800c1da <_printf_i+0x32>
 800c1c4:	2f00      	cmp	r7, #0
 800c1c6:	f000 80d2 	beq.w	800c36e <_printf_i+0x1c6>
 800c1ca:	2f58      	cmp	r7, #88	@ 0x58
 800c1cc:	f000 80b9 	beq.w	800c342 <_printf_i+0x19a>
 800c1d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1d8:	e03a      	b.n	800c250 <_printf_i+0xa8>
 800c1da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1de:	2b15      	cmp	r3, #21
 800c1e0:	d8f6      	bhi.n	800c1d0 <_printf_i+0x28>
 800c1e2:	a101      	add	r1, pc, #4	@ (adr r1, 800c1e8 <_printf_i+0x40>)
 800c1e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1e8:	0800c241 	.word	0x0800c241
 800c1ec:	0800c255 	.word	0x0800c255
 800c1f0:	0800c1d1 	.word	0x0800c1d1
 800c1f4:	0800c1d1 	.word	0x0800c1d1
 800c1f8:	0800c1d1 	.word	0x0800c1d1
 800c1fc:	0800c1d1 	.word	0x0800c1d1
 800c200:	0800c255 	.word	0x0800c255
 800c204:	0800c1d1 	.word	0x0800c1d1
 800c208:	0800c1d1 	.word	0x0800c1d1
 800c20c:	0800c1d1 	.word	0x0800c1d1
 800c210:	0800c1d1 	.word	0x0800c1d1
 800c214:	0800c355 	.word	0x0800c355
 800c218:	0800c27f 	.word	0x0800c27f
 800c21c:	0800c30f 	.word	0x0800c30f
 800c220:	0800c1d1 	.word	0x0800c1d1
 800c224:	0800c1d1 	.word	0x0800c1d1
 800c228:	0800c377 	.word	0x0800c377
 800c22c:	0800c1d1 	.word	0x0800c1d1
 800c230:	0800c27f 	.word	0x0800c27f
 800c234:	0800c1d1 	.word	0x0800c1d1
 800c238:	0800c1d1 	.word	0x0800c1d1
 800c23c:	0800c317 	.word	0x0800c317
 800c240:	6833      	ldr	r3, [r6, #0]
 800c242:	1d1a      	adds	r2, r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6032      	str	r2, [r6, #0]
 800c248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c24c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c250:	2301      	movs	r3, #1
 800c252:	e09d      	b.n	800c390 <_printf_i+0x1e8>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	6820      	ldr	r0, [r4, #0]
 800c258:	1d19      	adds	r1, r3, #4
 800c25a:	6031      	str	r1, [r6, #0]
 800c25c:	0606      	lsls	r6, r0, #24
 800c25e:	d501      	bpl.n	800c264 <_printf_i+0xbc>
 800c260:	681d      	ldr	r5, [r3, #0]
 800c262:	e003      	b.n	800c26c <_printf_i+0xc4>
 800c264:	0645      	lsls	r5, r0, #25
 800c266:	d5fb      	bpl.n	800c260 <_printf_i+0xb8>
 800c268:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	da03      	bge.n	800c278 <_printf_i+0xd0>
 800c270:	232d      	movs	r3, #45	@ 0x2d
 800c272:	426d      	negs	r5, r5
 800c274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c278:	4859      	ldr	r0, [pc, #356]	@ (800c3e0 <_printf_i+0x238>)
 800c27a:	230a      	movs	r3, #10
 800c27c:	e011      	b.n	800c2a2 <_printf_i+0xfa>
 800c27e:	6821      	ldr	r1, [r4, #0]
 800c280:	6833      	ldr	r3, [r6, #0]
 800c282:	0608      	lsls	r0, r1, #24
 800c284:	f853 5b04 	ldr.w	r5, [r3], #4
 800c288:	d402      	bmi.n	800c290 <_printf_i+0xe8>
 800c28a:	0649      	lsls	r1, r1, #25
 800c28c:	bf48      	it	mi
 800c28e:	b2ad      	uxthmi	r5, r5
 800c290:	2f6f      	cmp	r7, #111	@ 0x6f
 800c292:	4853      	ldr	r0, [pc, #332]	@ (800c3e0 <_printf_i+0x238>)
 800c294:	6033      	str	r3, [r6, #0]
 800c296:	bf14      	ite	ne
 800c298:	230a      	movne	r3, #10
 800c29a:	2308      	moveq	r3, #8
 800c29c:	2100      	movs	r1, #0
 800c29e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2a2:	6866      	ldr	r6, [r4, #4]
 800c2a4:	60a6      	str	r6, [r4, #8]
 800c2a6:	2e00      	cmp	r6, #0
 800c2a8:	bfa2      	ittt	ge
 800c2aa:	6821      	ldrge	r1, [r4, #0]
 800c2ac:	f021 0104 	bicge.w	r1, r1, #4
 800c2b0:	6021      	strge	r1, [r4, #0]
 800c2b2:	b90d      	cbnz	r5, 800c2b8 <_printf_i+0x110>
 800c2b4:	2e00      	cmp	r6, #0
 800c2b6:	d04b      	beq.n	800c350 <_printf_i+0x1a8>
 800c2b8:	4616      	mov	r6, r2
 800c2ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2be:	fb03 5711 	mls	r7, r3, r1, r5
 800c2c2:	5dc7      	ldrb	r7, [r0, r7]
 800c2c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2c8:	462f      	mov	r7, r5
 800c2ca:	42bb      	cmp	r3, r7
 800c2cc:	460d      	mov	r5, r1
 800c2ce:	d9f4      	bls.n	800c2ba <_printf_i+0x112>
 800c2d0:	2b08      	cmp	r3, #8
 800c2d2:	d10b      	bne.n	800c2ec <_printf_i+0x144>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	07df      	lsls	r7, r3, #31
 800c2d8:	d508      	bpl.n	800c2ec <_printf_i+0x144>
 800c2da:	6923      	ldr	r3, [r4, #16]
 800c2dc:	6861      	ldr	r1, [r4, #4]
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	bfde      	ittt	le
 800c2e2:	2330      	movle	r3, #48	@ 0x30
 800c2e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2ec:	1b92      	subs	r2, r2, r6
 800c2ee:	6122      	str	r2, [r4, #16]
 800c2f0:	f8cd a000 	str.w	sl, [sp]
 800c2f4:	464b      	mov	r3, r9
 800c2f6:	aa03      	add	r2, sp, #12
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f7ff fee6 	bl	800c0cc <_printf_common>
 800c300:	3001      	adds	r0, #1
 800c302:	d14a      	bne.n	800c39a <_printf_i+0x1f2>
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	b004      	add	sp, #16
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	f043 0320 	orr.w	r3, r3, #32
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	4833      	ldr	r0, [pc, #204]	@ (800c3e4 <_printf_i+0x23c>)
 800c318:	2778      	movs	r7, #120	@ 0x78
 800c31a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	6831      	ldr	r1, [r6, #0]
 800c322:	061f      	lsls	r7, r3, #24
 800c324:	f851 5b04 	ldr.w	r5, [r1], #4
 800c328:	d402      	bmi.n	800c330 <_printf_i+0x188>
 800c32a:	065f      	lsls	r7, r3, #25
 800c32c:	bf48      	it	mi
 800c32e:	b2ad      	uxthmi	r5, r5
 800c330:	6031      	str	r1, [r6, #0]
 800c332:	07d9      	lsls	r1, r3, #31
 800c334:	bf44      	itt	mi
 800c336:	f043 0320 	orrmi.w	r3, r3, #32
 800c33a:	6023      	strmi	r3, [r4, #0]
 800c33c:	b11d      	cbz	r5, 800c346 <_printf_i+0x19e>
 800c33e:	2310      	movs	r3, #16
 800c340:	e7ac      	b.n	800c29c <_printf_i+0xf4>
 800c342:	4827      	ldr	r0, [pc, #156]	@ (800c3e0 <_printf_i+0x238>)
 800c344:	e7e9      	b.n	800c31a <_printf_i+0x172>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	f023 0320 	bic.w	r3, r3, #32
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	e7f6      	b.n	800c33e <_printf_i+0x196>
 800c350:	4616      	mov	r6, r2
 800c352:	e7bd      	b.n	800c2d0 <_printf_i+0x128>
 800c354:	6833      	ldr	r3, [r6, #0]
 800c356:	6825      	ldr	r5, [r4, #0]
 800c358:	6961      	ldr	r1, [r4, #20]
 800c35a:	1d18      	adds	r0, r3, #4
 800c35c:	6030      	str	r0, [r6, #0]
 800c35e:	062e      	lsls	r6, r5, #24
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	d501      	bpl.n	800c368 <_printf_i+0x1c0>
 800c364:	6019      	str	r1, [r3, #0]
 800c366:	e002      	b.n	800c36e <_printf_i+0x1c6>
 800c368:	0668      	lsls	r0, r5, #25
 800c36a:	d5fb      	bpl.n	800c364 <_printf_i+0x1bc>
 800c36c:	8019      	strh	r1, [r3, #0]
 800c36e:	2300      	movs	r3, #0
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	4616      	mov	r6, r2
 800c374:	e7bc      	b.n	800c2f0 <_printf_i+0x148>
 800c376:	6833      	ldr	r3, [r6, #0]
 800c378:	1d1a      	adds	r2, r3, #4
 800c37a:	6032      	str	r2, [r6, #0]
 800c37c:	681e      	ldr	r6, [r3, #0]
 800c37e:	6862      	ldr	r2, [r4, #4]
 800c380:	2100      	movs	r1, #0
 800c382:	4630      	mov	r0, r6
 800c384:	f7f3 ff54 	bl	8000230 <memchr>
 800c388:	b108      	cbz	r0, 800c38e <_printf_i+0x1e6>
 800c38a:	1b80      	subs	r0, r0, r6
 800c38c:	6060      	str	r0, [r4, #4]
 800c38e:	6863      	ldr	r3, [r4, #4]
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	2300      	movs	r3, #0
 800c394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c398:	e7aa      	b.n	800c2f0 <_printf_i+0x148>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	4632      	mov	r2, r6
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	47d0      	blx	sl
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d0ad      	beq.n	800c304 <_printf_i+0x15c>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	079b      	lsls	r3, r3, #30
 800c3ac:	d413      	bmi.n	800c3d6 <_printf_i+0x22e>
 800c3ae:	68e0      	ldr	r0, [r4, #12]
 800c3b0:	9b03      	ldr	r3, [sp, #12]
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	bfb8      	it	lt
 800c3b6:	4618      	movlt	r0, r3
 800c3b8:	e7a6      	b.n	800c308 <_printf_i+0x160>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4632      	mov	r2, r6
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	47d0      	blx	sl
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d09d      	beq.n	800c304 <_printf_i+0x15c>
 800c3c8:	3501      	adds	r5, #1
 800c3ca:	68e3      	ldr	r3, [r4, #12]
 800c3cc:	9903      	ldr	r1, [sp, #12]
 800c3ce:	1a5b      	subs	r3, r3, r1
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	dcf2      	bgt.n	800c3ba <_printf_i+0x212>
 800c3d4:	e7eb      	b.n	800c3ae <_printf_i+0x206>
 800c3d6:	2500      	movs	r5, #0
 800c3d8:	f104 0619 	add.w	r6, r4, #25
 800c3dc:	e7f5      	b.n	800c3ca <_printf_i+0x222>
 800c3de:	bf00      	nop
 800c3e0:	0800c579 	.word	0x0800c579
 800c3e4:	0800c58a 	.word	0x0800c58a

0800c3e8 <memmove>:
 800c3e8:	4288      	cmp	r0, r1
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	eb01 0402 	add.w	r4, r1, r2
 800c3f0:	d902      	bls.n	800c3f8 <memmove+0x10>
 800c3f2:	4284      	cmp	r4, r0
 800c3f4:	4623      	mov	r3, r4
 800c3f6:	d807      	bhi.n	800c408 <memmove+0x20>
 800c3f8:	1e43      	subs	r3, r0, #1
 800c3fa:	42a1      	cmp	r1, r4
 800c3fc:	d008      	beq.n	800c410 <memmove+0x28>
 800c3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c406:	e7f8      	b.n	800c3fa <memmove+0x12>
 800c408:	4402      	add	r2, r0
 800c40a:	4601      	mov	r1, r0
 800c40c:	428a      	cmp	r2, r1
 800c40e:	d100      	bne.n	800c412 <memmove+0x2a>
 800c410:	bd10      	pop	{r4, pc}
 800c412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c41a:	e7f7      	b.n	800c40c <memmove+0x24>

0800c41c <_sbrk_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d06      	ldr	r5, [pc, #24]	@ (800c438 <_sbrk_r+0x1c>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	602b      	str	r3, [r5, #0]
 800c428:	f7f6 fb5e 	bl	8002ae8 <_sbrk>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_sbrk_r+0x1a>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_sbrk_r+0x1a>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20000ac4 	.word	0x20000ac4

0800c43c <memcpy>:
 800c43c:	440a      	add	r2, r1
 800c43e:	4291      	cmp	r1, r2
 800c440:	f100 33ff 	add.w	r3, r0, #4294967295
 800c444:	d100      	bne.n	800c448 <memcpy+0xc>
 800c446:	4770      	bx	lr
 800c448:	b510      	push	{r4, lr}
 800c44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c452:	4291      	cmp	r1, r2
 800c454:	d1f9      	bne.n	800c44a <memcpy+0xe>
 800c456:	bd10      	pop	{r4, pc}

0800c458 <_realloc_r>:
 800c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45c:	4680      	mov	r8, r0
 800c45e:	4615      	mov	r5, r2
 800c460:	460c      	mov	r4, r1
 800c462:	b921      	cbnz	r1, 800c46e <_realloc_r+0x16>
 800c464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	4611      	mov	r1, r2
 800c46a:	f7ff bc4b 	b.w	800bd04 <_malloc_r>
 800c46e:	b92a      	cbnz	r2, 800c47c <_realloc_r+0x24>
 800c470:	f7ff fbdc 	bl	800bc2c <_free_r>
 800c474:	2400      	movs	r4, #0
 800c476:	4620      	mov	r0, r4
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	f000 f81a 	bl	800c4b4 <_malloc_usable_size_r>
 800c480:	4285      	cmp	r5, r0
 800c482:	4606      	mov	r6, r0
 800c484:	d802      	bhi.n	800c48c <_realloc_r+0x34>
 800c486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c48a:	d8f4      	bhi.n	800c476 <_realloc_r+0x1e>
 800c48c:	4629      	mov	r1, r5
 800c48e:	4640      	mov	r0, r8
 800c490:	f7ff fc38 	bl	800bd04 <_malloc_r>
 800c494:	4607      	mov	r7, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	d0ec      	beq.n	800c474 <_realloc_r+0x1c>
 800c49a:	42b5      	cmp	r5, r6
 800c49c:	462a      	mov	r2, r5
 800c49e:	4621      	mov	r1, r4
 800c4a0:	bf28      	it	cs
 800c4a2:	4632      	movcs	r2, r6
 800c4a4:	f7ff ffca 	bl	800c43c <memcpy>
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f7ff fbbe 	bl	800bc2c <_free_r>
 800c4b0:	463c      	mov	r4, r7
 800c4b2:	e7e0      	b.n	800c476 <_realloc_r+0x1e>

0800c4b4 <_malloc_usable_size_r>:
 800c4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b8:	1f18      	subs	r0, r3, #4
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	bfbc      	itt	lt
 800c4be:	580b      	ldrlt	r3, [r1, r0]
 800c4c0:	18c0      	addlt	r0, r0, r3
 800c4c2:	4770      	bx	lr

0800c4c4 <_init>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	bf00      	nop
 800c4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ca:	bc08      	pop	{r3}
 800c4cc:	469e      	mov	lr, r3
 800c4ce:	4770      	bx	lr

0800c4d0 <_fini>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	bf00      	nop
 800c4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d6:	bc08      	pop	{r3}
 800c4d8:	469e      	mov	lr, r3
 800c4da:	4770      	bx	lr
