
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b540  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800b718  0800b718  0000c718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b76c  0800b76c  0000d048  2**0
                  CONTENTS
  4 .ARM          00000008  0800b76c  0800b76c  0000c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b774  0800b774  0000d048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b774  0800b774  0000c774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b778  0800b778  0000c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800b77c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  20000048  0800b7c4  0000d048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800b7c4  0000daa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020424  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042b3  00000000  00000000  0002d49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001485  00000000  00000000  000331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abfb  00000000  00000000  0003463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000226d1  00000000  00000000  0005f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011644d  00000000  00000000  00081909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197d56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  00197d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0019ee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b700 	.word	0x0800b700

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	0800b700 	.word	0x0800b700

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	@ 0x30
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2220      	movs	r2, #32
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00a fca3 	bl	800b6a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d62:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d72:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b32      	ldr	r3, [pc, #200]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d7e:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d84:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d90:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000daa:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db6:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de4:	4817      	ldr	r0, [pc, #92]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000de6:	f002 ffcd 	bl	8003d84 <HAL_ADC_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000df0:	f001 faa0 	bl	8002334 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000e00:	f004 f8ec 	bl	8004fdc <HAL_ADCEx_MultiModeConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000e0a:	f001 fa93 	bl	8002334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2306      	movs	r3, #6
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	237f      	movs	r3, #127	@ 0x7f
 8000e1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <MX_ADC1_Init+0x100>)
 8000e2c:	f003 fa58 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000e36:	f001 fa7d 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3730      	adds	r7, #48	@ 0x30
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000064 	.word	0x20000064
 8000e48:	04300002 	.word	0x04300002

08000e4c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2220      	movs	r2, #32
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00a fc25 	bl	800b6a8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e60:	4a31      	ldr	r2, [pc, #196]	@ (8000f28 <MX_ADC2_Init+0xdc>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e66:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000ee0:	f002 ff50 	bl	8003d84 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000eea:	f001 fa23 	bl	8002334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_ADC2_Init+0xe0>)
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000efa:	237f      	movs	r3, #127	@ 0x7f
 8000efc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efe:	2304      	movs	r3, #4
 8000f00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_ADC2_Init+0xd8>)
 8000f0c:	f003 f9e8 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000f16:	f001 fa0d 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000d0 	.word	0x200000d0
 8000f28:	50000100 	.word	0x50000100
 8000f2c:	0c900008 	.word	0x0c900008

08000f30 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	@ 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2220      	movs	r2, #32
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00a fbad 	bl	800b6a8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f4e:	4b37      	ldr	r3, [pc, #220]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f50:	4a37      	ldr	r2, [pc, #220]	@ (8001030 <MX_ADC3_Init+0x100>)
 8000f52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f54:	4b35      	ldr	r3, [pc, #212]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f56:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b32      	ldr	r3, [pc, #200]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000f68:	4b30      	ldr	r3, [pc, #192]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f76:	2204      	movs	r2, #4
 8000f78:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000f86:	4b29      	ldr	r3, [pc, #164]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fb8:	220c      	movs	r2, #12
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fce:	4817      	ldr	r0, [pc, #92]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fd0:	f002 fed8 	bl	8003d84 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000fda:	f001 f9ab 	bl	8002334 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	@ (800102c <MX_ADC3_Init+0xfc>)
 8000fea:	f003 fff7 	bl	8004fdc <HAL_ADCEx_MultiModeConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000ff4:	f001 f99e 	bl	8002334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_ADC3_Init+0x104>)
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001004:	237f      	movs	r3, #127	@ 0x7f
 8001006:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001008:	2304      	movs	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_ADC3_Init+0xfc>)
 8001016:	f003 f963 	bl	80042e0 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8001020:	f001 f988 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	@ 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000013c 	.word	0x2000013c
 8001030:	50000400 	.word	0x50000400
 8001034:	14f00020 	.word	0x14f00020

08001038 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00a fb2f 	bl	800b6a8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800104a:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800104c:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <MX_ADC4_Init+0xdc>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001050:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001052:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001056:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001064:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001072:	2204      	movs	r2, #4
 8001074:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800107c:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800107e:	2201      	movs	r2, #1
 8001080:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001084:	2201      	movs	r2, #1
 8001086:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <MX_ADC4_Init+0xd8>)
 8001098:	2200      	movs	r2, #0
 800109a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_ADC4_Init+0xd8>)
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010b4:	220c      	movs	r2, #12
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010cc:	f002 fe5a 	bl	8003d84 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 80010d6:	f001 f92d 	bl	8002334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC4_Init+0xe0>)
 80010dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010de:	2306      	movs	r3, #6
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e6:	237f      	movs	r3, #127	@ 0x7f
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	@ (8001110 <MX_ADC4_Init+0xd8>)
 80010f8:	f003 f8f2 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8001102:	f001 f917 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001a8 	.word	0x200001a8
 8001114:	50000500 	.word	0x50000500
 8001118:	14f00020 	.word	0x14f00020

0800111c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2220      	movs	r2, #32
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00a fabd 	bl	800b6a8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800112e:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001130:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <MX_ADC5_Init+0xdc>)
 8001132:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001136:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800113a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001148:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114e:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001156:	2204      	movs	r2, #4
 8001158:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001162:	2201      	movs	r2, #1
 8001164:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001168:	2201      	movs	r2, #1
 800116a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 8001198:	220c      	movs	r2, #12
 800119a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 80011b0:	f002 fde8 	bl	8003d84 <HAL_ADC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 80011ba:	f001 f8bb 	bl	8002334 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_ADC5_Init+0xe0>)
 80011c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	237f      	movs	r3, #127	@ 0x7f
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ce:	2304      	movs	r3, #4
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_ADC5_Init+0xd8>)
 80011dc:	f003 f880 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 80011e6:	f001 f8a5 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000214 	.word	0x20000214
 80011f8:	50000600 	.word	0x50000600
 80011fc:	08600004 	.word	0x08600004

08001200 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a6      	sub	sp, #152	@ 0x98
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800121c:	2254      	movs	r2, #84	@ 0x54
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00a fa41 	bl	800b6a8 <memset>
  if(adcHandle->Instance==ADC1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800122e:	d16c      	bne.n	800130a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001236:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800123a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001240:	4618      	mov	r0, r3
 8001242:	f007 fa11 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800124c:	f001 f872 	bl	8002334 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001250:	4ba0      	ldr	r3, [pc, #640]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a9f      	ldr	r2, [pc, #636]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 8001258:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800125a:	4b9e      	ldr	r3, [pc, #632]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10b      	bne.n	800127a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001262:	4b9d      	ldr	r3, [pc, #628]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a9c      	ldr	r2, [pc, #624]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001268:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b9a      	ldr	r3, [pc, #616]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b97      	ldr	r3, [pc, #604]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a96      	ldr	r2, [pc, #600]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b94      	ldr	r3, [pc, #592]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ae:	f004 fb95 	bl	80059dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b2:	4b8a      	ldr	r3, [pc, #552]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012b4:	4a8a      	ldr	r2, [pc, #552]	@ (80014e0 <HAL_ADC_MspInit+0x2e0>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012b8:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012ba:	2205      	movs	r2, #5
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b87      	ldr	r3, [pc, #540]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b85      	ldr	r3, [pc, #532]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b84      	ldr	r3, [pc, #528]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d0:	4b82      	ldr	r3, [pc, #520]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d8:	4b80      	ldr	r3, [pc, #512]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e0:	4b7e      	ldr	r3, [pc, #504]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012e2:	2220      	movs	r2, #32
 80012e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012ec:	487b      	ldr	r0, [pc, #492]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 80012ee:	f004 f88d 	bl	800540c <HAL_DMA_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80012f8:	f001 f81c 	bl	8002334 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a77      	ldr	r2, [pc, #476]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 8001300:	655a      	str	r2, [r3, #84]	@ 0x54
 8001302:	4a76      	ldr	r2, [pc, #472]	@ (80014dc <HAL_ADC_MspInit+0x2dc>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001308:	e1e0      	b.n	80016cc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	@ (80014e4 <HAL_ADC_MspInit+0x2e4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d16c      	bne.n	80013ee <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800131a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800131e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001324:	4618      	mov	r0, r3
 8001326:	f007 f99f 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8001330:	f001 f800 	bl	8002334 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001334:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a66      	ldr	r2, [pc, #408]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 800133c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <HAL_ADC_MspInit+0x2d4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10b      	bne.n	800135e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001346:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a63      	ldr	r2, [pc, #396]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800134c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b61      	ldr	r3, [pc, #388]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a5d      	ldr	r2, [pc, #372]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137c:	2303      	movs	r3, #3
 800137e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f004 fb23 	bl	80059dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001396:	4b54      	ldr	r3, [pc, #336]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 8001398:	4a54      	ldr	r2, [pc, #336]	@ (80014ec <HAL_ADC_MspInit+0x2ec>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800139c:	4b52      	ldr	r3, [pc, #328]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b4e      	ldr	r3, [pc, #312]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b4:	4b4c      	ldr	r3, [pc, #304]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013bc:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013c4:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013c6:	2220      	movs	r2, #32
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013d0:	4845      	ldr	r0, [pc, #276]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013d2:	f004 f81b 	bl	800540c <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80013dc:	f000 ffaa 	bl	8002334 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80013e6:	4a40      	ldr	r2, [pc, #256]	@ (80014e8 <HAL_ADC_MspInit+0x2e8>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80013ec:	e16e      	b.n	80016cc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3f      	ldr	r2, [pc, #252]	@ (80014f0 <HAL_ADC_MspInit+0x2f0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	f040 8085 	bne.w	8001504 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001400:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001404:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001406:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800140a:	4618      	mov	r0, r3
 800140c:	f007 f92c 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8001416:	f000 ff8d 	bl	8002334 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800141a:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_ADC_MspInit+0x2f4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a34      	ldr	r2, [pc, #208]	@ (80014f4 <HAL_ADC_MspInit+0x2f4>)
 8001422:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001424:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <HAL_ADC_MspInit+0x2f4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10b      	bne.n	8001444 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800142c:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001438:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_ADC_MspInit+0x2d8>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001474:	4619      	mov	r1, r3
 8001476:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <HAL_ADC_MspInit+0x2f8>)
 8001478:	f004 fab0 	bl	80059dc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 800147e:	4a20      	ldr	r2, [pc, #128]	@ (8001500 <HAL_ADC_MspInit+0x300>)
 8001480:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 8001484:	2225      	movs	r2, #37	@ 0x25
 8001486:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 800149c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014b8:	f003 ffa8 	bl	800540c <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 80014c2:	f000 ff37 	bl	8002334 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_ADC_MspInit+0x2fc>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80014d2:	e0fb      	b.n	80016cc <HAL_ADC_MspInit+0x4cc>
 80014d4:	20000460 	.word	0x20000460
 80014d8:	40021000 	.word	0x40021000
 80014dc:	20000280 	.word	0x20000280
 80014e0:	40020008 	.word	0x40020008
 80014e4:	50000100 	.word	0x50000100
 80014e8:	200002e0 	.word	0x200002e0
 80014ec:	4002001c 	.word	0x4002001c
 80014f0:	50000400 	.word	0x50000400
 80014f4:	20000464 	.word	0x20000464
 80014f8:	48000400 	.word	0x48000400
 80014fc:	20000340 	.word	0x20000340
 8001500:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a72      	ldr	r2, [pc, #456]	@ (80016d4 <HAL_ADC_MspInit+0x4d4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d16c      	bne.n	80015e8 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800150e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001514:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001518:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800151e:	4618      	mov	r0, r3
 8001520:	f007 f8a2 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 800152a:	f000 ff03 	bl	8002334 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800152e:	4b6a      	ldr	r3, [pc, #424]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a68      	ldr	r2, [pc, #416]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 8001536:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001538:	4b67      	ldr	r3, [pc, #412]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10b      	bne.n	8001558 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001540:	4b66      	ldr	r3, [pc, #408]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	4a65      	ldr	r2, [pc, #404]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154c:	4b63      	ldr	r3, [pc, #396]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b60      	ldr	r3, [pc, #384]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001564:	4b5d      	ldr	r3, [pc, #372]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001578:	2303      	movs	r3, #3
 800157a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001588:	4619      	mov	r1, r3
 800158a:	4855      	ldr	r0, [pc, #340]	@ (80016e0 <HAL_ADC_MspInit+0x4e0>)
 800158c:	f004 fa26 	bl	80059dc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001590:	4b54      	ldr	r3, [pc, #336]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 8001592:	4a55      	ldr	r2, [pc, #340]	@ (80016e8 <HAL_ADC_MspInit+0x4e8>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001596:	4b53      	ldr	r3, [pc, #332]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 8001598:	2226      	movs	r2, #38	@ 0x26
 800159a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159c:	4b51      	ldr	r3, [pc, #324]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b50      	ldr	r3, [pc, #320]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ae:	4b4d      	ldr	r3, [pc, #308]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b6:	4b4b      	ldr	r3, [pc, #300]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80015be:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015c0:	2220      	movs	r2, #32
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b47      	ldr	r3, [pc, #284]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80015ca:	4846      	ldr	r0, [pc, #280]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015cc:	f003 ff1e 	bl	800540c <HAL_DMA_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80015d6:	f000 fead 	bl	8002334 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a41      	ldr	r2, [pc, #260]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015de:	655a      	str	r2, [r3, #84]	@ 0x54
 80015e0:	4a40      	ldr	r2, [pc, #256]	@ (80016e4 <HAL_ADC_MspInit+0x4e4>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015e6:	e071      	b.n	80016cc <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a3f      	ldr	r2, [pc, #252]	@ (80016ec <HAL_ADC_MspInit+0x4ec>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d16c      	bne.n	80016cc <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001602:	4618      	mov	r0, r3
 8001604:	f007 f830 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 800160e:	f000 fe91 	bl	8002334 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a2f      	ldr	r2, [pc, #188]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 800161a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800161c:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <HAL_ADC_MspInit+0x4d8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10b      	bne.n	800163c <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	4a2c      	ldr	r2, [pc, #176]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001640:	4a26      	ldr	r2, [pc, #152]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_ADC_MspInit+0x4dc>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001672:	f004 f9b3 	bl	80059dc <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 8001678:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <HAL_ADC_MspInit+0x4f4>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 800167e:	2227      	movs	r2, #39	@ 0x27
 8001680:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 8001696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169a:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 800169e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 80016a6:	2220      	movs	r2, #32
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80016b0:	480f      	ldr	r0, [pc, #60]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 80016b2:	f003 feab 	bl	800540c <HAL_DMA_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 80016bc:	f000 fe3a 	bl	8002334 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 80016c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_ADC_MspInit+0x4f0>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80016cc:	bf00      	nop
 80016ce:	3798      	adds	r7, #152	@ 0x98
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	50000500 	.word	0x50000500
 80016d8:	20000464 	.word	0x20000464
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400
 80016e4:	200003a0 	.word	0x200003a0
 80016e8:	40020044 	.word	0x40020044
 80016ec:	50000600 	.word	0x50000600
 80016f0:	20000400 	.word	0x20000400
 80016f4:	40020058 	.word	0x40020058

080016f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_DMA_Init+0x60>)
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <MX_DMA_Init+0x60>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6493      	str	r3, [r2, #72]	@ 0x48
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <MX_DMA_Init+0x60>)
 800170c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_DMA_Init+0x60>)
 8001718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171a:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <MX_DMA_Init+0x60>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6493      	str	r3, [r2, #72]	@ 0x48
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <MX_DMA_Init+0x60>)
 8001724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2010      	movs	r0, #16
 8001734:	f003 fe35 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001738:	2010      	movs	r0, #16
 800173a:	f003 fe4c 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2011      	movs	r0, #17
 8001744:	f003 fe2d 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001748:	2011      	movs	r0, #17
 800174a:	f003 fe44 	bl	80053d6 <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f007 fc71 	bl	8009050 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 800176e:	2100      	movs	r1, #0
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f007 fc6d 	bl	8009050 <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start_IT(timer16);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f007 fa1c 	bl	8008bb4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(timer17);
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f007 fa19 	bl	8008bb4 <HAL_TIM_Base_Start_IT>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001798:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <processarCaptura+0xb8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <processarCaptura+0x2c>
    {	overflow1 =0;
 80017a0:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <processarCaptura+0xbc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    	valorCaptura1 = htim->Instance->CCR1;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ac:	4a27      	ldr	r2, [pc, #156]	@ (800184c <processarCaptura+0xc0>)
 80017ae:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 80017b0:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <processarCaptura+0xb8>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
        overflow1 =0;
    }
}
 80017b6:	e03e      	b.n	8001836 <processarCaptura+0xaa>
        valorCaptura2 = htim->Instance -> CCR1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017be:	4a24      	ldr	r2, [pc, #144]	@ (8001850 <processarCaptura+0xc4>)
 80017c0:	6013      	str	r3, [r2, #0]
        valorCaptura2 += contadorMaximo*overflow1;
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <processarCaptura+0xc8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <processarCaptura+0xbc>)
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <processarCaptura+0xc4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <processarCaptura+0xc4>)
 80017d8:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <processarCaptura+0xc4>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <processarCaptura+0xc0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <processarCaptura+0xcc>)
 80017e6:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <processarCaptura+0xd0>)
 80017ea:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <processarCaptura+0xcc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80017fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001860 <processarCaptura+0xd4>
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <processarCaptura+0xb8>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
        overflow1 =0;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <processarCaptura+0xbc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000047c 	.word	0x2000047c
 8001848:	20000488 	.word	0x20000488
 800184c:	20000468 	.word	0x20000468
 8001850:	2000046c 	.word	0x2000046c
 8001854:	20000000 	.word	0x20000000
 8001858:	20000478 	.word	0x20000478
 800185c:	47c35000 	.word	0x47c35000
 8001860:	41a347ae 	.word	0x41a347ae

08001864 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8001870:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <processarCaptura2+0xb8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10b      	bne.n	8001890 <processarCaptura2+0x2c>
    {	overflow2 =0;
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <processarCaptura2+0xbc>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    	valorCaptura3 = htim->Instance->CCR1;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001884:	4a27      	ldr	r2, [pc, #156]	@ (8001924 <processarCaptura2+0xc0>)
 8001886:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001888:	4b24      	ldr	r3, [pc, #144]	@ (800191c <processarCaptura2+0xb8>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
        overflow2 =0;
    }
}
 800188e:	e03e      	b.n	800190e <processarCaptura2+0xaa>
        valorCaptura4 = htim->Instance -> CCR1;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001896:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <processarCaptura2+0xc4>)
 8001898:	6013      	str	r3, [r2, #0]
        valorCaptura4 += contadorMaximo*overflow2;
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <processarCaptura2+0xc8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <processarCaptura2+0xbc>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <processarCaptura2+0xc4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <processarCaptura2+0xc4>)
 80018b0:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <processarCaptura2+0xc4>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <processarCaptura2+0xc0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <processarCaptura2+0xcc>)
 80018be:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <processarCaptura2+0xd0>)
 80018c2:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <processarCaptura2+0xcc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80018d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001938 <processarCaptura2+0xd4>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <processarCaptura2+0xb8>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
        overflow2 =0;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <processarCaptura2+0xbc>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000484 	.word	0x20000484
 8001920:	2000048c 	.word	0x2000048c
 8001924:	20000470 	.word	0x20000470
 8001928:	20000474 	.word	0x20000474
 800192c:	20000000 	.word	0x20000000
 8001930:	20000480 	.word	0x20000480
 8001934:	47c35000 	.word	0x47c35000
 8001938:	41a347ae 	.word	0x41a347ae

0800193c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d104      	bne.n	8001956 <HAL_TIM_IC_CaptureCallback+0x1a>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 800194c:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x38>)
 800194e:	490a      	ldr	r1, [pc, #40]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff1b 	bl	800178c <processarCaptura>
    }
    if (htim == &htim17) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x40>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d104      	bne.n	8001968 <HAL_TIM_IC_CaptureCallback+0x2c>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001960:	4908      	ldr	r1, [pc, #32]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff7e 	bl	8001864 <processarCaptura2>

    }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000970 	.word	0x20000970
 8001974:	20000498 	.word	0x20000498
 8001978:	20000490 	.word	0x20000490
 800197c:	200009bc 	.word	0x200009bc
 8001980:	2000049c 	.word	0x2000049c
 8001984:	20000494 	.word	0x20000494

08001988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a3a      	ldr	r2, [pc, #232]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b6:	4b35      	ldr	r3, [pc, #212]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a34      	ldr	r2, [pc, #208]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019bc:	f043 0320 	orr.w	r3, r3, #32
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a28      	ldr	r2, [pc, #160]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <MX_GPIO_Init+0x104>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001a04:	4822      	ldr	r0, [pc, #136]	@ (8001a90 <MX_GPIO_Init+0x108>)
 8001a06:	f004 f96b 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a14:	f004 f964 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4819      	ldr	r0, [pc, #100]	@ (8001a94 <MX_GPIO_Init+0x10c>)
 8001a30:	f003 ffd4 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001a34:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4810      	ldr	r0, [pc, #64]	@ (8001a90 <MX_GPIO_Init+0x108>)
 8001a4e:	f003 ffc5 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 8001a52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a6e:	f003 ffb5 	bl	80059dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2028      	movs	r0, #40	@ 0x28
 8001a78:	f003 fc93 	bl	80053a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7c:	2028      	movs	r0, #40	@ 0x28
 8001a7e:	f003 fcaa 	bl	80053d6 <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	@ 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800

08001a98 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b10 <MX_I2C2_Init+0x78>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b14 <MX_I2C2_Init+0x7c>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001aba:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad2:	480e      	ldr	r0, [pc, #56]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ad4:	f004 f93f 	bl	8005d56 <HAL_I2C_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ade:	f000 fc29 	bl	8002334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001ae6:	f005 ff45 	bl	8007974 <HAL_I2CEx_ConfigAnalogFilter>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001af0:	f000 fc20 	bl	8002334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001af4:	2100      	movs	r1, #0
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_I2C2_Init+0x74>)
 8001af8:	f005 ff87 	bl	8007a0a <HAL_I2CEx_ConfigDigitalFilter>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b02:	f000 fc17 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200004a0 	.word	0x200004a0
 8001b10:	40005800 	.word	0x40005800
 8001b14:	40b285c2 	.word	0x40b285c2

08001b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0a0      	sub	sp, #128	@ 0x80
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	2254      	movs	r2, #84	@ 0x54
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f009 fdb5 	bl	800b6a8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc0 <HAL_I2C_MspInit+0x1a8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	f040 80b6 	bne.w	8001cb6 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b52:	f107 0318 	add.w	r3, r7, #24
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fd86 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b62:	f000 fbe7 	bl	8002334 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a56      	ldr	r2, [pc, #344]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a50      	ldr	r2, [pc, #320]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001b96:	2310      	movs	r3, #16
 8001b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9a:	2312      	movs	r3, #18
 8001b9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4845      	ldr	r0, [pc, #276]	@ (8001cc8 <HAL_I2C_MspInit+0x1b0>)
 8001bb2:	f003 ff13 	bl	80059dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd6:	f003 ff01 	bl	80059dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bda:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a39      	ldr	r2, [pc, #228]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001be0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_I2C_MspInit+0x1ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001bf4:	4a36      	ldr	r2, [pc, #216]	@ (8001cd0 <HAL_I2C_MspInit+0x1b8>)
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001bfa:	2212      	movs	r2, #18
 8001bfc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c0c:	2280      	movs	r2, #128	@ 0x80
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001c28:	4828      	ldr	r0, [pc, #160]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c2a:	f003 fbef 	bl	800540c <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001c34:	f000 fb7e 	bl	8002334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a24      	ldr	r2, [pc, #144]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ccc <HAL_I2C_MspInit+0x1b4>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c46:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <HAL_I2C_MspInit+0x1c0>)
 8001c48:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c4c:	2213      	movs	r2, #19
 8001c4e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c50:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c52:	2210      	movs	r2, #16
 8001c54:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c74:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001c7a:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c7c:	f003 fbc6 	bl	800540c <HAL_DMA_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001c86:	f000 fb55 	bl	8002334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c90:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <HAL_I2C_MspInit+0x1bc>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2021      	movs	r0, #33	@ 0x21
 8001c9c:	f003 fb81 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ca0:	2021      	movs	r0, #33	@ 0x21
 8001ca2:	f003 fb98 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2022      	movs	r0, #34	@ 0x22
 8001cac:	f003 fb79 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001cb0:	2022      	movs	r0, #34	@ 0x22
 8001cb2:	f003 fb90 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3780      	adds	r7, #128	@ 0x80
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40005800 	.word	0x40005800
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	200004f4 	.word	0x200004f4
 8001cd0:	4002006c 	.word	0x4002006c
 8001cd4:	20000554 	.word	0x20000554
 8001cd8:	40020080 	.word	0x40020080

08001cdc <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	70fb      	strb	r3, [r7, #3]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70bb      	strb	r3, [r7, #2]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001cfa:	4a53      	ldr	r2, [pc, #332]	@ (8001e48 <lcdInit+0x16c>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b50      	ldr	r3, [pc, #320]	@ (8001e48 <lcdInit+0x16c>)
 8001d08:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8001e48 <lcdInit+0x16c>)
 8001d0c:	78bb      	ldrb	r3, [r7, #2]
 8001d0e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <lcdInit+0x16c>)
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001d16:	4b4c      	ldr	r3, [pc, #304]	@ (8001e48 <lcdInit+0x16c>)
 8001d18:	2208      	movs	r2, #8
 8001d1a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e4c <lcdInit+0x170>)
 8001d1e:	2234      	movs	r2, #52	@ 0x34
 8001d20:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001d22:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <lcdInit+0x170>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <lcdInit+0x170>)
 8001d28:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001d2a:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <lcdInit+0x170>)
 8001d2c:	2230      	movs	r2, #48	@ 0x30
 8001d2e:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	737b      	strb	r3, [r7, #13]
 8001d34:	e02f      	b.n	8001d96 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <lcdInit+0x16c>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <lcdInit+0x16c>)
 8001d3c:	799b      	ldrb	r3, [r3, #6]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2303      	movs	r3, #3
 8001d42:	4a42      	ldr	r2, [pc, #264]	@ (8001e4c <lcdInit+0x170>)
 8001d44:	f004 f8a2 	bl	8005e8c <HAL_I2C_Master_Transmit_DMA>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <lcdInit+0x76>
            return -1;
 8001d4e:	23ff      	movs	r3, #255	@ 0xff
 8001d50:	e076      	b.n	8001e40 <lcdInit+0x164>
        }

        usCont = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001d56:	e009      	b.n	8001d6c <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	81fa      	strh	r2, [r7, #14]
 8001d5e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d60:	d101      	bne.n	8001d66 <lcdInit+0x8a>
        		return -1;
 8001d62:	23ff      	movs	r3, #255	@ 0xff
 8001d64:	e06c      	b.n	8001e40 <lcdInit+0x164>
        	HAL_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f001 fda6 	bl	80038b8 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001d6c:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <lcdInit+0x16c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fa7c 	bl	800626e <HAL_I2C_GetState>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d1ed      	bne.n	8001d58 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d103      	bne.n	8001d8a <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f001 fd98 	bl	80038b8 <HAL_Delay>
 8001d88:	e002      	b.n	8001d90 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f001 fd94 	bl	80038b8 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	3301      	adds	r3, #1
 8001d94:	737b      	strb	r3, [r7, #13]
 8001d96:	7b7b      	ldrb	r3, [r7, #13]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d9cc      	bls.n	8001d36 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <lcdInit+0x170>)
 8001d9e:	222c      	movs	r2, #44	@ 0x2c
 8001da0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <lcdInit+0x170>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <lcdInit+0x170>)
 8001da8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <lcdInit+0x170>)
 8001dac:	2228      	movs	r2, #40	@ 0x28
 8001dae:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <lcdInit+0x16c>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <lcdInit+0x16c>)
 8001db6:	799b      	ldrb	r3, [r3, #6]
 8001db8:	4619      	mov	r1, r3
 8001dba:	2303      	movs	r3, #3
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <lcdInit+0x170>)
 8001dbe:	f004 f865 	bl	8005e8c <HAL_I2C_Master_Transmit_DMA>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <lcdInit+0xf0>
        return -1;
 8001dc8:	23ff      	movs	r3, #255	@ 0xff
 8001dca:	e039      	b.n	8001e40 <lcdInit+0x164>
    }

    usCont = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001dd0:	e009      	b.n	8001de6 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	81fa      	strh	r2, [r7, #14]
 8001dd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8001dda:	d101      	bne.n	8001de0 <lcdInit+0x104>
    		return -1;
 8001ddc:	23ff      	movs	r3, #255	@ 0xff
 8001dde:	e02f      	b.n	8001e40 <lcdInit+0x164>
    	HAL_Delay(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f001 fd69 	bl	80038b8 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <lcdInit+0x16c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fa3f 	bl	800626e <HAL_I2C_GetState>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d1ed      	bne.n	8001dd2 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001df6:	7b3b      	ldrb	r3, [r7, #12]
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <lcdInit+0x16c>)
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d904      	bls.n	8001e12 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001e08:	7b3b      	ldrb	r3, [r7, #12]
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 f8fd 	bl	8002018 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2001      	movs	r0, #1
 8001e22:	f000 f815 	bl	8001e50 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001e26:	2101      	movs	r1, #1
 8001e28:	2007      	movs	r0, #7
 8001e2a:	f000 f811 	bl	8001e50 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2002      	movs	r0, #2
 8001e32:	f000 f80d 	bl	8001e50 <lcdCommand>
    lcdCursorHome();
 8001e36:	2101      	movs	r1, #1
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f000 f809 	bl	8001e50 <lcdCommand>

    return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200005bc 	.word	0x200005bc
 8001e4c:	200005b4 	.word	0x200005b4

08001e50 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d064      	beq.n	8001f34 <lcdCommand+0xe4>
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	f040 80aa 	bne.w	8001fc4 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	d85a      	bhi.n	8001f2e <lcdCommand+0xde>
 8001e78:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <lcdCommand+0x30>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001ea1 	.word	0x08001ea1
 8001e84:	08001ed1 	.word	0x08001ed1
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	08001ec1 	.word	0x08001ec1
 8001e90:	08001eeb 	.word	0x08001eeb
 8001e94:	08001f15 	.word	0x08001f15
 8001e98:	08001f05 	.word	0x08001f05
 8001e9c:	08001f1f 	.word	0x08001f1f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8002014 <lcdCommand+0x1c4>)
 8001ea2:	7a1b      	ldrb	r3, [r3, #8]
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8002014 <lcdCommand+0x1c4>)
 8001eac:	721a      	strb	r2, [r3, #8]
                    break;
 8001eae:	e040      	b.n	8001f32 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001eb0:	4b58      	ldr	r3, [pc, #352]	@ (8002014 <lcdCommand+0x1c4>)
 8001eb2:	7a1b      	ldrb	r3, [r3, #8]
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b56      	ldr	r3, [pc, #344]	@ (8002014 <lcdCommand+0x1c4>)
 8001ebc:	721a      	strb	r2, [r3, #8]
                    break;
 8001ebe:	e038      	b.n	8001f32 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001ec0:	4b54      	ldr	r3, [pc, #336]	@ (8002014 <lcdCommand+0x1c4>)
 8001ec2:	7a1b      	ldrb	r3, [r3, #8]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b52      	ldr	r3, [pc, #328]	@ (8002014 <lcdCommand+0x1c4>)
 8001ecc:	721a      	strb	r2, [r3, #8]
                    break;
 8001ece:	e030      	b.n	8001f32 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001ed4:	f107 030f 	add.w	r3, r7, #15
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f89c 	bl	8002018 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f001 fce9 	bl	80038b8 <HAL_Delay>
                        return 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e090      	b.n	800200c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001eea:	2302      	movs	r3, #2
 8001eec:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001eee:	f107 030f 	add.w	r3, r7, #15
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 f88f 	bl	8002018 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001efa:	2002      	movs	r0, #2
 8001efc:	f001 fcdc 	bl	80038b8 <HAL_Delay>
                        return 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e083      	b.n	800200c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001f04:	4b43      	ldr	r3, [pc, #268]	@ (8002014 <lcdCommand+0x1c4>)
 8001f06:	7a5b      	ldrb	r3, [r3, #9]
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <lcdCommand+0x1c4>)
 8001f10:	725a      	strb	r2, [r3, #9]
                    break;
 8001f12:	e00e      	b.n	8001f32 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001f14:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <lcdCommand+0x1c4>)
 8001f16:	7a5a      	ldrb	r2, [r3, #9]
 8001f18:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <lcdCommand+0x1c4>)
 8001f1a:	725a      	strb	r2, [r3, #9]
                    break;
 8001f1c:	e009      	b.n	8001f32 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <lcdCommand+0x1c4>)
 8001f20:	7a5b      	ldrb	r3, [r3, #9]
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <lcdCommand+0x1c4>)
 8001f2a:	725a      	strb	r2, [r3, #9]
                    break;
 8001f2c:	e001      	b.n	8001f32 <lcdCommand+0xe2>

                default:
                    return -1;
 8001f2e:	23ff      	movs	r3, #255	@ 0xff
 8001f30:	e06c      	b.n	800200c <lcdCommand+0x1bc>
            }

            break;
 8001f32:	e049      	b.n	8001fc8 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d840      	bhi.n	8001fbe <lcdCommand+0x16e>
 8001f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <lcdCommand+0xf4>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f65 	.word	0x08001f65
 8001f48:	08001fbf 	.word	0x08001fbf
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001fbf 	.word	0x08001fbf
 8001f58:	08001fa5 	.word	0x08001fa5
 8001f5c:	08001f95 	.word	0x08001f95
 8001f60:	08001faf 	.word	0x08001faf
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001f64:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <lcdCommand+0x1c4>)
 8001f66:	7a1b      	ldrb	r3, [r3, #8]
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b29      	ldr	r3, [pc, #164]	@ (8002014 <lcdCommand+0x1c4>)
 8001f70:	721a      	strb	r2, [r3, #8]
                    break;
 8001f72:	e026      	b.n	8001fc2 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <lcdCommand+0x1c4>)
 8001f76:	7a1b      	ldrb	r3, [r3, #8]
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <lcdCommand+0x1c4>)
 8001f80:	721a      	strb	r2, [r3, #8]
                    break;
 8001f82:	e01e      	b.n	8001fc2 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <lcdCommand+0x1c4>)
 8001f86:	7a1b      	ldrb	r3, [r3, #8]
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <lcdCommand+0x1c4>)
 8001f90:	721a      	strb	r2, [r3, #8]
                    break;
 8001f92:	e016      	b.n	8001fc2 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <lcdCommand+0x1c4>)
 8001f96:	7a5b      	ldrb	r3, [r3, #9]
 8001f98:	f023 0302 	bic.w	r3, r3, #2
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <lcdCommand+0x1c4>)
 8001fa0:	725a      	strb	r2, [r3, #9]
                    break;
 8001fa2:	e00e      	b.n	8001fc2 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <lcdCommand+0x1c4>)
 8001fa6:	7a5a      	ldrb	r2, [r3, #9]
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <lcdCommand+0x1c4>)
 8001faa:	725a      	strb	r2, [r3, #9]
                    break;
 8001fac:	e009      	b.n	8001fc2 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <lcdCommand+0x1c4>)
 8001fb0:	7a5b      	ldrb	r3, [r3, #9]
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <lcdCommand+0x1c4>)
 8001fba:	725a      	strb	r2, [r3, #9]
                    break;
 8001fbc:	e001      	b.n	8001fc2 <lcdCommand+0x172>

                default:
                    return -1;
 8001fbe:	23ff      	movs	r3, #255	@ 0xff
 8001fc0:	e024      	b.n	800200c <lcdCommand+0x1bc>
            }

            break;
 8001fc2:	e001      	b.n	8001fc8 <lcdCommand+0x178>

        default:
            return -1;
 8001fc4:	23ff      	movs	r3, #255	@ 0xff
 8001fc6:	e021      	b.n	800200c <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	dc16      	bgt.n	8001ffc <lcdCommand+0x1ac>
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	da0d      	bge.n	8001fee <lcdCommand+0x19e>
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d004      	beq.n	8001fe0 <lcdCommand+0x190>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dd10      	ble.n	8001ffc <lcdCommand+0x1ac>
 8001fda:	3b03      	subs	r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d80d      	bhi.n	8001ffc <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <lcdCommand+0x1c4>)
 8001fe2:	7a1b      	ldrb	r3, [r3, #8]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	73fb      	strb	r3, [r7, #15]
            break;
 8001fec:	e007      	b.n	8001ffe <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <lcdCommand+0x1c4>)
 8001ff0:	7a5b      	ldrb	r3, [r3, #9]
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8001ffa:	e000      	b.n	8001ffe <lcdCommand+0x1ae>

        default:
            break;
 8001ffc:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001ffe:	f107 030f 	add.w	r3, r7, #15
 8002002:	4619      	mov	r1, r3
 8002004:	2000      	movs	r0, #0
 8002006:	f000 f807 	bl	8002018 <lcdWriteByte>
 800200a:	4603      	mov	r3, r0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200005bc 	.word	0x200005bc

08002018 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8002024:	4b38      	ldr	r3, [pc, #224]	@ (8002108 <lcdWriteByte+0xf0>)
 8002026:	79da      	ldrb	r2, [r3, #7]
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4313      	orrs	r3, r2
 800202c:	b2da      	uxtb	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f023 030f 	bic.w	r3, r3, #15
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b32      	ldr	r3, [pc, #200]	@ (800210c <lcdWriteByte+0xf4>)
 8002044:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8002046:	4b31      	ldr	r3, [pc, #196]	@ (800210c <lcdWriteByte+0xf4>)
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b30      	ldr	r3, [pc, #192]	@ (800210c <lcdWriteByte+0xf4>)
 800204c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800204e:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <lcdWriteByte+0xf0>)
 8002050:	79da      	ldrb	r2, [r3, #7]
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4313      	orrs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	b25a      	sxtb	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b25b      	sxtb	r3, r3
 8002060:	f023 030f 	bic.w	r3, r3, #15
 8002064:	b25b      	sxtb	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <lcdWriteByte+0xf4>)
 800206e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <lcdWriteByte+0xf0>)
 8002072:	79da      	ldrb	r2, [r3, #7]
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4313      	orrs	r3, r2
 8002078:	b2da      	uxtb	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <lcdWriteByte+0xf4>)
 800208e:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8002090:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <lcdWriteByte+0xf4>)
 8002092:	78da      	ldrb	r2, [r3, #3]
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <lcdWriteByte+0xf4>)
 8002096:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8002098:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <lcdWriteByte+0xf0>)
 800209a:	79da      	ldrb	r2, [r3, #7]
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	b25a      	sxtb	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <lcdWriteByte+0xf4>)
 80020b4:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <lcdWriteByte+0xf0>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <lcdWriteByte+0xf0>)
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	4619      	mov	r1, r3
 80020c0:	2306      	movs	r3, #6
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <lcdWriteByte+0xf4>)
 80020c4:	f003 fee2 	bl	8005e8c <HAL_I2C_Master_Transmit_DMA>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <lcdWriteByte+0xba>
        return -1;
 80020ce:	23ff      	movs	r3, #255	@ 0xff
 80020d0:	e015      	b.n	80020fe <lcdWriteByte+0xe6>
    }

    usCont = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80020d6:	e009      	b.n	80020ec <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	81fa      	strh	r2, [r7, #14]
 80020de:	2bc8      	cmp	r3, #200	@ 0xc8
 80020e0:	d101      	bne.n	80020e6 <lcdWriteByte+0xce>
    		return -1;
 80020e2:	23ff      	movs	r3, #255	@ 0xff
 80020e4:	e00b      	b.n	80020fe <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f001 fbe6 	bl	80038b8 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <lcdWriteByte+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 f8bc 	bl	800626e <HAL_I2C_GetState>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d1ed      	bne.n	80020d8 <lcdWriteByte+0xc0>
    }

    return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200005bc 	.word	0x200005bc
 800210c:	200005b4 	.word	0x200005b4

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002114:	f001 fb5f 	bl	80037d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002118:	f000 f87a 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f7ff fc34 	bl	8001988 <MX_GPIO_Init>
  MX_DMA_Init();
 8002120:	f7ff faea 	bl	80016f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002124:	f001 fa8c 	bl	8003640 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8002128:	f000 fec4 	bl	8002eb4 <MX_TIM1_Init>
  MX_I2C2_Init();
 800212c:	f7ff fcb4 	bl	8001a98 <MX_I2C2_Init>
  MX_ADC3_Init();
 8002130:	f7fe fefe 	bl	8000f30 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002134:	f7fe fe06 	bl	8000d44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002138:	f7fe fe88 	bl	8000e4c <MX_ADC2_Init>
  MX_ADC4_Init();
 800213c:	f7fe ff7c 	bl	8001038 <MX_ADC4_Init>
  MX_ADC5_Init();
 8002140:	f7fe ffec 	bl	800111c <MX_ADC5_Init>
  MX_TIM16_Init();
 8002144:	f001 f896 	bl	8003274 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002148:	f001 f8e0 	bl	800330c <MX_TIM17_Init>
  MX_TIM6_Init();
 800214c:	f001 f80a 	bl	8003164 <MX_TIM6_Init>
  MX_TIM15_Init();
 8002150:	f001 f83e 	bl	80031d0 <MX_TIM15_Init>
  MX_TIM2_Init();
 8002154:	f000 ff6a 	bl	800302c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002158:	f000 ffb6 	bl	80030c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 800215c:	481d      	ldr	r0, [pc, #116]	@ (80021d4 <main+0xc4>)
 800215e:	f000 f8ef 	bl	8002340 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8002162:	491d      	ldr	r1, [pc, #116]	@ (80021d8 <main+0xc8>)
 8002164:	481d      	ldr	r0, [pc, #116]	@ (80021dc <main+0xcc>)
 8002166:	f7ff faf9 	bl	800175c <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 800216a:	481d      	ldr	r0, [pc, #116]	@ (80021e0 <main+0xd0>)
 800216c:	f000 fba6 	bl	80028bc <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8002170:	481c      	ldr	r0, [pc, #112]	@ (80021e4 <main+0xd4>)
 8002172:	f000 fbbf 	bl	80028f4 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8002176:	481c      	ldr	r0, [pc, #112]	@ (80021e8 <main+0xd8>)
 8002178:	f000 fbd8 	bl	800292c <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 800217c:	481b      	ldr	r0, [pc, #108]	@ (80021ec <main+0xdc>)
 800217e:	f000 fbf1 	bl	8002964 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8002182:	481b      	ldr	r0, [pc, #108]	@ (80021f0 <main+0xe0>)
 8002184:	f000 fc0a 	bl	800299c <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8002188:	2310      	movs	r3, #16
 800218a:	2202      	movs	r2, #2
 800218c:	2127      	movs	r1, #39	@ 0x27
 800218e:	4819      	ldr	r0, [pc, #100]	@ (80021f4 <main+0xe4>)
 8002190:	f7ff fda4 	bl	8001cdc <lcdInit>
  HAL_TIM_Base_Start_IT(&htim15);
 8002194:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <main+0xe8>)
 8002196:	f006 fd0d 	bl	8008bb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800219a:	4818      	ldr	r0, [pc, #96]	@ (80021fc <main+0xec>)
 800219c:	f006 fd0a 	bl	8008bb4 <HAL_TIM_Base_Start_IT>
  vPidInit(3.2, 0.22, 0, 1000, 100);
 80021a0:	eddf 1a17 	vldr	s3, [pc, #92]	@ 8002200 <main+0xf0>
 80021a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021a8:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8002204 <main+0xf4>
 80021ac:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002208 <main+0xf8>
 80021b0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800220c <main+0xfc>
 80021b4:	f000 f952 	bl	800245c <vPidInit>
      vPidInit2(3.5, 0.5, 0, 1000, 100);
 80021b8:	eddf 1a11 	vldr	s3, [pc, #68]	@ 8002200 <main+0xf0>
 80021bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021c0:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8002204 <main+0xf4>
 80021c4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80021c8:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 80021cc:	f000 fa3a 	bl	8002644 <vPidInit2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	//vPrintMotorSpeed(0, 0);
    while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <main+0xc0>
 80021d4:	200007f4 	.word	0x200007f4
 80021d8:	200009bc 	.word	0x200009bc
 80021dc:	20000970 	.word	0x20000970
 80021e0:	20000064 	.word	0x20000064
 80021e4:	200000d0 	.word	0x200000d0
 80021e8:	2000013c 	.word	0x2000013c
 80021ec:	200001a8 	.word	0x200001a8
 80021f0:	20000214 	.word	0x20000214
 80021f4:	200004a0 	.word	0x200004a0
 80021f8:	20000924 	.word	0x20000924
 80021fc:	2000088c 	.word	0x2000088c
 8002200:	42c80000 	.word	0x42c80000
 8002204:	00000000 	.word	0x00000000
 8002208:	3e6147ae 	.word	0x3e6147ae
 800220c:	404ccccd 	.word	0x404ccccd

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	@ 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0318 	add.w	r3, r7, #24
 800221a:	2238      	movs	r2, #56	@ 0x38
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f009 fa42 	bl	800b6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002232:	2000      	movs	r0, #0
 8002234:	f005 fc36 	bl	8007aa4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002242:	2340      	movs	r3, #64	@ 0x40
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002246:	2302      	movs	r3, #2
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800224e:	2304      	movs	r3, #4
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002252:	2355      	movs	r3, #85	@ 0x55
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002256:	2302      	movs	r3, #2
 8002258:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800225a:	2302      	movs	r3, #2
 800225c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800225e:	2302      	movs	r3, #2
 8002260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	4618      	mov	r0, r3
 8002268:	f005 fcd0 	bl	8007c0c <HAL_RCC_OscConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002272:	f000 f85f 	bl	8002334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2303      	movs	r3, #3
 800227c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2104      	movs	r1, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f005 ffce 	bl	8008230 <HAL_RCC_ClockConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800229a:	f000 f84b 	bl	8002334 <Error_Handler>
  }
}
 800229e:	bf00      	nop
 80022a0:	3750      	adds	r7, #80	@ 0x50
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a18      	ldr	r2, [pc, #96]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 80022b8:	f000 fc30 	bl	8002b1c <vLineSensorPIDControl>
	}
	if (htim == &htim3){
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x20>
		ajustaVelocidadeRodas();
 80022c4:	f000 fab2 	bl	800282c <ajustaVelocidadeRodas>
		}
	if (htim == &htim16){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a14      	ldr	r2, [pc, #80]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10c      	bne.n	80022ea <HAL_TIM_PeriodElapsedCallback+0x42>
		overflow1 +=1;
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022d8:	6013      	str	r3, [r2, #0]
		if(overflow1 > 5){
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	dd03      	ble.n	80022ea <HAL_TIM_PeriodElapsedCallback+0x42>
			velocidadeRodaEsquerda = 0;
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
		}
		}
	if (htim == &htim17){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10c      	bne.n	800230c <HAL_TIM_PeriodElapsedCallback+0x64>
		overflow2 +=1;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	4a0c      	ldr	r2, [pc, #48]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022fa:	6013      	str	r3, [r2, #0]
		if(overflow2 > 5){
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b05      	cmp	r3, #5
 8002302:	dd03      	ble.n	800230c <HAL_TIM_PeriodElapsedCallback+0x64>
			velocidadeRodaDireita = 0;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
		}
		}

}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000924 	.word	0x20000924
 8002318:	2000088c 	.word	0x2000088c
 800231c:	20000970 	.word	0x20000970
 8002320:	20000488 	.word	0x20000488
 8002324:	20000498 	.word	0x20000498
 8002328:	200009bc 	.word	0x200009bc
 800232c:	2000048c 	.word	0x2000048c
 8002330:	2000049c 	.word	0x2000049c

08002334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <Error_Handler+0x8>

08002340 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8002348:	4a15      	ldr	r2, [pc, #84]	@ (80023a0 <vMotorInit+0x60>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <vMotorInit+0x60>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f006 fd07 	bl	8008d68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 800235a:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <vMotorInit+0x60>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2104      	movs	r1, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fd01 	bl	8008d68 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800236c:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <vMotorInit+0x64>)
 800236e:	f003 fcb7 	bl	8005ce0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <vMotorInit+0x64>)
 800237a:	f003 fcb1 	bl	8005ce0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <vMotorInit+0x64>)
 8002384:	f003 fcac 	bl	8005ce0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800238e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002392:	f003 fca5 	bl	8005ce0 <HAL_GPIO_WritePin>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200005c8 	.word	0x200005c8
 80023a4:	48000400 	.word	0x48000400

080023a8 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80023b2:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 80023b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002454 <vSetRodasDC+0xac>
 80023be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ca:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <vSetRodasDC+0xb0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002454 <vSetRodasDC+0xac>
 80023e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <vSetRodasDC+0xb0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f8:	ee17 2a90 	vmov	r2, s15
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 80023fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002402:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002454 <vSetRodasDC+0xac>
 8002406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800240e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <vSetRodasDC+0xb0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241c:	ee17 2a90 	vmov	r2, s15
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8002422:	edd7 7a00 	vldr	s15, [r7]
 8002426:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002454 <vSetRodasDC+0xac>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <vSetRodasDC+0xb0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002440:	ee17 2a90 	vmov	r2, s15
 8002444:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	447a0000 	.word	0x447a0000
 8002458:	200005c8 	.word	0x200005c8

0800245c <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
void vPidInit(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	ed87 0a05 	vstr	s0, [r7, #20]
 8002466:	edc7 0a04 	vstr	s1, [r7, #16]
 800246a:	ed87 1a03 	vstr	s2, [r7, #12]
 800246e:	4603      	mov	r3, r0
 8002470:	edc7 1a01 	vstr	s3, [r7, #4]
 8002474:	817b      	strh	r3, [r7, #10]
	xPidConfig.fKp = fKp;
 8002476:	4a15      	ldr	r2, [pc, #84]	@ (80024cc <vPidInit+0x70>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	6013      	str	r3, [r2, #0]
	xPidConfig.fKd = fKd;
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <vPidInit+0x70>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6093      	str	r3, [r2, #8]
	xPidConfig.fKi = fKi;
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <vPidInit+0x70>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	6053      	str	r3, [r2, #4]
	xPidConfig.fError_previous = 0;
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <vPidInit+0x70>)
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
	xPidConfig.fError_sum = 0.0;
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <vPidInit+0x70>)
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002498:	897b      	ldrh	r3, [r7, #10]
 800249a:	f242 7273 	movw	r2, #10099	@ 0x2773
 800249e:	4293      	cmp	r3, r2
 80024a0:	d902      	bls.n	80024a8 <vPidInit+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 80024a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80024a6:	817b      	strh	r3, [r7, #10]

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 80024a8:	897b      	ldrh	r3, [r7, #10]
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <vPidInit+0x74>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <vPidInit+0x70>)
 80024b6:	829a      	strh	r2, [r3, #20]

	xPidConfig.fOutputSaturation = fOutputSaturation;
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <vPidInit+0x70>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6193      	str	r3, [r2, #24]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200005cc 	.word	0x200005cc
 80024d0:	51eb851f 	.word	0x51eb851f
 80024d4:	00000000 	.word	0x00000000

080024d8 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	ed87 0a01 	vstr	s0, [r7, #4]
 80024e2:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 80024e6:	ed97 7a00 	vldr	s14, [r7]
 80024ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f2:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 80024f6:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <fPidUpdateData+0x160>)
 80024f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024fc:	4b4f      	ldr	r3, [pc, #316]	@ (800263c <fPidUpdateData+0x164>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	4a4f      	ldr	r2, [pc, #316]	@ (8002640 <fPidUpdateData+0x168>)
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002516:	4b48      	ldr	r3, [pc, #288]	@ (8002638 <fPidUpdateData+0x160>)
 8002518:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 800251c:	4b47      	ldr	r3, [pc, #284]	@ (800263c <fPidUpdateData+0x164>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	4a47      	ldr	r2, [pc, #284]	@ (8002640 <fPidUpdateData+0x168>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig.usIntegratorSize)
 800252a:	4b44      	ldr	r3, [pc, #272]	@ (800263c <fPidUpdateData+0x164>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	4b42      	ldr	r3, [pc, #264]	@ (800263c <fPidUpdateData+0x164>)
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <fPidUpdateData+0x164>)
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	4b3f      	ldr	r3, [pc, #252]	@ (8002638 <fPidUpdateData+0x160>)
 800253c:	8a9b      	ldrh	r3, [r3, #20]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <fPidUpdateData+0x70>
		usIntegratorCount = 0;
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <fPidUpdateData+0x164>)
 8002544:	2200      	movs	r2, #0
 8002546:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig.fError_previous);
 8002548:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <fPidUpdateData+0x160>)
 800254a:	edd3 7a03 	vldr	s15, [r3, #12]
 800254e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig.fKp * fError
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <fPidUpdateData+0x160>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	edd7 7a04 	vldr	s15, [r7, #16]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd ffb8 	bl	80004e0 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <fPidUpdateData+0x160>)
 8002576:	ed93 7a01 	vldr	s14, [r3, #4]
 800257a:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <fPidUpdateData+0x160>)
 800257c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fd ffaa 	bl	80004e0 <__aeabi_f2d>
 800258c:	a328      	add	r3, pc, #160	@ (adr r3, 8002630 <fPidUpdateData+0x158>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fd fffd 	bl	8000590 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4620      	mov	r0, r4
 800259c:	4629      	mov	r1, r5
 800259e:	f7fd fe41 	bl	8000224 <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4614      	mov	r4, r2
 80025a8:	461d      	mov	r5, r3
		 + xPidConfig.fKd * fDifference / UPDATE_RATE;
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <fPidUpdateData+0x160>)
 80025ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80025b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	ee17 0a90 	vmov	r0, s15
 80025bc:	f7fd ff90 	bl	80004e0 <__aeabi_f2d>
 80025c0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002630 <fPidUpdateData+0x158>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fe f90d 	bl	80007e4 <__aeabi_ddiv>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fd fe27 	bl	8000224 <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
	fOut = xPidConfig.fKp * fError
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe f9e9 	bl	80009b4 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	617b      	str	r3, [r7, #20]

	xPidConfig.fError_previous = fError;
 80025e6:	4a14      	ldr	r2, [pc, #80]	@ (8002638 <fPidUpdateData+0x160>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig.fOutputSaturation)
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <fPidUpdateData+0x160>)
 80025ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80025f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80025f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	dd03      	ble.n	8002608 <fPidUpdateData+0x130>
		fOut = xPidConfig.fOutputSaturation;
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <fPidUpdateData+0x160>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e009      	b.n	800261c <fPidUpdateData+0x144>
	else 
		if (fOut < 0)
 8002608:	edd7 7a05 	vldr	s15, [r7, #20]
 800260c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002614:	d502      	bpl.n	800261c <fPidUpdateData+0x144>
			fOut = 0;
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

	return fOut;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	ee07 3a90 	vmov	s15, r3
}
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	f3af 8000 	nop.w
 8002630:	9999999a 	.word	0x9999999a
 8002634:	3fb99999 	.word	0x3fb99999
 8002638:	200005cc 	.word	0x200005cc
 800263c:	20000604 	.word	0x20000604
 8002640:	20000608 	.word	0x20000608

08002644 <vPidInit2>:
void vPidInit2(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	ed87 0a05 	vstr	s0, [r7, #20]
 800264e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002652:	ed87 1a03 	vstr	s2, [r7, #12]
 8002656:	4603      	mov	r3, r0
 8002658:	edc7 1a01 	vstr	s3, [r7, #4]
 800265c:	817b      	strh	r3, [r7, #10]
	xPidConfig1.fKp = fKp;
 800265e:	4a15      	ldr	r2, [pc, #84]	@ (80026b4 <vPidInit2+0x70>)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	6013      	str	r3, [r2, #0]
	xPidConfig1.fKd = fKd;
 8002664:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <vPidInit2+0x70>)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6093      	str	r3, [r2, #8]
	xPidConfig1.fKi = fKi;
 800266a:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <vPidInit2+0x70>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6053      	str	r3, [r2, #4]
	xPidConfig1.fError_previous = 0;
 8002670:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <vPidInit2+0x70>)
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
	xPidConfig1.fError_sum = 0.0;
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <vPidInit2+0x70>)
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	f242 7273 	movw	r2, #10099	@ 0x2773
 8002686:	4293      	cmp	r3, r2
 8002688:	d902      	bls.n	8002690 <vPidInit2+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 800268a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800268e:	817b      	strh	r3, [r7, #10]

	xPidConfig1.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <vPidInit2+0x74>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b29a      	uxth	r2, r3
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <vPidInit2+0x70>)
 800269e:	829a      	strh	r2, [r3, #20]

	xPidConfig1.fOutputSaturation = fOutputSaturation;
 80026a0:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <vPidInit2+0x70>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6193      	str	r3, [r2, #24]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200005e8 	.word	0x200005e8
 80026b8:	51eb851f 	.word	0x51eb851f
 80026bc:	00000000 	.word	0x00000000

080026c0 <fPidUpdateData2>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData2(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026ca:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 80026ce:	ed97 7a00 	vldr	s14, [r7]
 80026d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig1.fError_sum = xPidConfig1.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 80026de:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <fPidUpdateData2+0x160>)
 80026e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80026e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002824 <fPidUpdateData2+0x164>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <fPidUpdateData2+0x168>)
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fe:	4b48      	ldr	r3, [pc, #288]	@ (8002820 <fPidUpdateData2+0x160>)
 8002700:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 8002704:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <fPidUpdateData2+0x164>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4a47      	ldr	r2, [pc, #284]	@ (8002828 <fPidUpdateData2+0x168>)
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig1.usIntegratorSize)
 8002712:	4b44      	ldr	r3, [pc, #272]	@ (8002824 <fPidUpdateData2+0x164>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	4b42      	ldr	r3, [pc, #264]	@ (8002824 <fPidUpdateData2+0x164>)
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <fPidUpdateData2+0x164>)
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <fPidUpdateData2+0x160>)
 8002724:	8a9b      	ldrh	r3, [r3, #20]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <fPidUpdateData2+0x70>
		usIntegratorCount = 0;
 800272a:	4b3e      	ldr	r3, [pc, #248]	@ (8002824 <fPidUpdateData2+0x164>)
 800272c:	2200      	movs	r2, #0
 800272e:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig1.fError_previous);
 8002730:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <fPidUpdateData2+0x160>)
 8002732:	edd3 7a03 	vldr	s15, [r3, #12]
 8002736:	ed97 7a04 	vldr	s14, [r7, #16]
 800273a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273e:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig1.fKp * fError
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <fPidUpdateData2+0x160>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	edd7 7a04 	vldr	s15, [r7, #16]
 800274c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002750:	ee17 0a90 	vmov	r0, s15
 8002754:	f7fd fec4 	bl	80004e0 <__aeabi_f2d>
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
		 + xPidConfig1.fKi * xPidConfig1.fError_sum * UPDATE_RATE
 800275c:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <fPidUpdateData2+0x160>)
 800275e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <fPidUpdateData2+0x160>)
 8002764:	edd3 7a04 	vldr	s15, [r3, #16]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	ee17 0a90 	vmov	r0, s15
 8002770:	f7fd feb6 	bl	80004e0 <__aeabi_f2d>
 8002774:	a328      	add	r3, pc, #160	@ (adr r3, 8002818 <fPidUpdateData2+0x158>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd ff09 	bl	8000590 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd fd4d 	bl	8000224 <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4614      	mov	r4, r2
 8002790:	461d      	mov	r5, r3
		 + xPidConfig1.fKd * fDifference / UPDATE_RATE;
 8002792:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <fPidUpdateData2+0x160>)
 8002794:	ed93 7a02 	vldr	s14, [r3, #8]
 8002798:	edd7 7a03 	vldr	s15, [r7, #12]
 800279c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a0:	ee17 0a90 	vmov	r0, s15
 80027a4:	f7fd fe9c 	bl	80004e0 <__aeabi_f2d>
 80027a8:	a31b      	add	r3, pc, #108	@ (adr r3, 8002818 <fPidUpdateData2+0x158>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f7fe f819 	bl	80007e4 <__aeabi_ddiv>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	f7fd fd33 	bl	8000224 <__adddf3>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
	fOut = xPidConfig1.fKp * fError
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe f8f5 	bl	80009b4 <__aeabi_d2f>
 80027ca:	4603      	mov	r3, r0
 80027cc:	617b      	str	r3, [r7, #20]

	xPidConfig1.fError_previous = fError;
 80027ce:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <fPidUpdateData2+0x160>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig1.fOutputSaturation)
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <fPidUpdateData2+0x160>)
 80027d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80027da:	ed97 7a05 	vldr	s14, [r7, #20]
 80027de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	dd03      	ble.n	80027f0 <fPidUpdateData2+0x130>
		fOut = xPidConfig1.fOutputSaturation;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <fPidUpdateData2+0x160>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <fPidUpdateData2+0x144>
	else
		if (fOut < 0)
 80027f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fc:	d502      	bpl.n	8002804 <fPidUpdateData2+0x144>
			fOut = 0;
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

	return fOut;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	ee07 3a90 	vmov	s15, r3
}
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	9999999a 	.word	0x9999999a
 800281c:	3fb99999 	.word	0x3fb99999
 8002820:	200005e8 	.word	0x200005e8
 8002824:	20000604 	.word	0x20000604
 8002828:	20000608 	.word	0x20000608

0800282c <ajustaVelocidadeRodas>:
void ajustaVelocidadeRodas(){
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	EsforcoD = fPidUpdateData(velocidadeRodaDireita,velocidadeDireita)/100;
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <ajustaVelocidadeRodas+0x74>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <ajustaVelocidadeRodas+0x78>)
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	eef0 0a47 	vmov.f32	s1, s14
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f7ff fe48 	bl	80024d8 <fPidUpdateData>
 8002848:	eeb0 7a40 	vmov.f32	s14, s0
 800284c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80028a8 <ajustaVelocidadeRodas+0x7c>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <ajustaVelocidadeRodas+0x80>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
	EsforcoE = fPidUpdateData2(velocidadeRodaEsquerda,velocidadeEsquerda)/100;
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <ajustaVelocidadeRodas+0x84>)
 800285c:	edd3 7a00 	vldr	s15, [r3]
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <ajustaVelocidadeRodas+0x88>)
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	eef0 0a47 	vmov.f32	s1, s14
 800286a:	eeb0 0a67 	vmov.f32	s0, s15
 800286e:	f7ff ff27 	bl	80026c0 <fPidUpdateData2>
 8002872:	eeb0 7a40 	vmov.f32	s14, s0
 8002876:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80028a8 <ajustaVelocidadeRodas+0x7c>
 800287a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <ajustaVelocidadeRodas+0x8c>)
 8002880:	edc3 7a00 	vstr	s15, [r3]
	//	EsforcoD = 0.4;
	//}
	//if(EsforcoE < 0.4) {
	//		EsforcoE = 0.4;
	//	}
	vSetRodasDC(EsforcoE, EsforcoD);
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <ajustaVelocidadeRodas+0x8c>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <ajustaVelocidadeRodas+0x80>)
 800288c:	ed93 7a00 	vldr	s14, [r3]
 8002890:	eef0 0a47 	vmov.f32	s1, s14
 8002894:	eeb0 0a67 	vmov.f32	s0, s15
 8002898:	f7ff fd86 	bl	80023a8 <vSetRodasDC>


}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000049c 	.word	0x2000049c
 80028a4:	200007d4 	.word	0x200007d4
 80028a8:	42c80000 	.word	0x42c80000
 80028ac:	2000079c 	.word	0x2000079c
 80028b0:	20000498 	.word	0x20000498
 80028b4:	200007d0 	.word	0x200007d0
 80028b8:	20000798 	.word	0x20000798

080028bc <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 80028c4:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <vLineSensor1Init+0x30>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <vLineSensor1Init+0x30>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	217f      	movs	r1, #127	@ 0x7f
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fb21 	bl	8004f18 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 80028d6:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <vLineSensor1Init+0x30>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <vLineSensor1Init+0x34>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 fc0c 	bl	80040fc <HAL_ADC_Start_DMA>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200007a0 	.word	0x200007a0
 80028f0:	200007b4 	.word	0x200007b4

080028f4 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 80028fc:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <vLineSensor2Init+0x30>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <vLineSensor2Init+0x30>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	217f      	movs	r1, #127	@ 0x7f
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fb05 	bl	8004f18 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 800290e:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <vLineSensor2Init+0x30>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <vLineSensor2Init+0x34>)
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fbf0 	bl	80040fc <HAL_ADC_Start_DMA>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200007a4 	.word	0x200007a4
 8002928:	200007b8 	.word	0x200007b8

0800292c <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8002934:	4a09      	ldr	r2, [pc, #36]	@ (800295c <vLineSensor3Init+0x30>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <vLineSensor3Init+0x30>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	217f      	movs	r1, #127	@ 0x7f
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fae9 	bl	8004f18 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <vLineSensor3Init+0x30>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	4904      	ldr	r1, [pc, #16]	@ (8002960 <vLineSensor3Init+0x34>)
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fbd4 	bl	80040fc <HAL_ADC_Start_DMA>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200007a8 	.word	0x200007a8
 8002960:	200007bc 	.word	0x200007bc

08002964 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 800296c:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <vLineSensor4Init+0x30>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <vLineSensor4Init+0x30>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	217f      	movs	r1, #127	@ 0x7f
 8002978:	4618      	mov	r0, r3
 800297a:	f002 facd 	bl	8004f18 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <vLineSensor4Init+0x30>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <vLineSensor4Init+0x34>)
 8002986:	4618      	mov	r0, r3
 8002988:	f001 fbb8 	bl	80040fc <HAL_ADC_Start_DMA>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200007ac 	.word	0x200007ac
 8002998:	200007c0 	.word	0x200007c0

0800299c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 80029a4:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <vLineSensor5Init+0x30>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 80029aa:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <vLineSensor5Init+0x30>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	217f      	movs	r1, #127	@ 0x7f
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fab1 	bl	8004f18 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <vLineSensor5Init+0x30>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4904      	ldr	r1, [pc, #16]	@ (80029d0 <vLineSensor5Init+0x34>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fb9c 	bl	80040fc <HAL_ADC_Start_DMA>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200007b0 	.word	0x200007b0
 80029d0:	200007c4 	.word	0x200007c4

080029d4 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 80029d4:	b4b0      	push	{r4, r5, r7}
 80029d6:	b091      	sub	sp, #68	@ 0x44
 80029d8:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <fLineSensorCalculatePosition+0x120>)
 80029dc:	f107 0418 	add.w	r4, r7, #24
 80029e0:	461d      	mov	r5, r3
 80029e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 80029f6:	4b40      	ldr	r3, [pc, #256]	@ (8002af8 <fLineSensorCalculatePosition+0x124>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <fLineSensorCalculatePosition+0x128>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b3f      	ldr	r3, [pc, #252]	@ (8002b00 <fLineSensorCalculatePosition+0x12c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <fLineSensorCalculatePosition+0x130>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b08 <fLineSensorCalculatePosition+0x134>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8002a14:	2300      	movs	r3, #0
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a18:	e04c      	b.n	8002ab4 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	3340      	adds	r3, #64	@ 0x40
 8002a20:	443b      	add	r3, r7
 8002a22:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a26:	4939      	ldr	r1, [pc, #228]	@ (8002b0c <fLineSensorCalculatePosition+0x138>)
 8002a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d33d      	bcc.n	8002aae <fLineSensorCalculatePosition+0xda>
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3340      	adds	r3, #64	@ 0x40
 8002a38:	443b      	add	r3, r7
 8002a3a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a3e:	4934      	ldr	r1, [pc, #208]	@ (8002b10 <fLineSensorCalculatePosition+0x13c>)
 8002a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d831      	bhi.n	8002aae <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	3340      	adds	r3, #64	@ 0x40
 8002a50:	443b      	add	r3, r7
 8002a52:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a56:	492d      	ldr	r1, [pc, #180]	@ (8002b0c <fLineSensorCalculatePosition+0x138>)
 8002a58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	3301      	adds	r3, #1
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	3340      	adds	r3, #64	@ 0x40
 8002a7c:	443b      	add	r3, r7
 8002a7e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8002a9e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aaa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8002aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	ddaf      	ble.n	8002a1a <fLineSensorCalculatePosition+0x46>
        }
    }


    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8002aba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d101      	bne.n	8002acc <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <fLineSensorCalculatePosition+0x140>)
 8002aca:	e00b      	b.n	8002ae4 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8002acc:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002ad0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 8002adc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <fLineSensorCalculatePosition+0x144>)
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	6013      	str	r3, [r2, #0]
    return posicao;
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aec:	3744      	adds	r7, #68	@ 0x44
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bcb0      	pop	{r4, r5, r7}
 8002af2:	4770      	bx	lr
 8002af4:	0800b718 	.word	0x0800b718
 8002af8:	200007b4 	.word	0x200007b4
 8002afc:	200007b8 	.word	0x200007b8
 8002b00:	200007bc 	.word	0x200007bc
 8002b04:	200007c0 	.word	0x200007c0
 8002b08:	200007c4 	.word	0x200007c4
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	20000018 	.word	0x20000018
 8002b14:	42c60000 	.word	0x42c60000
 8002b18:	200007cc 	.word	0x200007cc

08002b1c <vLineSensorPIDControl>:
// Definição das constantes do PID


// Função para ajustar a velocidade das rodas com base na saída do PID
// Função para ajustar a velocidade das rodas com base na saída do PID
void vLineSensorPIDControl(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 8002b22:	f000 febd 	bl	80038a0 <HAL_GetTick>
 8002b26:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <vLineSensorPIDControl+0x1a8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b38:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002cc8 <vLineSensorPIDControl+0x1ac>
 8002b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b40:	4b62      	ldr	r3, [pc, #392]	@ (8002ccc <vLineSensorPIDControl+0x1b0>)
 8002b42:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8002b46:	4b61      	ldr	r3, [pc, #388]	@ (8002ccc <vLineSensorPIDControl+0x1b0>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	d802      	bhi.n	8002b5c <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8002b56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <vLineSensorPIDControl+0x1b0>)
 8002b58:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd0 <vLineSensorPIDControl+0x1b4>)
 8002b5a:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 8002b5c:	f7ff ff3a 	bl	80029d4 <fLineSensorCalculatePosition>
 8002b60:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8002b64:	edd7 7a00 	vldr	s15, [r7]
 8002b68:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002cd4 <vLineSensorPIDControl+0x1b8>
 8002b6c:	eef4 7a47 	vcmp.f32	s15, s14
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	d106      	bne.n	8002b84 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        // Aqui, vamos continuar em frente com velocidade base
        vSetRodasDC(0, 0);
 8002b76:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8002cd8 <vLineSensorPIDControl+0x1bc>
 8002b7a:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8002cd8 <vLineSensorPIDControl+0x1bc>
 8002b7e:	f7ff fc13 	bl	80023a8 <vSetRodasDC>
    	//vSetRodaDireitaDC(0.5);
    	   // vSetRodaEsquerdaDC(0.5);
        return;
 8002b82:	e09c      	b.n	8002cbe <vLineSensorPIDControl+0x1a2>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0-position; // Inverte o sinal para correção na direção oposta
 8002b84:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002cd8 <vLineSensorPIDControl+0x1bc>
 8002b88:	edd7 7a00 	vldr	s15, [r7]
 8002b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b90:	4b52      	ldr	r3, [pc, #328]	@ (8002cdc <vLineSensorPIDControl+0x1c0>)
 8002b92:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8002b96:	4b51      	ldr	r3, [pc, #324]	@ (8002cdc <vLineSensorPIDControl+0x1c0>)
 8002b98:	ed93 7a00 	vldr	s14, [r3]
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <vLineSensorPIDControl+0x1b0>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce0 <vLineSensorPIDControl+0x1c4>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <vLineSensorPIDControl+0x1c4>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8002bb6:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <vLineSensorPIDControl+0x1c0>)
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <vLineSensorPIDControl+0x1c8>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <vLineSensorPIDControl+0x1b0>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <vLineSensorPIDControl+0x1cc>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(kp * error + ki * integral_error + kd * derivative_error);
 8002bd6:	4b45      	ldr	r3, [pc, #276]	@ (8002cec <vLineSensorPIDControl+0x1d0>)
 8002bd8:	ed93 7a00 	vldr	s14, [r3]
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cdc <vLineSensorPIDControl+0x1c0>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be6:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <vLineSensorPIDControl+0x1d4>)
 8002be8:	edd3 6a00 	vldr	s13, [r3]
 8002bec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce0 <vLineSensorPIDControl+0x1c4>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <vLineSensorPIDControl+0x1d8>)
 8002bfc:	edd3 6a00 	vldr	s13, [r3]
 8002c00:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <vLineSensorPIDControl+0x1cc>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	eef1 7a67 	vneg.f32	s15, s15
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <vLineSensorPIDControl+0x1dc>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha=control_output;
 8002c18:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <vLineSensorPIDControl+0x1dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a37      	ldr	r2, [pc, #220]	@ (8002cfc <vLineSensorPIDControl+0x1e0>)
 8002c1e:	6013      	str	r3, [r2, #0]
    if (control_output == 0) {
 8002c20:	4b35      	ldr	r3, [pc, #212]	@ (8002cf8 <vLineSensorPIDControl+0x1dc>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d112      	bne.n	8002c56 <vLineSensorPIDControl+0x13a>
            velocidadeEsquerda = velocidadeBase;
 8002c30:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <vLineSensorPIDControl+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <vLineSensorPIDControl+0x1e8>)
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase;
 8002c42:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <vLineSensorPIDControl+0x1e4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <vLineSensorPIDControl+0x1ec>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
 8002c54:	e033      	b.n	8002cbe <vLineSensorPIDControl+0x1a2>
        } else {
            // Caso contrário, ajusta a velocidade de cada roda com base no output do PID
            // Se o erro for positivo, roda esquerda acelera e a direita desacelera e vice-versa
            velocidadeEsquerda = velocidadeBase + control_output;
 8002c56:	4b2a      	ldr	r3, [pc, #168]	@ (8002d00 <vLineSensorPIDControl+0x1e4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c62:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <vLineSensorPIDControl+0x1dc>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <vLineSensorPIDControl+0x1e8>)
 8002c6e:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase - control_output;
 8002c72:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <vLineSensorPIDControl+0x1e4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <vLineSensorPIDControl+0x1dc>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <vLineSensorPIDControl+0x1ec>)
 8002c8a:	edc3 7a00 	vstr	s15, [r3]

            // Limitar a velocidade mínima para 0 (evita valores negativos nas rodas)
            if (velocidadeEsquerda < 0) {
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <vLineSensorPIDControl+0x1e8>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d503      	bpl.n	8002ca6 <vLineSensorPIDControl+0x18a>
                velocidadeEsquerda = 0;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <vLineSensorPIDControl+0x1e8>)
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
            }
            if (velocidadeDireita < 0) {
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <vLineSensorPIDControl+0x1ec>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	d503      	bpl.n	8002cbe <vLineSensorPIDControl+0x1a2>
                velocidadeDireita = 0;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <vLineSensorPIDControl+0x1ec>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
            }
        }
}
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200007f0 	.word	0x200007f0
 8002cc8:	447a0000 	.word	0x447a0000
 8002ccc:	20000038 	.word	0x20000038
 8002cd0:	3c23d70a 	.word	0x3c23d70a
 8002cd4:	42c60000 	.word	0x42c60000
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	200007dc 	.word	0x200007dc
 8002ce0:	200007e4 	.word	0x200007e4
 8002ce4:	200007e0 	.word	0x200007e0
 8002ce8:	200007e8 	.word	0x200007e8
 8002cec:	2000002c 	.word	0x2000002c
 8002cf0:	200007d8 	.word	0x200007d8
 8002cf4:	20000030 	.word	0x20000030
 8002cf8:	200007ec 	.word	0x200007ec
 8002cfc:	200007c8 	.word	0x200007c8
 8002d00:	20000034 	.word	0x20000034
 8002d04:	200007d0 	.word	0x200007d0
 8002d08:	200007d4 	.word	0x200007d4

08002d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_MspInit+0x44>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d42:	f004 ff53 	bl	8007bec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000

08002d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <NMI_Handler+0x4>

08002d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002daa:	f000 fd67 	bl	800387c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002db8:	4802      	ldr	r0, [pc, #8]	@ (8002dc4 <DMA1_Channel6_IRQHandler+0x10>)
 8002dba:	f002 fcb1 	bl	8005720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200004f4 	.word	0x200004f4

08002dc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002dcc:	4802      	ldr	r0, [pc, #8]	@ (8002dd8 <DMA1_Channel7_IRQHandler+0x10>)
 8002dce:	f002 fca7 	bl	8005720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000554 	.word	0x20000554

08002ddc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de0:	4803      	ldr	r0, [pc, #12]	@ (8002df0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002de2:	f006 fa85 	bl	80092f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002de6:	4803      	ldr	r0, [pc, #12]	@ (8002df4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002de8:	f006 fa82 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200007f4 	.word	0x200007f4
 8002df4:	20000924 	.word	0x20000924

08002df8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dfc:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002dfe:	f006 fa77 	bl	80092f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002e02:	4803      	ldr	r0, [pc, #12]	@ (8002e10 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002e04:	f006 fa74 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200007f4 	.word	0x200007f4
 8002e10:	20000970 	.word	0x20000970

08002e14 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002e1a:	f006 fa69 	bl	80092f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002e1e:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002e20:	f006 fa66 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200007f4 	.word	0x200007f4
 8002e2c:	200009bc 	.word	0x200009bc

08002e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e34:	4802      	ldr	r0, [pc, #8]	@ (8002e40 <TIM2_IRQHandler+0x10>)
 8002e36:	f006 fa5b 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000840 	.word	0x20000840

08002e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e48:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <TIM3_IRQHandler+0x10>)
 8002e4a:	f006 fa51 	bl	80092f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000088c 	.word	0x2000088c

08002e58 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <I2C2_EV_IRQHandler+0x10>)
 8002e5e:	f003 f929 	bl	80060b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200004a0 	.word	0x200004a0

08002e6c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <I2C2_ER_IRQHandler+0x10>)
 8002e72:	f003 f939 	bl	80060e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004a0 	.word	0x200004a0

08002e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e88:	f002 ff42 	bl	8005d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <SystemInit+0x20>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <SystemInit+0x20>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b09c      	sub	sp, #112	@ 0x70
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	615a      	str	r2, [r3, #20]
 8002ee6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2234      	movs	r2, #52	@ 0x34
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f008 fbda 	bl	800b6a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <MX_TIM1_Init+0x174>)
 8002ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002efa:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002efc:	22a9      	movs	r2, #169	@ 0xa9
 8002efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b48      	ldr	r3, [pc, #288]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0e:	4b45      	ldr	r3, [pc, #276]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f14:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f20:	4840      	ldr	r0, [pc, #256]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f22:	f005 fdef 	bl	8008b04 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f2c:	f7ff fa02 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4839      	ldr	r0, [pc, #228]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f3e:	f006 fcd7 	bl	80098f0 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f48:	f7ff f9f4 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f4c:	4835      	ldr	r0, [pc, #212]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f4e:	f005 fea9 	bl	8008ca4 <HAL_TIM_PWM_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002f58:	f7ff f9ec 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	482d      	ldr	r0, [pc, #180]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002f70:	f007 fbbc 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f7a:	f7ff f9db 	bl	8002334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7e:	2360      	movs	r3, #96	@ 0x60
 8002f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f86:	2300      	movs	r3, #0
 8002f88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4820      	ldr	r0, [pc, #128]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002fa4:	f006 fb90 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002fae:	f7ff f9c1 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	481a      	ldr	r0, [pc, #104]	@ (8003024 <MX_TIM1_Init+0x170>)
 8002fbc:	f006 fb84 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002fc6:	f7ff f9b5 	bl	8002334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ff0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4807      	ldr	r0, [pc, #28]	@ (8003024 <MX_TIM1_Init+0x170>)
 8003008:	f007 fc06 	bl	800a818 <HAL_TIMEx_ConfigBreakDeadTime>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8003012:	f7ff f98f 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003016:	4803      	ldr	r0, [pc, #12]	@ (8003024 <MX_TIM1_Init+0x170>)
 8003018:	f000 fada 	bl	80035d0 <HAL_TIM_MspPostInit>

}
 800301c:	bf00      	nop
 800301e:	3770      	adds	r7, #112	@ 0x70
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200007f4 	.word	0x200007f4
 8003028:	40012c00 	.word	0x40012c00

0800302c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <MX_TIM2_Init+0x98>)
 800304c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003050:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 8003052:	4b1c      	ldr	r3, [pc, #112]	@ (80030c4 <MX_TIM2_Init+0x98>)
 8003054:	f244 2267 	movw	r2, #16999	@ 0x4267
 8003058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305a:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <MX_TIM2_Init+0x98>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003060:	4b18      	ldr	r3, [pc, #96]	@ (80030c4 <MX_TIM2_Init+0x98>)
 8003062:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003068:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <MX_TIM2_Init+0x98>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <MX_TIM2_Init+0x98>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003074:	4813      	ldr	r0, [pc, #76]	@ (80030c4 <MX_TIM2_Init+0x98>)
 8003076:	f005 fd45 	bl	8008b04 <HAL_TIM_Base_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003080:	f7ff f958 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	4619      	mov	r1, r3
 8003090:	480c      	ldr	r0, [pc, #48]	@ (80030c4 <MX_TIM2_Init+0x98>)
 8003092:	f006 fc2d 	bl	80098f0 <HAL_TIM_ConfigClockSource>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800309c:	f7ff f94a 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <MX_TIM2_Init+0x98>)
 80030ae:	f007 fb1d 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80030b8:	f7ff f93c 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000840 	.word	0x20000840

080030c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <MX_TIM3_Init+0x94>)
 80030e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <MX_TIM3_Init+0x98>)
 80030ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17000-1;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <MX_TIM3_Init+0x94>)
 80030ee:	f244 2267 	movw	r2, #16999	@ 0x4267
 80030f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <MX_TIM3_Init+0x94>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <MX_TIM3_Init+0x94>)
 80030fc:	2263      	movs	r2, #99	@ 0x63
 80030fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003100:	4b16      	ldr	r3, [pc, #88]	@ (800315c <MX_TIM3_Init+0x94>)
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <MX_TIM3_Init+0x94>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800310c:	4813      	ldr	r0, [pc, #76]	@ (800315c <MX_TIM3_Init+0x94>)
 800310e:	f005 fcf9 	bl	8008b04 <HAL_TIM_Base_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003118:	f7ff f90c 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003120:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	480c      	ldr	r0, [pc, #48]	@ (800315c <MX_TIM3_Init+0x94>)
 800312a:	f006 fbe1 	bl	80098f0 <HAL_TIM_ConfigClockSource>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003134:	f7ff f8fe 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4805      	ldr	r0, [pc, #20]	@ (800315c <MX_TIM3_Init+0x94>)
 8003146:	f007 fad1 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003150:	f7ff f8f0 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000088c 	.word	0x2000088c
 8003160:	40000400 	.word	0x40000400

08003164 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003174:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <MX_TIM6_Init+0x64>)
 8003176:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <MX_TIM6_Init+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800317a:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <MX_TIM6_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003180:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <MX_TIM6_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <MX_TIM6_Init+0x64>)
 8003188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800318c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <MX_TIM6_Init+0x64>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003194:	480c      	ldr	r0, [pc, #48]	@ (80031c8 <MX_TIM6_Init+0x64>)
 8003196:	f005 fcb5 	bl	8008b04 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80031a0:	f7ff f8c8 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <MX_TIM6_Init+0x64>)
 80031b2:	f007 fa9b 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80031bc:	f7ff f8ba 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200008d8 	.word	0x200008d8
 80031cc:	40001000 	.word	0x40001000

080031d0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d6:	f107 0310 	add.w	r3, r7, #16
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80031ee:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <MX_TIM15_Init+0x9c>)
 80031f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <MX_TIM15_Init+0xa0>)
 80031f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <MX_TIM15_Init+0x9c>)
 80031f6:	f244 2267 	movw	r2, #16999	@ 0x4267
 80031fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <MX_TIM15_Init+0x9c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <MX_TIM15_Init+0x9c>)
 8003204:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003208:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <MX_TIM15_Init+0x9c>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003210:	4b16      	ldr	r3, [pc, #88]	@ (800326c <MX_TIM15_Init+0x9c>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <MX_TIM15_Init+0x9c>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800321c:	4813      	ldr	r0, [pc, #76]	@ (800326c <MX_TIM15_Init+0x9c>)
 800321e:	f005 fc71 	bl	8008b04 <HAL_TIM_Base_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8003228:	f7ff f884 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	4619      	mov	r1, r3
 8003238:	480c      	ldr	r0, [pc, #48]	@ (800326c <MX_TIM15_Init+0x9c>)
 800323a:	f006 fb59 	bl	80098f0 <HAL_TIM_ConfigClockSource>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003244:	f7ff f876 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4805      	ldr	r0, [pc, #20]	@ (800326c <MX_TIM15_Init+0x9c>)
 8003256:	f007 fa49 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8003260:	f7ff f868 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000924 	.word	0x20000924
 8003270:	40014000 	.word	0x40014000

08003274 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800327a:	463b      	mov	r3, r7
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003286:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <MX_TIM16_Init+0x90>)
 8003288:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <MX_TIM16_Init+0x94>)
 800328a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <MX_TIM16_Init+0x90>)
 800328e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003292:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <MX_TIM16_Init+0x90>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 800329a:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <MX_TIM16_Init+0x90>)
 800329c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80032a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a2:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80032a8:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ae:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80032b4:	4813      	ldr	r0, [pc, #76]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032b6:	f005 fc25 	bl	8008b04 <HAL_TIM_Base_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 80032c0:	f7ff f838 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80032c4:	480f      	ldr	r0, [pc, #60]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032c6:	f005 fe61 	bl	8008f8c <HAL_TIM_IC_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80032d0:	f7ff f830 	bl	8002334 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032d8:	2301      	movs	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80032e0:	230f      	movs	r3, #15
 80032e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	2200      	movs	r2, #0
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	@ (8003304 <MX_TIM16_Init+0x90>)
 80032ec:	f006 f94f 	bl	800958e <HAL_TIM_IC_ConfigChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 80032f6:	f7ff f81d 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000970 	.word	0x20000970
 8003308:	40014400 	.word	0x40014400

0800330c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003312:	463b      	mov	r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800331e:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <MX_TIM17_Init+0x90>)
 8003320:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <MX_TIM17_Init+0x94>)
 8003322:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 8003324:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <MX_TIM17_Init+0x90>)
 8003326:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800332a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <MX_TIM17_Init+0x90>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49999;
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <MX_TIM17_Init+0x90>)
 8003334:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003338:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333a:	4b18      	ldr	r3, [pc, #96]	@ (800339c <MX_TIM17_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <MX_TIM17_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <MX_TIM17_Init+0x90>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800334c:	4813      	ldr	r0, [pc, #76]	@ (800339c <MX_TIM17_Init+0x90>)
 800334e:	f005 fbd9 	bl	8008b04 <HAL_TIM_Base_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8003358:	f7fe ffec 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800335c:	480f      	ldr	r0, [pc, #60]	@ (800339c <MX_TIM17_Init+0x90>)
 800335e:	f005 fe15 	bl	8008f8c <HAL_TIM_IC_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8003368:	f7fe ffe4 	bl	8002334 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800336c:	2300      	movs	r3, #0
 800336e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003370:	2301      	movs	r3, #1
 8003372:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003378:	230f      	movs	r3, #15
 800337a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800337c:	463b      	mov	r3, r7
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	4806      	ldr	r0, [pc, #24]	@ (800339c <MX_TIM17_Init+0x90>)
 8003384:	f006 f903 	bl	800958e <HAL_TIM_IC_ConfigChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 800338e:	f7fe ffd1 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200009bc 	.word	0x200009bc
 80033a0:	40014800 	.word	0x40014800

080033a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b090      	sub	sp, #64	@ 0x40
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7b      	ldr	r2, [pc, #492]	@ (80035b0 <HAL_TIM_Base_MspInit+0x20c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d124      	bne.n	8003410 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033c6:	4b7b      	ldr	r3, [pc, #492]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	4a7a      	ldr	r2, [pc, #488]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80033cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80033d2:	4b78      	ldr	r3, [pc, #480]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	2018      	movs	r0, #24
 80033e4:	f001 ffdd 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80033e8:	2018      	movs	r0, #24
 80033ea:	f001 fff4 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2104      	movs	r1, #4
 80033f2:	2019      	movs	r0, #25
 80033f4:	f001 ffd5 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80033f8:	2019      	movs	r0, #25
 80033fa:	f001 ffec 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2104      	movs	r1, #4
 8003402:	201a      	movs	r0, #26
 8003404:	f001 ffcd 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003408:	201a      	movs	r0, #26
 800340a:	f001 ffe4 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800340e:	e0ca      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d114      	bne.n	8003444 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341a:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
 8003426:	4b63      	ldr	r3, [pc, #396]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	201c      	movs	r0, #28
 8003438:	f001 ffb3 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800343c:	201c      	movs	r0, #28
 800343e:	f001 ffca 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 8003442:	e0b0      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM3)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_TIM_Base_MspInit+0x214>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d114      	bne.n	8003478 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344e:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	623b      	str	r3, [r7, #32]
 8003464:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2101      	movs	r1, #1
 800346a:	201d      	movs	r0, #29
 800346c:	f001 ff99 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003470:	201d      	movs	r0, #29
 8003472:	f001 ffb0 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 8003476:	e096      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM6)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a4f      	ldr	r2, [pc, #316]	@ (80035bc <HAL_TIM_Base_MspInit+0x218>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003482:	4b4c      	ldr	r3, [pc, #304]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003488:	f043 0310 	orr.w	r3, r3, #16
 800348c:	6593      	str	r3, [r2, #88]	@ 0x58
 800348e:	4b49      	ldr	r3, [pc, #292]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
}
 800349a:	e084      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM15)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a47      	ldr	r2, [pc, #284]	@ (80035c0 <HAL_TIM_Base_MspInit+0x21c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d114      	bne.n	80034d0 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034a6:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80034b2:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2018      	movs	r0, #24
 80034c4:	f001 ff6d 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80034c8:	2018      	movs	r0, #24
 80034ca:	f001 ff84 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 80034ce:	e06a      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM16)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3b      	ldr	r2, [pc, #236]	@ (80035c4 <HAL_TIM_Base_MspInit+0x220>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d130      	bne.n	800353c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034da:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034de:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e6:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	4b30      	ldr	r3, [pc, #192]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fe:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 800350a:	2310      	movs	r3, #16
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800351a:	2301      	movs	r3, #1
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 800351e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	4828      	ldr	r0, [pc, #160]	@ (80035c8 <HAL_TIM_Base_MspInit+0x224>)
 8003526:	f002 fa59 	bl	80059dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2104      	movs	r1, #4
 800352e:	2019      	movs	r0, #25
 8003530:	f001 ff37 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003534:	2019      	movs	r0, #25
 8003536:	f001 ff4e 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 800353a:	e034      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM17)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_TIM_Base_MspInit+0x228>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12f      	bne.n	80035a6 <HAL_TIM_Base_MspInit+0x202>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	6613      	str	r3, [r2, #96]	@ 0x60
 8003552:	4b18      	ldr	r3, [pc, #96]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355e:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_TIM_Base_MspInit+0x210>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8003576:	2320      	movs	r3, #32
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8003586:	230a      	movs	r3, #10
 8003588:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800358a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800358e:	4619      	mov	r1, r3
 8003590:	480d      	ldr	r0, [pc, #52]	@ (80035c8 <HAL_TIM_Base_MspInit+0x224>)
 8003592:	f002 fa23 	bl	80059dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2104      	movs	r1, #4
 800359a:	201a      	movs	r0, #26
 800359c:	f001 ff01 	bl	80053a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80035a0:	201a      	movs	r0, #26
 80035a2:	f001 ff18 	bl	80053d6 <HAL_NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3740      	adds	r7, #64	@ 0x40
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40001000 	.word	0x40001000
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	48000400 	.word	0x48000400
 80035cc:	40014800 	.word	0x40014800

080035d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <HAL_TIM_MspPostInit+0x64>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d11b      	bne.n	800362a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <HAL_TIM_MspPostInit+0x68>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	4a10      	ldr	r2, [pc, #64]	@ (8003638 <HAL_TIM_MspPostInit+0x68>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <HAL_TIM_MspPostInit+0x68>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 800360a:	2303      	movs	r3, #3
 800360c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800361a:	2302      	movs	r3, #2
 800361c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4619      	mov	r1, r3
 8003624:	4805      	ldr	r0, [pc, #20]	@ (800363c <HAL_TIM_MspPostInit+0x6c>)
 8003626:	f002 f9d9 	bl	80059dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800362a:	bf00      	nop
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40021000 	.word	0x40021000
 800363c:	48000800 	.word	0x48000800

08003640 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003644:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003646:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <MX_LPUART1_UART_Init+0x90>)
 8003648:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800364a:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 800364c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003650:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003658:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800365e:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003666:	220c      	movs	r2, #12
 8003668:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366a:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003670:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800367c:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003682:	4812      	ldr	r0, [pc, #72]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003684:	f007 f9a2 	bl	800a9cc <HAL_UART_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800368e:	f7fe fe51 	bl	8002334 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003692:	2100      	movs	r1, #0
 8003694:	480d      	ldr	r0, [pc, #52]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 8003696:	f007 ff3d 	bl	800b514 <HAL_UARTEx_SetTxFifoThreshold>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80036a0:	f7fe fe48 	bl	8002334 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036a4:	2100      	movs	r1, #0
 80036a6:	4809      	ldr	r0, [pc, #36]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 80036a8:	f007 ff72 	bl	800b590 <HAL_UARTEx_SetRxFifoThreshold>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80036b2:	f7fe fe3f 	bl	8002334 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80036b6:	4805      	ldr	r0, [pc, #20]	@ (80036cc <MX_LPUART1_UART_Init+0x8c>)
 80036b8:	f007 fef3 	bl	800b4a2 <HAL_UARTEx_DisableFifoMode>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80036c2:	f7fe fe37 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000a08 	.word	0x20000a08
 80036d0:	40008000 	.word	0x40008000

080036d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b09e      	sub	sp, #120	@ 0x78
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	2254      	movs	r2, #84	@ 0x54
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f007 ffd7 	bl	800b6a8 <memset>
  if(uartHandle->Instance==LPUART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	@ (800377c <HAL_UART_MspInit+0xa8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d136      	bne.n	8003772 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003704:	2320      	movs	r3, #32
 8003706:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003708:	2300      	movs	r3, #0
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	4618      	mov	r0, r3
 8003712:	f004 ffa9 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800371c:	f7fe fe0a 	bl	8002334 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003720:	4b17      	ldr	r3, [pc, #92]	@ (8003780 <HAL_UART_MspInit+0xac>)
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	4a16      	ldr	r2, [pc, #88]	@ (8003780 <HAL_UART_MspInit+0xac>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800372c:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <HAL_UART_MspInit+0xac>)
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_UART_MspInit+0xac>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373c:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <HAL_UART_MspInit+0xac>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003744:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <HAL_UART_MspInit+0xac>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003750:	230c      	movs	r3, #12
 8003752:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003760:	230c      	movs	r3, #12
 8003762:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003768:	4619      	mov	r1, r3
 800376a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800376e:	f002 f935 	bl	80059dc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003772:	bf00      	nop
 8003774:	3778      	adds	r7, #120	@ 0x78
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40008000 	.word	0x40008000
 8003780:	40021000 	.word	0x40021000

08003784 <Reset_Handler>:
 8003784:	480d      	ldr	r0, [pc, #52]	@ (80037bc <LoopForever+0x2>)
 8003786:	4685      	mov	sp, r0
 8003788:	f7ff fb82 	bl	8002e90 <SystemInit>
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <LoopForever+0x6>)
 800378e:	490d      	ldr	r1, [pc, #52]	@ (80037c4 <LoopForever+0xa>)
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <LoopForever+0xe>)
 8003792:	2300      	movs	r3, #0
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:
 8003796:	58d4      	ldr	r4, [r2, r3]
 8003798:	50c4      	str	r4, [r0, r3]
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:
 800379c:	18c4      	adds	r4, r0, r3
 800379e:	428c      	cmp	r4, r1
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <LoopForever+0x12>)
 80037a4:	4c0a      	ldr	r4, [pc, #40]	@ (80037d0 <LoopForever+0x16>)
 80037a6:	2300      	movs	r3, #0
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:
 80037ae:	42a2      	cmp	r2, r4
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>
 80037b2:	f007 ff81 	bl	800b6b8 <__libc_init_array>
 80037b6:	f7fe fcab 	bl	8002110 <main>

080037ba <LoopForever>:
 80037ba:	e7fe      	b.n	80037ba <LoopForever>
 80037bc:	20020000 	.word	0x20020000
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000048 	.word	0x20000048
 80037c8:	0800b77c 	.word	0x0800b77c
 80037cc:	20000048 	.word	0x20000048
 80037d0:	20000aa0 	.word	0x20000aa0

080037d4 <ADC1_2_IRQHandler>:
 80037d4:	e7fe      	b.n	80037d4 <ADC1_2_IRQHandler>

080037d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e0:	2003      	movs	r0, #3
 80037e2:	f001 fdd3 	bl	800538c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037e6:	2000      	movs	r0, #0
 80037e8:	f000 f80e 	bl	8003808 <HAL_InitTick>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	e001      	b.n	80037fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037f8:	f7ff fa88 	bl	8002d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037fc:	79fb      	ldrb	r3, [r7, #7]

}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003814:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_InitTick+0x68>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800381c:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_InitTick+0x6c>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <HAL_InitTick+0x68>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	4618      	mov	r0, r3
 8003832:	f001 fdde 	bl	80053f2 <HAL_SYSTICK_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d809      	bhi.n	8003856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003842:	2200      	movs	r2, #0
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	f04f 30ff 	mov.w	r0, #4294967295
 800384a:	f001 fdaa 	bl	80053a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800384e:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <HAL_InitTick+0x70>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e007      	b.n	8003866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e004      	b.n	8003866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e001      	b.n	8003866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000044 	.word	0x20000044
 8003874:	2000003c 	.word	0x2000003c
 8003878:	20000040 	.word	0x20000040

0800387c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_IncTick+0x1c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_IncTick+0x20>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4413      	add	r3, r2
 800388a:	4a03      	ldr	r2, [pc, #12]	@ (8003898 <HAL_IncTick+0x1c>)
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000a9c 	.word	0x20000a9c
 800389c:	20000044 	.word	0x20000044

080038a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return uwTick;
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <HAL_GetTick+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000a9c 	.word	0x20000a9c

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff ffee 	bl	80038a0 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d004      	beq.n	80038dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_Delay+0x40>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038dc:	bf00      	nop
 80038de:	f7ff ffdf 	bl	80038a0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d8f7      	bhi.n	80038de <HAL_Delay+0x26>
  {
  }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000044 	.word	0x20000044

080038fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3360      	adds	r3, #96	@ 0x60
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <LL_ADC_SetOffset+0x44>)
 8003986:	4013      	ands	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	03fff000 	.word	0x03fff000

080039ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3360      	adds	r3, #96	@ 0x60
 80039ba:	461a      	mov	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3360      	adds	r3, #96	@ 0x60
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	@ 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3360      	adds	r3, #96	@ 0x60
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	615a      	str	r2, [r3, #20]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3330      	adds	r3, #48	@ 0x30
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	4413      	add	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	211f      	movs	r1, #31
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	401a      	ands	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	f003 011f 	and.w	r1, r3, #31
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0e5b      	lsrs	r3, r3, #25
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0d1b      	lsrs	r3, r3, #20
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2107      	movs	r1, #7
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	0d1b      	lsrs	r3, r3, #20
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	431a      	orrs	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0318 	and.w	r3, r3, #24
 8003b96:	4908      	ldr	r1, [pc, #32]	@ (8003bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b98:	40d9      	lsrs	r1, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	0007ffff 	.word	0x0007ffff

08003bbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6093      	str	r3, [r2, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c60:	d101      	bne.n	8003c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c88:	f043 0201 	orr.w	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb0:	f043 0202 	orr.w	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <LL_ADC_IsEnabled+0x18>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <LL_ADC_IsEnabled+0x1a>
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d101      	bne.n	8003d02 <LL_ADC_IsDisableOngoing+0x18>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_ADC_IsDisableOngoing+0x1a>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d24:	f043 0204 	orr.w	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d101      	bne.n	8003d50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d101      	bne.n	8003d76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b089      	sub	sp, #36	@ 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1a9      	b.n	80040f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd fa27 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff19 	bl	8003bfc <LL_ADC_IsDeepPowerDownEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff feff 	bl	8003bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff ff34 	bl	8003c4c <LL_ADC_IsInternalRegulatorEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ff18 	bl	8003c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df4:	4b9c      	ldr	r3, [pc, #624]	@ (8004068 <HAL_ADC_Init+0x2e4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	4a9c      	ldr	r2, [pc, #624]	@ (800406c <HAL_ADC_Init+0x2e8>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f9      	bne.n	8003e0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff16 	bl	8003c4c <LL_ADC_IsInternalRegulatorEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	f043 0210 	orr.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff76 	bl	8003d38 <LL_ADC_REG_IsConversionOngoing>
 8003e4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8142 	bne.w	80040e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 813e 	bne.w	80040e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e6c:	f043 0202 	orr.w	r2, r3, #2
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff23 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d141      	bne.n	8003f08 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8c:	d004      	beq.n	8003e98 <HAL_ADC_Init+0x114>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a77      	ldr	r2, [pc, #476]	@ (8004070 <HAL_ADC_Init+0x2ec>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10f      	bne.n	8003eb8 <HAL_ADC_Init+0x134>
 8003e98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e9c:	f7ff ff12 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	4873      	ldr	r0, [pc, #460]	@ (8004070 <HAL_ADC_Init+0x2ec>)
 8003ea4:	f7ff ff0e 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4323      	orrs	r3, r4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e012      	b.n	8003ede <HAL_ADC_Init+0x15a>
 8003eb8:	486e      	ldr	r0, [pc, #440]	@ (8004074 <HAL_ADC_Init+0x2f0>)
 8003eba:	f7ff ff03 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	486d      	ldr	r0, [pc, #436]	@ (8004078 <HAL_ADC_Init+0x2f4>)
 8003ec2:	f7ff feff 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	431c      	orrs	r4, r3
 8003eca:	486c      	ldr	r0, [pc, #432]	@ (800407c <HAL_ADC_Init+0x2f8>)
 8003ecc:	f7ff fefa 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4323      	orrs	r3, r4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d012      	beq.n	8003f08 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eea:	d004      	beq.n	8003ef6 <HAL_ADC_Init+0x172>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5f      	ldr	r2, [pc, #380]	@ (8004070 <HAL_ADC_Init+0x2ec>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_Init+0x176>
 8003ef6:	4a62      	ldr	r2, [pc, #392]	@ (8004080 <HAL_ADC_Init+0x2fc>)
 8003ef8:	e000      	b.n	8003efc <HAL_ADC_Init+0x178>
 8003efa:	4a62      	ldr	r2, [pc, #392]	@ (8004084 <HAL_ADC_Init+0x300>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7ff fcfa 	bl	80038fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7f5b      	ldrb	r3, [r3, #29]
 8003f0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	045b      	lsls	r3, r3, #17
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b48      	ldr	r3, [pc, #288]	@ (8004088 <HAL_ADC_Init+0x304>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fee5 	bl	8003d5e <LL_ADC_INJ_IsConversionOngoing>
 8003f94:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d17f      	bne.n	800409c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d17c      	bne.n	800409c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fa6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fbe:	f023 0302 	bic.w	r3, r3, #2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d017      	beq.n	8004004 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fe2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6911      	ldr	r1, [r2, #16]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004002:	e013      	b.n	800402c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004012:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004028:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004032:	2b01      	cmp	r3, #1
 8004034:	d12a      	bne.n	800408c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004058:	430a      	orrs	r2, r1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e019      	b.n	800409c <HAL_ADC_Init+0x318>
 8004068:	2000003c 	.word	0x2000003c
 800406c:	053e2d63 	.word	0x053e2d63
 8004070:	50000100 	.word	0x50000100
 8004074:	50000400 	.word	0x50000400
 8004078:	50000500 	.word	0x50000500
 800407c:	50000600 	.word	0x50000600
 8004080:	50000300 	.word	0x50000300
 8004084:	50000700 	.word	0x50000700
 8004088:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10c      	bne.n	80040be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	f023 010f 	bic.w	r1, r3, #15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	1e5a      	subs	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80040bc:	e007      	b.n	80040ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 020f 	bic.w	r2, r2, #15
 80040cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040de:	e007      	b.n	80040f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f043 0210 	orr.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3724      	adds	r7, #36	@ 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}
 80040fa:	bf00      	nop

080040fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004110:	d004      	beq.n	800411c <HAL_ADC_Start_DMA+0x20>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a5a      	ldr	r2, [pc, #360]	@ (8004280 <HAL_ADC_Start_DMA+0x184>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_ADC_Start_DMA+0x24>
 800411c:	4b59      	ldr	r3, [pc, #356]	@ (8004284 <HAL_ADC_Start_DMA+0x188>)
 800411e:	e000      	b.n	8004122 <HAL_ADC_Start_DMA+0x26>
 8004120:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <HAL_ADC_Start_DMA+0x18c>)
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fd4a 	bl	8003bbc <LL_ADC_GetMultimode>
 8004128:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fe02 	bl	8003d38 <LL_ADC_REG_IsConversionOngoing>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 809b 	bne.w	8004272 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_ADC_Start_DMA+0x4e>
 8004146:	2302      	movs	r3, #2
 8004148:	e096      	b.n	8004278 <HAL_ADC_Start_DMA+0x17c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4d      	ldr	r2, [pc, #308]	@ (800428c <HAL_ADC_Start_DMA+0x190>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d008      	beq.n	800416e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b05      	cmp	r3, #5
 8004166:	d002      	beq.n	800416e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b09      	cmp	r3, #9
 800416c:	d17a      	bne.n	8004264 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fcf6 	bl	8004b60 <ADC_Enable>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d16d      	bne.n	800425a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004182:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a3a      	ldr	r2, [pc, #232]	@ (8004280 <HAL_ADC_Start_DMA+0x184>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_ADC_Start_DMA+0xb4>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004290 <HAL_ADC_Start_DMA+0x194>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d002      	beq.n	80041ac <HAL_ADC_Start_DMA+0xb0>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_Start_DMA+0xb8>
 80041ac:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <HAL_ADC_Start_DMA+0x198>)
 80041ae:	e001      	b.n	80041b4 <HAL_ADC_Start_DMA+0xb8>
 80041b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d002      	beq.n	80041c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	f023 0206 	bic.w	r2, r3, #6
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80041e6:	e002      	b.n	80041ee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	4a29      	ldr	r2, [pc, #164]	@ (8004298 <HAL_ADC_Start_DMA+0x19c>)
 80041f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	4a28      	ldr	r2, [pc, #160]	@ (800429c <HAL_ADC_Start_DMA+0x1a0>)
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	4a27      	ldr	r2, [pc, #156]	@ (80042a0 <HAL_ADC_Start_DMA+0x1a4>)
 8004204:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	221c      	movs	r2, #28
 800420c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0210 	orr.w	r2, r2, #16
 8004224:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3340      	adds	r3, #64	@ 0x40
 8004240:	4619      	mov	r1, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f001 f989 	bl	800555c <HAL_DMA_Start_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd5c 	bl	8003d10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004258:	e00d      	b.n	8004276 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004262:	e008      	b.n	8004276 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004270:	e001      	b.n	8004276 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004272:	2302      	movs	r3, #2
 8004274:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	50000100 	.word	0x50000100
 8004284:	50000300 	.word	0x50000300
 8004288:	50000700 	.word	0x50000700
 800428c:	50000600 	.word	0x50000600
 8004290:	50000500 	.word	0x50000500
 8004294:	50000400 	.word	0x50000400
 8004298:	08004d4b 	.word	0x08004d4b
 800429c:	08004e23 	.word	0x08004e23
 80042a0:	08004e3f 	.word	0x08004e3f

080042a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b0b6      	sub	sp, #216	@ 0xd8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d102      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x24>
 80042fe:	2302      	movs	r3, #2
 8004300:	f000 bc13 	b.w	8004b2a <HAL_ADC_ConfigChannel+0x84a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fd11 	bl	8003d38 <LL_ADC_REG_IsConversionOngoing>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 83f3 	bne.w	8004b04 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7ff fbcb 	bl	8003ac6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fcff 	bl	8003d38 <LL_ADC_REG_IsConversionOngoing>
 800433a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fd0b 	bl	8003d5e <LL_ADC_INJ_IsConversionOngoing>
 8004348:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800434c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 81d9 	bne.w	8004708 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 81d4 	bne.w	8004708 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004368:	d10f      	bne.n	800438a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	4619      	mov	r1, r3
 8004376:	f7ff fbd2 	bl	8003b1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fb79 	bl	8003a7a <LL_ADC_SetSamplingTimeCommonConfig>
 8004388:	e00e      	b.n	80043a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	461a      	mov	r2, r3
 8004398:	f7ff fbc1 	bl	8003b1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fb69 	bl	8003a7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	08db      	lsrs	r3, r3, #3
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d022      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6919      	ldr	r1, [r3, #16]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043da:	f7ff fac3 	bl	8003964 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6919      	ldr	r1, [r3, #16]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7ff fb0f 	bl	8003a0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x126>
 8004400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004404:	e000      	b.n	8004408 <HAL_ADC_ConfigChannel+0x128>
 8004406:	2300      	movs	r3, #0
 8004408:	461a      	mov	r2, r3
 800440a:	f7ff fb1b 	bl	8003a44 <LL_ADC_SetOffsetSaturation>
 800440e:	e17b      	b.n	8004708 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fac8 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_ADC_ConfigChannel+0x15c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fabd 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	f003 021f 	and.w	r2, r3, #31
 800443a:	e01e      	b.n	800447a <HAL_ADC_ConfigChannel+0x19a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fab2 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004448:	4603      	mov	r3, r0
 800444a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800445a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800445e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e004      	b.n	8004478 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800446e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x1b2>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	e018      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x1e4>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80044a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80044ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e004      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80044ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d106      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fa81 	bl	80039d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fa65 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x222>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fa5a 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	0e9b      	lsrs	r3, r3, #26
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	e01e      	b.n	8004540 <HAL_ADC_ConfigChannel+0x260>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fa4f 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004530:	2320      	movs	r3, #32
 8004532:	e004      	b.n	800453e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x278>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	e018      	b.n	800458a <HAL_ADC_ConfigChannel+0x2aa>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800456c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004574:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800457c:	2320      	movs	r3, #32
 800457e:	e004      	b.n	800458a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458a:	429a      	cmp	r2, r3
 800458c:	d106      	bne.n	800459c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fa1e 	bl	80039d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fa02 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x2e8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f9f7 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	f003 021f 	and.w	r2, r3, #31
 80045c6:	e01e      	b.n	8004606 <HAL_ADC_ConfigChannel+0x326>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff f9ec 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80045e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045f6:	2320      	movs	r3, #32
 80045f8:	e004      	b.n	8004604 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <HAL_ADC_ConfigChannel+0x33e>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	e016      	b.n	800464c <HAL_ADC_ConfigChannel+0x36c>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004632:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004636:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800463e:	2320      	movs	r3, #32
 8004640:	e004      	b.n	800464c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464c:	429a      	cmp	r2, r3
 800464e:	d106      	bne.n	800465e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f9bd 	bl	80039d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2103      	movs	r1, #3
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff f9a1 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_ADC_ConfigChannel+0x3aa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2103      	movs	r1, #3
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff f996 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004680:	4603      	mov	r3, r0
 8004682:	0e9b      	lsrs	r3, r3, #26
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	e017      	b.n	80046ba <HAL_ADC_ConfigChannel+0x3da>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2103      	movs	r1, #3
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f98b 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004696:	4603      	mov	r3, r0
 8004698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80046a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80046a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80046b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x3f2>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0e9b      	lsrs	r3, r3, #26
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	e011      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x416>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80046e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80046e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e003      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d106      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	2103      	movs	r1, #3
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff f968 	bl	80039d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fad9 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 813d 	bne.w	8004994 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f7ff fa24 	bl	8003b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4aa2      	ldr	r2, [pc, #648]	@ (80049bc <HAL_ADC_ConfigChannel+0x6dc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f040 812e 	bne.w	8004994 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x480>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	3301      	adds	r3, #1
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2b09      	cmp	r3, #9
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e019      	b.n	8004794 <HAL_ADC_ConfigChannel+0x4b4>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800476e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004770:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004778:	2320      	movs	r3, #32
 800477a:	e003      	b.n	8004784 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800477c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2b09      	cmp	r3, #9
 800478c:	bf94      	ite	ls
 800478e:	2301      	movls	r3, #1
 8004790:	2300      	movhi	r3, #0
 8004792:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004794:	2b00      	cmp	r3, #0
 8004796:	d079      	beq.n	800488c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x4d4>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	0e9b      	lsrs	r3, r3, #26
 80047aa:	3301      	adds	r3, #1
 80047ac:	069b      	lsls	r3, r3, #26
 80047ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047b2:	e015      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x500>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80047cc:	2320      	movs	r3, #32
 80047ce:	e003      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80047d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	069b      	lsls	r3, r3, #26
 80047dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x520>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	3301      	adds	r3, #1
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f303 	lsl.w	r3, r1, r3
 80047fe:	e017      	b.n	8004830 <HAL_ADC_ConfigChannel+0x550>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004818:	2320      	movs	r3, #32
 800481a:	e003      	b.n	8004824 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800481c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800481e:	fab3 f383 	clz	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2101      	movs	r1, #1
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	ea42 0103 	orr.w	r1, r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x576>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0e9b      	lsrs	r3, r3, #26
 8004846:	3301      	adds	r3, #1
 8004848:	f003 021f 	and.w	r2, r3, #31
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	051b      	lsls	r3, r3, #20
 8004854:	e018      	b.n	8004888 <HAL_ADC_ConfigChannel+0x5a8>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800486e:	2320      	movs	r3, #32
 8004870:	e003      	b.n	800487a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004888:	430b      	orrs	r3, r1
 800488a:	e07e      	b.n	800498a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x5c8>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	0e9b      	lsrs	r3, r3, #26
 800489e:	3301      	adds	r3, #1
 80048a0:	069b      	lsls	r3, r3, #26
 80048a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048a6:	e015      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x5f4>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e003      	b.n	80048cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	069b      	lsls	r3, r3, #26
 80048d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x614>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	3301      	adds	r3, #1
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	e017      	b.n	8004924 <HAL_ADC_ConfigChannel+0x644>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	61fb      	str	r3, [r7, #28]
  return result;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800490c:	2320      	movs	r3, #32
 800490e:	e003      	b.n	8004918 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2101      	movs	r1, #1
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	ea42 0103 	orr.w	r1, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x670>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	3301      	adds	r3, #1
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	3b1e      	subs	r3, #30
 8004948:	051b      	lsls	r3, r3, #20
 800494a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800494e:	e01b      	b.n	8004988 <HAL_ADC_ConfigChannel+0x6a8>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	613b      	str	r3, [r7, #16]
  return result;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e003      	b.n	8004974 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f003 021f 	and.w	r2, r3, #31
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	3b1e      	subs	r3, #30
 8004982:	051b      	lsls	r3, r3, #20
 8004984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004988:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800498e:	4619      	mov	r1, r3
 8004990:	f7ff f8c5 	bl	8003b1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80be 	beq.w	8004b1e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049aa:	d004      	beq.n	80049b6 <HAL_ADC_ConfigChannel+0x6d6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10a      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x6ec>
 80049b6:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80049b8:	e009      	b.n	80049ce <HAL_ADC_ConfigChannel+0x6ee>
 80049ba:	bf00      	nop
 80049bc:	407f0000 	.word	0x407f0000
 80049c0:	80080000 	.word	0x80080000
 80049c4:	50000100 	.word	0x50000100
 80049c8:	50000300 	.word	0x50000300
 80049cc:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_ADC_ConfigChannel+0x854>)
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe ffba 	bl	8003948 <LL_ADC_GetCommonPathInternalCh>
 80049d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a56      	ldr	r2, [pc, #344]	@ (8004b38 <HAL_ADC_ConfigChannel+0x858>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x70c>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a55      	ldr	r2, [pc, #340]	@ (8004b3c <HAL_ADC_ConfigChannel+0x85c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d13a      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d134      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a00:	d005      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x72e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4e      	ldr	r2, [pc, #312]	@ (8004b40 <HAL_ADC_ConfigChannel+0x860>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 8085 	bne.w	8004b18 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a16:	d004      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x742>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a49      	ldr	r2, [pc, #292]	@ (8004b44 <HAL_ADC_ConfigChannel+0x864>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x746>
 8004a22:	4a49      	ldr	r2, [pc, #292]	@ (8004b48 <HAL_ADC_ConfigChannel+0x868>)
 8004a24:	e000      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x748>
 8004a26:	4a43      	ldr	r2, [pc, #268]	@ (8004b34 <HAL_ADC_ConfigChannel+0x854>)
 8004a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe ff75 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a38:	4b44      	ldr	r3, [pc, #272]	@ (8004b4c <HAL_ADC_ConfigChannel+0x86c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	4a44      	ldr	r2, [pc, #272]	@ (8004b50 <HAL_ADC_ConfigChannel+0x870>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a52:	e002      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f9      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a60:	e05a      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3b      	ldr	r2, [pc, #236]	@ (8004b54 <HAL_ADC_ConfigChannel+0x874>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d11f      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a31      	ldr	r2, [pc, #196]	@ (8004b44 <HAL_ADC_ConfigChannel+0x864>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d104      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x7ac>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <HAL_ADC_ConfigChannel+0x878>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d047      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a94:	d004      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0x7c0>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <HAL_ADC_ConfigChannel+0x864>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x7c4>
 8004aa0:	4a29      	ldr	r2, [pc, #164]	@ (8004b48 <HAL_ADC_ConfigChannel+0x868>)
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c6>
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <HAL_ADC_ConfigChannel+0x854>)
 8004aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe ff36 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ab6:	e031      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a27      	ldr	r2, [pc, #156]	@ (8004b5c <HAL_ADC_ConfigChannel+0x87c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d12d      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d127      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <HAL_ADC_ConfigChannel+0x864>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ae0:	d004      	beq.n	8004aec <HAL_ADC_ConfigChannel+0x80c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <HAL_ADC_ConfigChannel+0x864>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x810>
 8004aec:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <HAL_ADC_ConfigChannel+0x868>)
 8004aee:	e000      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x812>
 8004af0:	4a10      	ldr	r2, [pc, #64]	@ (8004b34 <HAL_ADC_ConfigChannel+0x854>)
 8004af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004af6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f7fe ff10 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
 8004b02:	e00c      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b16:	e002      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	37d8      	adds	r7, #216	@ 0xd8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	50000700 	.word	0x50000700
 8004b38:	c3210000 	.word	0xc3210000
 8004b3c:	90c00010 	.word	0x90c00010
 8004b40:	50000600 	.word	0x50000600
 8004b44:	50000100 	.word	0x50000100
 8004b48:	50000300 	.word	0x50000300
 8004b4c:	2000003c 	.word	0x2000003c
 8004b50:	053e2d63 	.word	0x053e2d63
 8004b54:	c7520000 	.word	0xc7520000
 8004b58:	50000500 	.word	0x50000500
 8004b5c:	cb840000 	.word	0xcb840000

08004b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f8a7 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d176      	bne.n	8004c6a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <ADC_Enable+0x114>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e062      	b.n	8004c6c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f862 	bl	8003c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb8:	d004      	beq.n	8004bc4 <ADC_Enable+0x64>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8004c78 <ADC_Enable+0x118>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <ADC_Enable+0x68>
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <ADC_Enable+0x11c>)
 8004bc6:	e000      	b.n	8004bca <ADC_Enable+0x6a>
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c80 <ADC_Enable+0x120>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe febc 	bl	8003948 <LL_ADC_GetCommonPathInternalCh>
 8004bd0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d013      	beq.n	8004c02 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bda:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <ADC_Enable+0x124>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	4a29      	ldr	r2, [pc, #164]	@ (8004c88 <ADC_Enable+0x128>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bf4:	e002      	b.n	8004bfc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f9      	bne.n	8004bf6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c02:	f7fe fe4d 	bl	80038a0 <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c08:	e028      	b.n	8004c5c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f858 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f828 	bl	8003c74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c24:	f7fe fe3c 	bl	80038a0 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d914      	bls.n	8004c5c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d00d      	beq.n	8004c5c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	f043 0210 	orr.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d1cf      	bne.n	8004c0a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	8000003f 	.word	0x8000003f
 8004c78:	50000100 	.word	0x50000100
 8004c7c:	50000300 	.word	0x50000300
 8004c80:	50000700 	.word	0x50000700
 8004c84:	2000003c 	.word	0x2000003c
 8004c88:	053e2d63 	.word	0x053e2d63

08004c8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff f826 	bl	8003cea <LL_ADC_IsDisableOngoing>
 8004c9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff f80d 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d047      	beq.n	8004d40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d144      	bne.n	8004d40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030d 	and.w	r3, r3, #13
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10c      	bne.n	8004cde <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe ffe7 	bl	8003c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cd6:	f7fe fde3 	bl	80038a0 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cdc:	e029      	b.n	8004d32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e023      	b.n	8004d42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cfa:	f7fe fdd1 	bl	80038a0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d914      	bls.n	8004d32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	f043 0210 	orr.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e007      	b.n	8004d42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1dc      	bne.n	8004cfa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d14b      	bne.n	8004dfc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d021      	beq.n	8004dc2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fe8c 	bl	8003aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d032      	beq.n	8004df4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d12b      	bne.n	8004df4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11f      	bne.n	8004df4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dc0:	e018      	b.n	8004df4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d111      	bne.n	8004df4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff fa55 	bl	80042a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dfa:	e00e      	b.n	8004e1a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fa5f 	bl	80042cc <HAL_ADC_ErrorCallback>
}
 8004e0e:	e004      	b.n	8004e1a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fa41 	bl	80042b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5c:	f043 0204 	orr.w	r2, r3, #4
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff fa31 	bl	80042cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <LL_ADC_IsEnabled>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <LL_ADC_IsEnabled+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <LL_ADC_IsEnabled+0x1a>
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <LL_ADC_StartCalibration>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004eaa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_ADC_IsCalibrationOnGoing>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ede:	d101      	bne.n	8004ee4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d101      	bne.n	8004f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_ADCEx_Calibration_Start+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e04d      	b.n	8004fd0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fea5 	bl	8004c8c <ADC_Disable>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d136      	bne.n	8004fba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	f043 0202 	orr.w	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff96 	bl	8004e98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f6c:	e014      	b.n	8004f98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d90d      	bls.n	8004f98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f80:	f023 0312 	bic.w	r3, r3, #18
 8004f84:	f043 0210 	orr.w	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e01b      	b.n	8004fd0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff94 	bl	8004eca <LL_ADC_IsCalibrationOnGoing>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e2      	bne.n	8004f6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	f023 0303 	bic.w	r3, r3, #3
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fb8:	e005      	b.n	8004fc6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbe:	f043 0210 	orr.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	0004de01 	.word	0x0004de01

08004fdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b0a1      	sub	sp, #132	@ 0x84
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0e7      	b.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005002:	2300      	movs	r3, #0
 8005004:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005006:	2300      	movs	r3, #0
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005012:	d102      	bne.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005014:	4b6f      	ldr	r3, [pc, #444]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	e009      	b.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6e      	ldr	r2, [pc, #440]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d102      	bne.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005024:	4b6d      	ldr	r3, [pc, #436]	@ (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	e001      	b.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0be      	b.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ff4f 	bl	8004ef2 <LL_ADC_REG_IsConversionOngoing>
 8005054:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ff49 	bl	8004ef2 <LL_ADC_REG_IsConversionOngoing>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 80a0 	bne.w	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 809c 	bne.w	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005078:	d004      	beq.n	8005084 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a55      	ldr	r2, [pc, #340]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005084:	4b56      	ldr	r3, [pc, #344]	@ (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005086:	e000      	b.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005088:	4b56      	ldr	r3, [pc, #344]	@ (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800508a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d04b      	beq.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050a6:	035b      	lsls	r3, r3, #13
 80050a8:	430b      	orrs	r3, r1
 80050aa:	431a      	orrs	r2, r3
 80050ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050b8:	d004      	beq.n	80050c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a45      	ldr	r2, [pc, #276]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10f      	bne.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050c8:	f7ff fed3 	bl	8004e72 <LL_ADC_IsEnabled>
 80050cc:	4604      	mov	r4, r0
 80050ce:	4841      	ldr	r0, [pc, #260]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050d0:	f7ff fecf 	bl	8004e72 <LL_ADC_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4323      	orrs	r3, r4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e012      	b.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80050e4:	483c      	ldr	r0, [pc, #240]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050e6:	f7ff fec4 	bl	8004e72 <LL_ADC_IsEnabled>
 80050ea:	4604      	mov	r4, r0
 80050ec:	483b      	ldr	r0, [pc, #236]	@ (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050ee:	f7ff fec0 	bl	8004e72 <LL_ADC_IsEnabled>
 80050f2:	4603      	mov	r3, r0
 80050f4:	431c      	orrs	r4, r3
 80050f6:	483c      	ldr	r0, [pc, #240]	@ (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050f8:	f7ff febb 	bl	8004e72 <LL_ADC_IsEnabled>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4323      	orrs	r3, r4
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d056      	beq.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800510e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005116:	f023 030f 	bic.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	6892      	ldr	r2, [r2, #8]
 8005122:	430a      	orrs	r2, r1
 8005124:	431a      	orrs	r2, r3
 8005126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005128:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800512a:	e047      	b.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800512c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005136:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005140:	d004      	beq.n	800514c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a23      	ldr	r2, [pc, #140]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10f      	bne.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800514c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005150:	f7ff fe8f 	bl	8004e72 <LL_ADC_IsEnabled>
 8005154:	4604      	mov	r4, r0
 8005156:	481f      	ldr	r0, [pc, #124]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005158:	f7ff fe8b 	bl	8004e72 <LL_ADC_IsEnabled>
 800515c:	4603      	mov	r3, r0
 800515e:	4323      	orrs	r3, r4
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e012      	b.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800516c:	481a      	ldr	r0, [pc, #104]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800516e:	f7ff fe80 	bl	8004e72 <LL_ADC_IsEnabled>
 8005172:	4604      	mov	r4, r0
 8005174:	4819      	ldr	r0, [pc, #100]	@ (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005176:	f7ff fe7c 	bl	8004e72 <LL_ADC_IsEnabled>
 800517a:	4603      	mov	r3, r0
 800517c:	431c      	orrs	r4, r3
 800517e:	481a      	ldr	r0, [pc, #104]	@ (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005180:	f7ff fe77 	bl	8004e72 <LL_ADC_IsEnabled>
 8005184:	4603      	mov	r3, r0
 8005186:	4323      	orrs	r3, r4
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d012      	beq.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800519e:	f023 030f 	bic.w	r3, r3, #15
 80051a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80051a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051a6:	e009      	b.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051ba:	e000      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3784      	adds	r7, #132	@ 0x84
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd90      	pop	{r4, r7, pc}
 80051d2:	bf00      	nop
 80051d4:	50000100 	.word	0x50000100
 80051d8:	50000400 	.word	0x50000400
 80051dc:	50000500 	.word	0x50000500
 80051e0:	50000300 	.word	0x50000300
 80051e4:	50000700 	.word	0x50000700
 80051e8:	50000600 	.word	0x50000600

080051ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800521e:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	60d3      	str	r3, [r2, #12]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005238:	4b04      	ldr	r3, [pc, #16]	@ (800524c <__NVIC_GetPriorityGrouping+0x18>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f003 0307 	and.w	r3, r3, #7
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0b      	blt.n	800527a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	@ (8005288 <__NVIC_EnableIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b00      	cmp	r3, #0
 800529e:	db0a      	blt.n	80052b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	490c      	ldr	r1, [pc, #48]	@ (80052d8 <__NVIC_SetPriority+0x4c>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	440b      	add	r3, r1
 80052b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b4:	e00a      	b.n	80052cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4908      	ldr	r1, [pc, #32]	@ (80052dc <__NVIC_SetPriority+0x50>)
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3b04      	subs	r3, #4
 80052c4:	0112      	lsls	r2, r2, #4
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	761a      	strb	r2, [r3, #24]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000e100 	.word	0xe000e100
 80052dc:	e000ed00 	.word	0xe000ed00

080052e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f1c3 0307 	rsb	r3, r3, #7
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf28      	it	cs
 80052fe:	2304      	movcs	r3, #4
 8005300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3304      	adds	r3, #4
 8005306:	2b06      	cmp	r3, #6
 8005308:	d902      	bls.n	8005310 <NVIC_EncodePriority+0x30>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3b03      	subs	r3, #3
 800530e:	e000      	b.n	8005312 <NVIC_EncodePriority+0x32>
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	401a      	ands	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005328:	f04f 31ff 	mov.w	r1, #4294967295
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43d9      	mvns	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	4313      	orrs	r3, r2
         );
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	@ 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005358:	d301      	bcc.n	800535e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800535a:	2301      	movs	r3, #1
 800535c:	e00f      	b.n	800537e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800535e:	4a0a      	ldr	r2, [pc, #40]	@ (8005388 <SysTick_Config+0x40>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3b01      	subs	r3, #1
 8005364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005366:	210f      	movs	r1, #15
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	f7ff ff8e 	bl	800528c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <SysTick_Config+0x40>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005376:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <SysTick_Config+0x40>)
 8005378:	2207      	movs	r2, #7
 800537a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	e000e010 	.word	0xe000e010

0800538c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff29 	bl	80051ec <__NVIC_SetPriorityGrouping>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	4603      	mov	r3, r0
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053b0:	f7ff ff40 	bl	8005234 <__NVIC_GetPriorityGrouping>
 80053b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7ff ff90 	bl	80052e0 <NVIC_EncodePriority>
 80053c0:	4602      	mov	r2, r0
 80053c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff5f 	bl	800528c <__NVIC_SetPriority>
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	4603      	mov	r3, r0
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff33 	bl	8005250 <__NVIC_EnableIRQ>
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff ffa4 	bl	8005348 <SysTick_Config>
 8005400:	4603      	mov	r3, r0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e08d      	b.n	800553a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	4b47      	ldr	r3, [pc, #284]	@ (8005544 <HAL_DMA_Init+0x138>)
 8005426:	429a      	cmp	r2, r3
 8005428:	d80f      	bhi.n	800544a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <HAL_DMA_Init+0x13c>)
 8005432:	4413      	add	r3, r2
 8005434:	4a45      	ldr	r2, [pc, #276]	@ (800554c <HAL_DMA_Init+0x140>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	009a      	lsls	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a42      	ldr	r2, [pc, #264]	@ (8005550 <HAL_DMA_Init+0x144>)
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40
 8005448:	e00e      	b.n	8005468 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	4b40      	ldr	r3, [pc, #256]	@ (8005554 <HAL_DMA_Init+0x148>)
 8005452:	4413      	add	r3, r2
 8005454:	4a3d      	ldr	r2, [pc, #244]	@ (800554c <HAL_DMA_Init+0x140>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	009a      	lsls	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a3c      	ldr	r2, [pc, #240]	@ (8005558 <HAL_DMA_Init+0x14c>)
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800548c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa2c 	bl	8005918 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c8:	d102      	bne.n	80054d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_DMA_Init+0x104>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d80c      	bhi.n	8005510 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa4c 	bl	8005994 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	e008      	b.n	8005522 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40020407 	.word	0x40020407
 8005548:	bffdfff8 	.word	0xbffdfff8
 800554c:	cccccccd 	.word	0xcccccccd
 8005550:	40020000 	.word	0x40020000
 8005554:	bffdfbf8 	.word	0xbffdfbf8
 8005558:	40020400 	.word	0x40020400

0800555c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_DMA_Start_IT+0x20>
 8005578:	2302      	movs	r3, #2
 800557a:	e066      	b.n	800564a <HAL_DMA_Start_IT+0xee>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d155      	bne.n	800563c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f970 	bl	800589a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 020e 	orr.w	r2, r2, #14
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e00f      	b.n	80055f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0204 	bic.w	r2, r2, #4
 80055e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 020a 	orr.w	r2, r2, #10
 80055f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005610:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005628:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e005      	b.n	8005648 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005644:	2302      	movs	r3, #2
 8005646:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d00d      	beq.n	8005686 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e047      	b.n	8005716 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 020e 	bic.w	r2, r2, #14
 8005694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f003 021f 	and.w	r2, r3, #31
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f202 	lsl.w	r2, r1, r2
 80056c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
    }
  }
  return status;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2204      	movs	r2, #4
 8005742:	409a      	lsls	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d026      	beq.n	800579a <HAL_DMA_IRQHandler+0x7a>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d021      	beq.n	800579a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d107      	bne.n	8005774 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	2104      	movs	r1, #4
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	2b00      	cmp	r3, #0
 800578e:	d071      	beq.n	8005874 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005798:	e06c      	b.n	8005874 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2202      	movs	r2, #2
 80057a4:	409a      	lsls	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d02e      	beq.n	800580c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d029      	beq.n	800580c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 020a 	bic.w	r2, r2, #10
 80057d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	f003 021f 	and.w	r2, r3, #31
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	2102      	movs	r1, #2
 80057ec:	fa01 f202 	lsl.w	r2, r1, r2
 80057f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d038      	beq.n	8005874 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800580a:	e033      	b.n	8005874 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2208      	movs	r2, #8
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02a      	beq.n	8005876 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d025      	beq.n	8005876 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 020e 	bic.w	r2, r2, #14
 8005838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583e:	f003 021f 	and.w	r2, r3, #31
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	2101      	movs	r1, #1
 8005848:	fa01 f202 	lsl.w	r2, r1, r2
 800584c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005874:	bf00      	nop
 8005876:	bf00      	nop
}
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800588c:	b2db      	uxtb	r3, r3
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058b0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	f003 021f 	and.w	r2, r3, #31
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	2101      	movs	r1, #1
 80058d2:	fa01 f202 	lsl.w	r2, r1, r2
 80058d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d108      	bne.n	80058fa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058f8:	e007      	b.n	800590a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d802      	bhi.n	8005932 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800592c:	4b15      	ldr	r3, [pc, #84]	@ (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e001      	b.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005934:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3b08      	subs	r3, #8
 8005942:	4a12      	ldr	r2, [pc, #72]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	009a      	lsls	r2, r3, #2
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	461a      	mov	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005962:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	2201      	movs	r2, #1
 800596c:	409a      	lsls	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40020407 	.word	0x40020407
 8005984:	40020800 	.word	0x40020800
 8005988:	40020820 	.word	0x40020820
 800598c:	cccccccd 	.word	0xcccccccd
 8005990:	40020880 	.word	0x40020880

08005994 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	461a      	mov	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a08      	ldr	r2, [pc, #32]	@ (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80059b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2201      	movs	r2, #1
 80059c2:	409a      	lsls	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	1000823f 	.word	0x1000823f
 80059d8:	40020940 	.word	0x40020940

080059dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059ea:	e15a      	b.n	8005ca2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fa01 f303 	lsl.w	r3, r1, r3
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 814c 	beq.w	8005c9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d005      	beq.n	8005a1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d130      	bne.n	8005a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	2203      	movs	r2, #3
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a52:	2201      	movs	r2, #1
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	f003 0201 	and.w	r2, r3, #1
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d017      	beq.n	8005aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d123      	bne.n	8005b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	08da      	lsrs	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3208      	adds	r2, #8
 8005ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	220f      	movs	r2, #15
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	08da      	lsrs	r2, r3, #3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3208      	adds	r2, #8
 8005b08:	6939      	ldr	r1, [r7, #16]
 8005b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	2203      	movs	r2, #3
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0203 	and.w	r2, r3, #3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80a6 	beq.w	8005c9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b50:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc0 <HAL_GPIO_Init+0x2e4>)
 8005b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b54:	4a5a      	ldr	r2, [pc, #360]	@ (8005cc0 <HAL_GPIO_Init+0x2e4>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b5c:	4b58      	ldr	r3, [pc, #352]	@ (8005cc0 <HAL_GPIO_Init+0x2e4>)
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b68:	4a56      	ldr	r2, [pc, #344]	@ (8005cc4 <HAL_GPIO_Init+0x2e8>)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	089b      	lsrs	r3, r3, #2
 8005b6e:	3302      	adds	r3, #2
 8005b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	220f      	movs	r2, #15
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b92:	d01f      	beq.n	8005bd4 <HAL_GPIO_Init+0x1f8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a4c      	ldr	r2, [pc, #304]	@ (8005cc8 <HAL_GPIO_Init+0x2ec>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d019      	beq.n	8005bd0 <HAL_GPIO_Init+0x1f4>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a4b      	ldr	r2, [pc, #300]	@ (8005ccc <HAL_GPIO_Init+0x2f0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_GPIO_Init+0x1f0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a4a      	ldr	r2, [pc, #296]	@ (8005cd0 <HAL_GPIO_Init+0x2f4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00d      	beq.n	8005bc8 <HAL_GPIO_Init+0x1ec>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a49      	ldr	r2, [pc, #292]	@ (8005cd4 <HAL_GPIO_Init+0x2f8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <HAL_GPIO_Init+0x1e8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a48      	ldr	r2, [pc, #288]	@ (8005cd8 <HAL_GPIO_Init+0x2fc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_GPIO_Init+0x1e4>
 8005bbc:	2305      	movs	r3, #5
 8005bbe:	e00a      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bc0:	2306      	movs	r3, #6
 8005bc2:	e008      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	e006      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e004      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e002      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_GPIO_Init+0x1fa>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	f002 0203 	and.w	r2, r2, #3
 8005bdc:	0092      	lsls	r2, r2, #2
 8005bde:	4093      	lsls	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005be6:	4937      	ldr	r1, [pc, #220]	@ (8005cc4 <HAL_GPIO_Init+0x2e8>)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	3302      	adds	r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf4:	4b39      	ldr	r3, [pc, #228]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c18:	4a30      	ldr	r2, [pc, #192]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c42:	4a26      	ldr	r2, [pc, #152]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c48:	4b24      	ldr	r3, [pc, #144]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c72:	4b1a      	ldr	r3, [pc, #104]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c96:	4a11      	ldr	r2, [pc, #68]	@ (8005cdc <HAL_GPIO_Init+0x300>)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f47f ae9d 	bne.w	80059ec <HAL_GPIO_Init+0x10>
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	48000400 	.word	0x48000400
 8005ccc:	48000800 	.word	0x48000800
 8005cd0:	48000c00 	.word	0x48000c00
 8005cd4:	48001000 	.word	0x48001000
 8005cd8:	48001400 	.word	0x48001400
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
 8005cec:	4613      	mov	r3, r2
 8005cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf0:	787b      	ldrb	r3, [r7, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cfc:	e002      	b.n	8005d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d1a:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d26:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f806 	bl	8005d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40010400 	.word	0x40010400

08005d40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e08d      	b.n	8005e84 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fb fecb 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	@ 0x24
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005da6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005db6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dcc:	609a      	str	r2, [r3, #8]
 8005dce:	e006      	b.n	8005dde <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ddc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d108      	bne.n	8005df8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	e007      	b.n	8005e08 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69d9      	ldr	r1, [r3, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	@ 0x28
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	461a      	mov	r2, r3
 8005e98:	460b      	mov	r3, r1
 8005e9a:	817b      	strh	r3, [r7, #10]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	f040 80ef 	bne.w	8006090 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0e5      	b.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e0de      	b.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2221      	movs	r2, #33	@ 0x21
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	893a      	ldrh	r2, [r7, #8]
 8005efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a66      	ldr	r2, [pc, #408]	@ (800609c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005f02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a66      	ldr	r2, [pc, #408]	@ (80060a0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005f08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2bff      	cmp	r3, #255	@ 0xff
 8005f12:	d906      	bls.n	8005f22 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	22ff      	movs	r2, #255	@ 0xff
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e007      	b.n	8005f32 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f30:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01a      	beq.n	8005f70 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f54:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d074      	beq.n	8006062 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d022      	beq.n	8005fc6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	4a47      	ldr	r2, [pc, #284]	@ (80060a4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005f86:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	4a46      	ldr	r2, [pc, #280]	@ (80060a8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005f8e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005fb0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005fb6:	f7ff fad1 	bl	800555c <HAL_DMA_Start_IT>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d13a      	bne.n	800603a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005fc4:	e013      	b.n	8005fee <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e051      	b.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	8979      	ldrh	r1, [r7, #10]
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80060ac <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f001 fba3 	bl	800774c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006020:	2110      	movs	r1, #16
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fbc4 	bl	80077b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e028      	b.n	800608c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f043 0210 	orr.w	r2, r3, #16
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e017      	b.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a12      	ldr	r2, [pc, #72]	@ (80060b0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006066:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	8979      	ldrh	r1, [r7, #10]
 800606e:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 fb68 	bl	800774c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006084:	2101      	movs	r1, #1
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 fb92 	bl	80077b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	ffff0000 	.word	0xffff0000
 80060a0:	080066cb 	.word	0x080066cb
 80060a4:	0800764b 	.word	0x0800764b
 80060a8:	080076e1 	.word	0x080076e1
 80060ac:	80002000 	.word	0x80002000
 80060b0:	0800628b 	.word	0x0800628b

080060b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
  }
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00f      	beq.n	800612a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006128:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006152:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	f043 0202 	orr.w	r2, r3, #2
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800617c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 030b 	and.w	r3, r3, #11
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 f91f 	bl	80073d4 <I2C_ITError>
  }
}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	70fb      	strb	r3, [r7, #3]
 80061fa:	4613      	mov	r3, r2
 80061fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627c:	b2db      	uxtb	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af02      	add	r7, sp, #8
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <I2C_Master_ISR_IT+0x1e>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e113      	b.n	80064d0 <I2C_Master_ISR_IT+0x246>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d012      	beq.n	80062e0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2210      	movs	r2, #16
 80062ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	f043 0204 	orr.w	r2, r3, #4
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 f992 	bl	8007602 <I2C_Flush_TXDR>
 80062de:	e0e4      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01d      	beq.n	8006330 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0304 	bic.w	r3, r3, #4
 80062fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800632e:	e0bc      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d128      	bne.n	800638c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d023      	beq.n	800638c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01e      	beq.n	800638c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80a8 	beq.w	80064aa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800638a:	e08e      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d05c      	beq.n	8006450 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800639c:	2b00      	cmp	r3, #0
 800639e:	d057      	beq.n	8006450 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d040      	beq.n	800642c <I2C_Master_ISR_IT+0x1a2>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d13c      	bne.n	800642c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063be:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2bff      	cmp	r3, #255	@ 0xff
 80063c8:	d90e      	bls.n	80063e8 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	@ 0xff
 80063ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	8a79      	ldrh	r1, [r7, #18]
 80063d8:	2300      	movs	r3, #0
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 f9b3 	bl	800774c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063e6:	e032      	b.n	800644e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063fa:	d00b      	beq.n	8006414 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006406:	8a79      	ldrh	r1, [r7, #18]
 8006408:	2000      	movs	r0, #0
 800640a:	9000      	str	r0, [sp, #0]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f001 f99d 	bl	800774c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006412:	e01c      	b.n	800644e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006418:	b2da      	uxtb	r2, r3
 800641a:	8a79      	ldrh	r1, [r7, #18]
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f001 f991 	bl	800774c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800642a:	e010      	b.n	800644e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800643a:	d003      	beq.n	8006444 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fcb0 	bl	8006da2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006442:	e032      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006444:	2140      	movs	r1, #64	@ 0x40
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 ffc4 	bl	80073d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800644c:	e02d      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
 800644e:	e02c      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d027      	beq.n	80064aa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006460:	2b00      	cmp	r3, #0
 8006462:	d022      	beq.n	80064aa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d119      	bne.n	80064a2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800647c:	d015      	beq.n	80064aa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006486:	d108      	bne.n	800649a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	e007      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fc81 	bl	8006da2 <I2C_ITMasterSeqCplt>
 80064a0:	e003      	b.n	80064aa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064a2:	2140      	movs	r1, #64	@ 0x40
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 ff95 	bl	80073d4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80064be:	6979      	ldr	r1, [r7, #20]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fd07 	bl	8006ed4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <I2C_Slave_ISR_IT+0x24>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e0e2      	b.n	80066c2 <I2C_Slave_ISR_IT+0x1ea>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fda2 	bl	8007064 <I2C_ITSlaveCplt>
 8006520:	e0ca      	b.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d04b      	beq.n	80065c4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006532:	2b00      	cmp	r3, #0
 8006534:	d046      	beq.n	80065c4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d128      	bne.n	8006592 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b28      	cmp	r3, #40	@ 0x28
 800654a:	d108      	bne.n	800655e <I2C_Slave_ISR_IT+0x86>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006552:	d104      	bne.n	800655e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006554:	6939      	ldr	r1, [r7, #16]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fee8 	bl	800732c <I2C_ITListenCplt>
 800655c:	e031      	b.n	80065c2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b29      	cmp	r3, #41	@ 0x29
 8006568:	d10e      	bne.n	8006588 <I2C_Slave_ISR_IT+0xb0>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006570:	d00a      	beq.n	8006588 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2210      	movs	r2, #16
 8006578:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 f841 	bl	8007602 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fc4b 	bl	8006e1c <I2C_ITSlaveSeqCplt>
 8006586:	e01c      	b.n	80065c2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2210      	movs	r2, #16
 800658e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006590:	e08f      	b.n	80066b2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2210      	movs	r2, #16
 8006598:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <I2C_Slave_ISR_IT+0xdc>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065b2:	d17e      	bne.n	80066b2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	4619      	mov	r1, r3
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 ff0a 	bl	80073d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80065c0:	e077      	b.n	80066b2 <I2C_Slave_ISR_IT+0x1da>
 80065c2:	e076      	b.n	80066b2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02f      	beq.n	800662e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02a      	beq.n	800662e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d018      	beq.n	8006614 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d14b      	bne.n	80066b6 <I2C_Slave_ISR_IT+0x1de>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006624:	d047      	beq.n	80066b6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fbf8 	bl	8006e1c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800662c:	e043      	b.n	80066b6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006642:	6939      	ldr	r1, [r7, #16]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fb28 	bl	8006c9a <I2C_ITAddrCplt>
 800664a:	e035      	b.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d030      	beq.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02b      	beq.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	851a      	strh	r2, [r3, #40]	@ 0x28
 800669a:	e00d      	b.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066a2:	d002      	beq.n	80066aa <I2C_Slave_ISR_IT+0x1d2>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fbb6 	bl	8006e1c <I2C_ITSlaveSeqCplt>
 80066b0:	e002      	b.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80066b6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b088      	sub	sp, #32
 80066ce:	af02      	add	r7, sp, #8
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <I2C_Master_ISR_DMA+0x1a>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e0d9      	b.n	8006898 <I2C_Master_ISR_DMA+0x1ce>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2210      	movs	r2, #16
 8006706:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670c:	f043 0204 	orr.w	r2, r3, #4
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006714:	2120      	movs	r1, #32
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f001 f84a 	bl	80077b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 ff70 	bl	8007602 <I2C_Flush_TXDR>
 8006722:	e0b4      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d071      	beq.n	8006812 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006734:	2b00      	cmp	r3, #0
 8006736:	d06c      	beq.n	8006812 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006746:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d04e      	beq.n	80067f0 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2bff      	cmp	r3, #255	@ 0xff
 8006768:	d906      	bls.n	8006778 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	@ 0xff
 800676e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006770:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e010      	b.n	800679a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678a:	d003      	beq.n	8006794 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e002      	b.n	800679a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006798:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	8a79      	ldrh	r1, [r7, #18]
 80067a2:	2300      	movs	r3, #0
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 ffcf 	bl	800774c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b22      	cmp	r3, #34	@ 0x22
 80067ca:	d108      	bne.n	80067de <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067dc:	e057      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067ee:	e04e      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067fe:	d003      	beq.n	8006808 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 face 	bl	8006da2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006806:	e042      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006808:	2140      	movs	r1, #64	@ 0x40
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fde2 	bl	80073d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006810:	e03d      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d028      	beq.n	800686e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d023      	beq.n	800686e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d119      	bne.n	8006864 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800683e:	d025      	beq.n	800688c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006848:	d108      	bne.n	800685c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006858:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800685a:	e017      	b.n	800688c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 faa0 	bl	8006da2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006862:	e013      	b.n	800688c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006864:	2140      	movs	r1, #64	@ 0x40
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fdb4 	bl	80073d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800686c:	e00e      	b.n	800688c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fb25 	bl	8006ed4 <I2C_ITMasterCplt>
 800688a:	e000      	b.n	800688e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800688c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80068ac:	4b8d      	ldr	r3, [pc, #564]	@ (8006ae4 <I2C_Mem_ISR_DMA+0x244>)
 80068ae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <I2C_Mem_ISR_DMA+0x1e>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e10e      	b.n	8006adc <I2C_Mem_ISR_DMA+0x23c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d016      	beq.n	80068fe <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2210      	movs	r2, #16
 80068e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e6:	f043 0204 	orr.w	r2, r3, #4
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80068ee:	2120      	movs	r1, #32
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 ff5d 	bl	80077b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fe83 	bl	8007602 <I2C_Flush_TXDR>
 80068fc:	e0e9      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800691a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f04f 32ff 	mov.w	r2, #4294967295
 8006922:	651a      	str	r2, [r3, #80]	@ 0x50
 8006924:	e0d5      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05f      	beq.n	80069f0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006936:	2b00      	cmp	r3, #0
 8006938:	d05a      	beq.n	80069f0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800693a:	2101      	movs	r1, #1
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 ffbb 	bl	80078b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006942:	2110      	movs	r1, #16
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 ff33 	bl	80077b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d048      	beq.n	80069e6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006958:	b29b      	uxth	r3, r3
 800695a:	2bff      	cmp	r3, #255	@ 0xff
 800695c:	d910      	bls.n	8006980 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	@ 0xff
 8006962:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006968:	b299      	uxth	r1, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800696e:	b2da      	uxtb	r2, r3
 8006970:	2300      	movs	r3, #0
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fee7 	bl	800774c <I2C_TransferConfig>
 800697e:	e011      	b.n	80069a4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698e:	b299      	uxth	r1, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006994:	b2da      	uxtb	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fed4 	bl	800774c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b22      	cmp	r3, #34	@ 0x22
 80069c0:	d108      	bne.n	80069d4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069d2:	e07e      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069e4:	e075      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069e6:	2140      	movs	r1, #64	@ 0x40
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fcf3 	bl	80073d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80069ee:	e070      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d05d      	beq.n	8006ab6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d058      	beq.n	8006ab6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a04:	2101      	movs	r1, #1
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 ff56 	bl	80078b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006a0c:	2110      	movs	r1, #16
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fece 	bl	80077b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b22      	cmp	r3, #34	@ 0x22
 8006a1e:	d101      	bne.n	8006a24 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006a20:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <I2C_Mem_ISR_DMA+0x248>)
 8006a22:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2bff      	cmp	r3, #255	@ 0xff
 8006a2c:	d910      	bls.n	8006a50 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	@ 0xff
 8006a32:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a38:	b299      	uxth	r1, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fe7f 	bl	800774c <I2C_TransferConfig>
 8006a4e:	e011      	b.n	8006a74 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5e:	b299      	uxth	r1, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 fe6c 	bl	800774c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b22      	cmp	r3, #34	@ 0x22
 8006a90:	d108      	bne.n	8006aa4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aa2:	e016      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ab2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ab4:	e00d      	b.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fa01 	bl	8006ed4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	80002000 	.word	0x80002000
 8006ae8:	80002400 	.word	0x80002400

08006aec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <I2C_Slave_ISR_DMA+0x24>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0c0      	b.n	8006c92 <I2C_Slave_ISR_DMA+0x1a6>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fa98 	bl	8007064 <I2C_ITSlaveCplt>
 8006b34:	e0a8      	b.n	8006c88 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8095 	beq.w	8006c6c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 808f 	beq.w	8006c6c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d07d      	beq.n	8006c5e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006b80:	2301      	movs	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00c      	beq.n	8006ba6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d128      	bne.n	8006bfe <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b28      	cmp	r3, #40	@ 0x28
 8006bb6:	d108      	bne.n	8006bca <I2C_Slave_ISR_DMA+0xde>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bbe:	d104      	bne.n	8006bca <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fbb2 	bl	800732c <I2C_ITListenCplt>
 8006bc8:	e048      	b.n	8006c5c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b29      	cmp	r3, #41	@ 0x29
 8006bd4:	d10e      	bne.n	8006bf4 <I2C_Slave_ISR_DMA+0x108>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bdc:	d00a      	beq.n	8006bf4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2210      	movs	r2, #16
 8006be4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fd0b 	bl	8007602 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f915 	bl	8006e1c <I2C_ITSlaveSeqCplt>
 8006bf2:	e033      	b.n	8006c5c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006bfc:	e034      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	f043 0204 	orr.w	r2, r3, #4
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c18:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <I2C_Slave_ISR_DMA+0x13c>
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c26:	d11f      	bne.n	8006c68 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b21      	cmp	r3, #33	@ 0x21
 8006c2c:	d002      	beq.n	8006c34 <I2C_Slave_ISR_DMA+0x148>
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b29      	cmp	r3, #41	@ 0x29
 8006c32:	d103      	bne.n	8006c3c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2221      	movs	r2, #33	@ 0x21
 8006c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c3a:	e008      	b.n	8006c4e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b22      	cmp	r3, #34	@ 0x22
 8006c40:	d002      	beq.n	8006c48 <I2C_Slave_ISR_DMA+0x15c>
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c46:	d102      	bne.n	8006c4e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2222      	movs	r2, #34	@ 0x22
 8006c4c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fbbd 	bl	80073d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8006c5a:	e005      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x17c>
 8006c5c:	e004      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2210      	movs	r2, #16
 8006c64:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c66:	e00f      	b.n	8006c88 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006c68:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c6a:	e00d      	b.n	8006c88 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f809 	bl	8006c9a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006cb0:	2b28      	cmp	r3, #40	@ 0x28
 8006cb2:	d16a      	bne.n	8006d8a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	0c1b      	lsrs	r3, r3, #16
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006cd2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006cee:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d138      	bne.n	8006d6a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006cf8:	897b      	ldrh	r3, [r7, #10]
 8006cfa:	09db      	lsrs	r3, r3, #7
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	89bb      	ldrh	r3, [r7, #12]
 8006d00:	4053      	eors	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f003 0306 	and.w	r3, r3, #6
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11c      	bne.n	8006d46 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d0c:	897b      	ldrh	r3, [r7, #10]
 8006d0e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d13b      	bne.n	8006d9a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d38:	89ba      	ldrh	r2, [r7, #12]
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fa55 	bl	80061ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d44:	e029      	b.n	8006d9a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d46:	893b      	ldrh	r3, [r7, #8]
 8006d48:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fdb2 	bl	80078b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d5c:	89ba      	ldrh	r2, [r7, #12]
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fa43 	bl	80061ee <HAL_I2C_AddrCallback>
}
 8006d68:	e017      	b.n	8006d9a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fda2 	bl	80078b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d7c:	89ba      	ldrh	r2, [r7, #12]
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fa33 	bl	80061ee <HAL_I2C_AddrCallback>
}
 8006d88:	e007      	b.n	8006d9a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2208      	movs	r2, #8
 8006d90:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b21      	cmp	r3, #33	@ 0x21
 8006dbc:	d115      	bne.n	8006dea <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2211      	movs	r2, #17
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fd6f 	bl	80078b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff f9db 	bl	800619e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006de8:	e014      	b.n	8006e14 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2212      	movs	r2, #18
 8006df6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006dfe:	2102      	movs	r1, #2
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fd59 	bl	80078b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f9cf 	bl	80061b2 <HAL_I2C_MasterRxCpltCallback>
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e00c      	b.n	8006e6a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b29      	cmp	r3, #41	@ 0x29
 8006e74:	d112      	bne.n	8006e9c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2228      	movs	r2, #40	@ 0x28
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e84:	2101      	movs	r1, #1
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fd16 	bl	80078b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff f996 	bl	80061c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e9a:	e017      	b.n	8006ecc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ea6:	d111      	bne.n	8006ecc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2228      	movs	r2, #40	@ 0x28
 8006eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fcfd 	bl	80078b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff f987 	bl	80061da <HAL_I2C_SlaveRxCpltCallback>
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b21      	cmp	r3, #33	@ 0x21
 8006ef4:	d107      	bne.n	8006f06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fcdd 	bl	80078b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2211      	movs	r2, #17
 8006f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f04:	e00c      	b.n	8006f20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b22      	cmp	r3, #34	@ 0x22
 8006f10:	d106      	bne.n	8006f20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f12:	2102      	movs	r1, #2
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fccf 	bl	80078b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2212      	movs	r2, #18
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800705c <I2C_ITMasterCplt+0x188>)
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a49      	ldr	r2, [pc, #292]	@ (8007060 <I2C_ITMasterCplt+0x18c>)
 8006f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	f043 0204 	orr.w	r2, r3, #4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b60      	cmp	r3, #96	@ 0x60
 8006f64:	d10a      	bne.n	8006f7c <I2C_ITMasterCplt+0xa8>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb40 	bl	8007602 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b60      	cmp	r3, #96	@ 0x60
 8006f92:	d002      	beq.n	8006f9a <I2C_ITMasterCplt+0xc6>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa17 	bl	80073d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fa6:	e054      	b.n	8007052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b21      	cmp	r3, #33	@ 0x21
 8006fb2:	d124      	bne.n	8006ffe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	d10b      	bne.n	8006fe6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff f91d 	bl	800621e <HAL_I2C_MemTxCpltCallback>
}
 8006fe4:	e035      	b.n	8007052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff f8d1 	bl	800619e <HAL_I2C_MasterTxCpltCallback>
}
 8006ffc:	e029      	b.n	8007052 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b22      	cmp	r3, #34	@ 0x22
 8007008:	d123      	bne.n	8007052 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b40      	cmp	r3, #64	@ 0x40
 8007022:	d10b      	bne.n	800703c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff f8fc 	bl	8006232 <HAL_I2C_MemRxCpltCallback>
}
 800703a:	e00a      	b.n	8007052 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff f8b0 	bl	80061b2 <HAL_I2C_MasterRxCpltCallback>
}
 8007052:	bf00      	nop
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	fe00e800 	.word	0xfe00e800
 8007060:	ffff0000 	.word	0xffff0000

08007064 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007086:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2220      	movs	r2, #32
 800708e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	2b21      	cmp	r3, #33	@ 0x21
 8007094:	d002      	beq.n	800709c <I2C_ITSlaveCplt+0x38>
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	2b29      	cmp	r3, #41	@ 0x29
 800709a:	d108      	bne.n	80070ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800709c:	f248 0101 	movw	r1, #32769	@ 0x8001
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc09 	bl	80078b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2221      	movs	r2, #33	@ 0x21
 80070aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ac:	e019      	b.n	80070e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	2b22      	cmp	r3, #34	@ 0x22
 80070b2:	d002      	beq.n	80070ba <I2C_ITSlaveCplt+0x56>
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b8:	d108      	bne.n	80070cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80070ba:	f248 0102 	movw	r1, #32770	@ 0x8002
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fbfa 	bl	80078b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2222      	movs	r2, #34	@ 0x22
 80070c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ca:	e00a      	b.n	80070e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b28      	cmp	r3, #40	@ 0x28
 80070d0:	d107      	bne.n	80070e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80070d2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fbee 	bl	80078b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6859      	ldr	r1, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b89      	ldr	r3, [pc, #548]	@ (8007324 <I2C_ITSlaveCplt+0x2c0>)
 80070fe:	400b      	ands	r3, r1
 8007100:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa7d 	bl	8007602 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d013      	beq.n	800713a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007120:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01f      	beq.n	800716a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007138:	e017      	b.n	800716a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007152:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d006      	beq.n	800716a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0304 	bic.w	r3, r3, #4
 800717a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	f043 0204 	orr.w	r2, r3, #4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d049      	beq.n	800726a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d044      	beq.n	800726a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d128      	bne.n	800723c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b28      	cmp	r3, #40	@ 0x28
 80071f4:	d108      	bne.n	8007208 <I2C_ITSlaveCplt+0x1a4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071fc:	d104      	bne.n	8007208 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f893 	bl	800732c <I2C_ITListenCplt>
 8007206:	e030      	b.n	800726a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b29      	cmp	r3, #41	@ 0x29
 8007212:	d10e      	bne.n	8007232 <I2C_ITSlaveCplt+0x1ce>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800721a:	d00a      	beq.n	8007232 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2210      	movs	r2, #16
 8007222:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9ec 	bl	8007602 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fdf6 	bl	8006e1c <I2C_ITSlaveSeqCplt>
 8007230:	e01b      	b.n	800726a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	61da      	str	r2, [r3, #28]
 800723a:	e016      	b.n	800726a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007248:	f043 0204 	orr.w	r2, r3, #4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <I2C_ITSlaveCplt+0x1fa>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800725c:	d105      	bne.n	800726a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f8b5 	bl	80073d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727c:	2b00      	cmp	r3, #0
 800727e:	d010      	beq.n	80072a2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8a4 	bl	80073d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b28      	cmp	r3, #40	@ 0x28
 8007296:	d141      	bne.n	800731c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007298:	6979      	ldr	r1, [r7, #20]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f846 	bl	800732c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072a0:	e03c      	b.n	800731c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072aa:	d014      	beq.n	80072d6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fdb5 	bl	8006e1c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007328 <I2C_ITSlaveCplt+0x2c4>)
 80072b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fe ff9b 	bl	800620a <HAL_I2C_ListenCpltCallback>
}
 80072d4:	e022      	b.n	800731c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b22      	cmp	r3, #34	@ 0x22
 80072e0:	d10e      	bne.n	8007300 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fe ff6e 	bl	80061da <HAL_I2C_SlaveRxCpltCallback>
}
 80072fe:	e00d      	b.n	800731c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fe ff55 	bl	80061c6 <HAL_I2C_SlaveTxCpltCallback>
}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	fe00e800 	.word	0xfe00e800
 8007328:	ffff0000 	.word	0xffff0000

0800732c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a25      	ldr	r2, [pc, #148]	@ (80073d0 <I2C_ITListenCplt+0xa4>)
 800733a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d022      	beq.n	80073a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	f043 0204 	orr.w	r2, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa83 	bl	80078b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2210      	movs	r2, #16
 80073b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe ff21 	bl	800620a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	ffff0000 	.word	0xffff0000

080073d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a6d      	ldr	r2, [pc, #436]	@ (80075a8 <I2C_ITError+0x1d4>)
 80073f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b28      	cmp	r3, #40	@ 0x28
 800740a:	d005      	beq.n	8007418 <I2C_ITError+0x44>
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b29      	cmp	r3, #41	@ 0x29
 8007410:	d002      	beq.n	8007418 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b2a      	cmp	r3, #42	@ 0x2a
 8007416:	d10b      	bne.n	8007430 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007418:	2103      	movs	r1, #3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa4c 	bl	80078b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2228      	movs	r2, #40	@ 0x28
 8007424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a60      	ldr	r2, [pc, #384]	@ (80075ac <I2C_ITError+0x1d8>)
 800742c:	635a      	str	r2, [r3, #52]	@ 0x34
 800742e:	e030      	b.n	8007492 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007430:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa3f 	bl	80078b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8e1 	bl	8007602 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b60      	cmp	r3, #96	@ 0x60
 800744a:	d01f      	beq.n	800748c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d114      	bne.n	800748c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b10      	cmp	r3, #16
 800746e:	d109      	bne.n	8007484 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2210      	movs	r2, #16
 8007476:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747c:	f043 0204 	orr.w	r2, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2220      	movs	r2, #32
 800748a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007496:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d039      	beq.n	8007514 <I2C_ITError+0x140>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b11      	cmp	r3, #17
 80074a4:	d002      	beq.n	80074ac <I2C_ITError+0xd8>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b21      	cmp	r3, #33	@ 0x21
 80074aa:	d133      	bne.n	8007514 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074ba:	d107      	bne.n	80074cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe f9d4 	bl	800587e <HAL_DMA_GetState>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d017      	beq.n	800750c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	4a33      	ldr	r2, [pc, #204]	@ (80075b0 <I2C_ITError+0x1dc>)
 80074e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe f8ae 	bl	8005652 <HAL_DMA_Abort_IT>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d04d      	beq.n	8007598 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007506:	4610      	mov	r0, r2
 8007508:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800750a:	e045      	b.n	8007598 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f851 	bl	80075b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007512:	e041      	b.n	8007598 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d039      	beq.n	8007590 <I2C_ITError+0x1bc>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b12      	cmp	r3, #18
 8007520:	d002      	beq.n	8007528 <I2C_ITError+0x154>
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b22      	cmp	r3, #34	@ 0x22
 8007526:	d133      	bne.n	8007590 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007536:	d107      	bne.n	8007548 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007546:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe f996 	bl	800587e <HAL_DMA_GetState>
 8007552:	4603      	mov	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d017      	beq.n	8007588 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755c:	4a14      	ldr	r2, [pc, #80]	@ (80075b0 <I2C_ITError+0x1dc>)
 800755e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe f870 	bl	8005652 <HAL_DMA_Abort_IT>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007582:	4610      	mov	r0, r2
 8007584:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007586:	e009      	b.n	800759c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f813 	bl	80075b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800758e:	e005      	b.n	800759c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f80f 	bl	80075b4 <I2C_TreatErrorCallback>
  }
}
 8007596:	e002      	b.n	800759e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800759c:	bf00      	nop
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	ffff0000 	.word	0xffff0000
 80075ac:	080064d9 	.word	0x080064d9
 80075b0:	0800770f 	.word	0x0800770f

080075b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b60      	cmp	r3, #96	@ 0x60
 80075c6:	d10e      	bne.n	80075e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fe fe3b 	bl	800625a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075e4:	e009      	b.n	80075fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fe fe26 	bl	8006246 <HAL_I2C_ErrorCallback>
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b02      	cmp	r3, #2
 8007616:	d103      	bne.n	8007620 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d007      	beq.n	800763e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0201 	orr.w	r2, r2, #1
 800763c:	619a      	str	r2, [r3, #24]
  }
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007666:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007672:	2120      	movs	r1, #32
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f89b 	bl	80077b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800767a:	e02d      	b.n	80076d8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	2bff      	cmp	r3, #255	@ 0xff
 8007692:	d903      	bls.n	800769c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	22ff      	movs	r2, #255	@ 0xff
 8007698:	851a      	strh	r2, [r3, #40]	@ 0x28
 800769a:	e004      	b.n	80076a6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	4619      	mov	r1, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3328      	adds	r3, #40	@ 0x28
 80076b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80076bc:	f7fd ff4e 	bl	800555c <HAL_DMA_Start_IT>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80076c6:	2110      	movs	r1, #16
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff fe83 	bl	80073d4 <I2C_ITError>
}
 80076ce:	e003      	b.n	80076d8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80076d0:	2140      	movs	r1, #64	@ 0x40
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f86c 	bl	80077b0 <I2C_Enable_IRQ>
}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076fc:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80076fe:	2110      	movs	r1, #16
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7ff fe67 	bl	80073d4 <I2C_ITError>
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	2200      	movs	r2, #0
 800773a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff ff39 	bl	80075b4 <I2C_TreatErrorCallback>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	817b      	strh	r3, [r7, #10]
 800775a:	4613      	mov	r3, r2
 800775c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800775e:	897b      	ldrh	r3, [r7, #10]
 8007760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007764:	7a7b      	ldrb	r3, [r7, #9]
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800776c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	4313      	orrs	r3, r2
 8007776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800777a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	0d5b      	lsrs	r3, r3, #21
 8007786:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800778a:	4b08      	ldr	r3, [pc, #32]	@ (80077ac <I2C_TransferConfig+0x60>)
 800778c:	430b      	orrs	r3, r1
 800778e:	43db      	mvns	r3, r3
 8007790:	ea02 0103 	and.w	r1, r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	03ff63ff 	.word	0x03ff63ff

080077b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c4:	4a39      	ldr	r2, [pc, #228]	@ (80078ac <I2C_Enable_IRQ+0xfc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d032      	beq.n	8007830 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80077ce:	4a38      	ldr	r2, [pc, #224]	@ (80078b0 <I2C_Enable_IRQ+0x100>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d02d      	beq.n	8007830 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80077d8:	4a36      	ldr	r2, [pc, #216]	@ (80078b4 <I2C_Enable_IRQ+0x104>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d028      	beq.n	8007830 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80077de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da03      	bge.n	80077ee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80077ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80077fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007800:	887b      	ldrh	r3, [r7, #2]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007810:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	2b10      	cmp	r3, #16
 8007816:	d103      	bne.n	8007820 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800781e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	2b20      	cmp	r3, #32
 8007824:	d133      	bne.n	800788e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f043 0320 	orr.w	r3, r3, #32
 800782c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800782e:	e02e      	b.n	800788e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007830:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	da03      	bge.n	8007840 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800783e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007840:	887b      	ldrh	r3, [r7, #2]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007850:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007862:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007864:	887b      	ldrh	r3, [r7, #2]
 8007866:	2b10      	cmp	r3, #16
 8007868:	d103      	bne.n	8007872 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007870:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007872:	887b      	ldrh	r3, [r7, #2]
 8007874:	2b20      	cmp	r3, #32
 8007876:	d103      	bne.n	8007880 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800787e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007880:	887b      	ldrh	r3, [r7, #2]
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d103      	bne.n	800788e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	080066cb 	.word	0x080066cb
 80078b0:	08006aed 	.word	0x08006aed
 80078b4:	080068a1 	.word	0x080068a1

080078b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80078c8:	887b      	ldrh	r3, [r7, #2]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00f      	beq.n	80078f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80078d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078e6:	2b28      	cmp	r3, #40	@ 0x28
 80078e8:	d003      	beq.n	80078f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80078f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078f2:	887b      	ldrh	r3, [r7, #2]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00f      	beq.n	800791c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007902:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007910:	2b28      	cmp	r3, #40	@ 0x28
 8007912:	d003      	beq.n	800791c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800791a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800791c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007920:	2b00      	cmp	r3, #0
 8007922:	da03      	bge.n	800792c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800792a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800792c:	887b      	ldrh	r3, [r7, #2]
 800792e:	2b10      	cmp	r3, #16
 8007930:	d103      	bne.n	800793a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007938:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800793a:	887b      	ldrh	r3, [r7, #2]
 800793c:	2b20      	cmp	r3, #32
 800793e:	d103      	bne.n	8007948 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f043 0320 	orr.w	r3, r3, #32
 8007946:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007948:	887b      	ldrh	r3, [r7, #2]
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d103      	bne.n	8007956 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007954:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6819      	ldr	r1, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	43da      	mvns	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	400a      	ands	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b20      	cmp	r3, #32
 8007988:	d138      	bne.n	80079fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007994:	2302      	movs	r3, #2
 8007996:	e032      	b.n	80079fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2224      	movs	r2, #36	@ 0x24
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	e000      	b.n	80079fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079fc:	2302      	movs	r3, #2
  }
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d139      	bne.n	8007a94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e033      	b.n	8007a96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2224      	movs	r2, #36	@ 0x24
 8007a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0201 	orr.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d141      	bne.n	8007b36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abe:	d131      	bne.n	8007b24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ac0:	4b47      	ldr	r3, [pc, #284]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac6:	4a46      	ldr	r2, [pc, #280]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ad0:	4b43      	ldr	r3, [pc, #268]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007ad8:	4a41      	ldr	r2, [pc, #260]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ae0:	4b40      	ldr	r3, [pc, #256]	@ (8007be4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2232      	movs	r2, #50	@ 0x32
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	4a3f      	ldr	r2, [pc, #252]	@ (8007be8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	0c9b      	lsrs	r3, r3, #18
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007af6:	e002      	b.n	8007afe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007afe:	4b38      	ldr	r3, [pc, #224]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0a:	d102      	bne.n	8007b12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f2      	bne.n	8007af8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b12:	4b33      	ldr	r3, [pc, #204]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1e:	d158      	bne.n	8007bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e057      	b.n	8007bd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b24:	4b2e      	ldr	r3, [pc, #184]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b34:	e04d      	b.n	8007bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3c:	d141      	bne.n	8007bc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b3e:	4b28      	ldr	r3, [pc, #160]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b4a:	d131      	bne.n	8007bb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b4c:	4b24      	ldr	r3, [pc, #144]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	4a23      	ldr	r2, [pc, #140]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b5c:	4b20      	ldr	r3, [pc, #128]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b64:	4a1e      	ldr	r2, [pc, #120]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007be4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2232      	movs	r2, #50	@ 0x32
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	0c9b      	lsrs	r3, r3, #18
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b82:	e002      	b.n	8007b8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b96:	d102      	bne.n	8007b9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1f2      	bne.n	8007b84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b9e:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007baa:	d112      	bne.n	8007bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e011      	b.n	8007bd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007bc0:	e007      	b.n	8007bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bc2:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bca:	4a05      	ldr	r2, [pc, #20]	@ (8007be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	40007000 	.word	0x40007000
 8007be4:	2000003c 	.word	0x2000003c
 8007be8:	431bde83 	.word	0x431bde83

08007bec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	4a04      	ldr	r2, [pc, #16]	@ (8007c08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bfa:	6093      	str	r3, [r2, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40007000 	.word	0x40007000

08007c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e2fe      	b.n	800821c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d075      	beq.n	8007d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c2a:	4b97      	ldr	r3, [pc, #604]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c34:	4b94      	ldr	r3, [pc, #592]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b0c      	cmp	r3, #12
 8007c42:	d102      	bne.n	8007c4a <HAL_RCC_OscConfig+0x3e>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d002      	beq.n	8007c50 <HAL_RCC_OscConfig+0x44>
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d10b      	bne.n	8007c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c50:	4b8d      	ldr	r3, [pc, #564]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d05b      	beq.n	8007d14 <HAL_RCC_OscConfig+0x108>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d157      	bne.n	8007d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e2d9      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c70:	d106      	bne.n	8007c80 <HAL_RCC_OscConfig+0x74>
 8007c72:	4b85      	ldr	r3, [pc, #532]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a84      	ldr	r2, [pc, #528]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e01d      	b.n	8007cbc <HAL_RCC_OscConfig+0xb0>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x98>
 8007c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	4b7c      	ldr	r3, [pc, #496]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a7b      	ldr	r2, [pc, #492]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCC_OscConfig+0xb0>
 8007ca4:	4b78      	ldr	r3, [pc, #480]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a77      	ldr	r2, [pc, #476]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	4b75      	ldr	r3, [pc, #468]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a74      	ldr	r2, [pc, #464]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d013      	beq.n	8007cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc4:	f7fb fdec 	bl	80038a0 <HAL_GetTick>
 8007cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ccc:	f7fb fde8 	bl	80038a0 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b64      	cmp	r3, #100	@ 0x64
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e29e      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cde:	4b6a      	ldr	r3, [pc, #424]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f0      	beq.n	8007ccc <HAL_RCC_OscConfig+0xc0>
 8007cea:	e014      	b.n	8007d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fb fdd8 	bl	80038a0 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf4:	f7fb fdd4 	bl	80038a0 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	@ 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e28a      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d06:	4b60      	ldr	r3, [pc, #384]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xe8>
 8007d12:	e000      	b.n	8007d16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d075      	beq.n	8007e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d22:	4b59      	ldr	r3, [pc, #356]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d2c:	4b56      	ldr	r3, [pc, #344]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCC_OscConfig+0x136>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d002      	beq.n	8007d48 <HAL_RCC_OscConfig+0x13c>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d11f      	bne.n	8007d88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d48:	4b4f      	ldr	r3, [pc, #316]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCC_OscConfig+0x154>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e25d      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d60:	4b49      	ldr	r3, [pc, #292]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	061b      	lsls	r3, r3, #24
 8007d6e:	4946      	ldr	r1, [pc, #280]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d74:	4b45      	ldr	r3, [pc, #276]	@ (8007e8c <HAL_RCC_OscConfig+0x280>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fb fd45 	bl	8003808 <HAL_InitTick>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d043      	beq.n	8007e0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e249      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d023      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d90:	4b3d      	ldr	r3, [pc, #244]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a3c      	ldr	r2, [pc, #240]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9c:	f7fb fd80 	bl	80038a0 <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007da4:	f7fb fd7c 	bl	80038a0 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e232      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007db6:	4b34      	ldr	r3, [pc, #208]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc2:	4b31      	ldr	r3, [pc, #196]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	492d      	ldr	r1, [pc, #180]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	604b      	str	r3, [r1, #4]
 8007dd6:	e01a      	b.n	8007e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007dde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fb fd5c 	bl	80038a0 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dec:	f7fb fd58 	bl	80038a0 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e20e      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dfe:	4b22      	ldr	r3, [pc, #136]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x1e0>
 8007e0a:	e000      	b.n	8007e0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d041      	beq.n	8007e9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01c      	beq.n	8007e5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e22:	4b19      	ldr	r3, [pc, #100]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e28:	4a17      	ldr	r2, [pc, #92]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e2a:	f043 0301 	orr.w	r3, r3, #1
 8007e2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e32:	f7fb fd35 	bl	80038a0 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e3a:	f7fb fd31 	bl	80038a0 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e1e7      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0ef      	beq.n	8007e3a <HAL_RCC_OscConfig+0x22e>
 8007e5a:	e020      	b.n	8007e9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e62:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <HAL_RCC_OscConfig+0x27c>)
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e6c:	f7fb fd18 	bl	80038a0 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e72:	e00d      	b.n	8007e90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e74:	f7fb fd14 	bl	80038a0 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d906      	bls.n	8007e90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e1ca      	b.n	800821c <HAL_RCC_OscConfig+0x610>
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e90:	4b8c      	ldr	r3, [pc, #560]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1ea      	bne.n	8007e74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80a6 	beq.w	8007ff8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eac:	2300      	movs	r3, #0
 8007eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007eb0:	4b84      	ldr	r3, [pc, #528]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x2b4>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCC_OscConfig+0x2b6>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eca:	4a7e      	ldr	r2, [pc, #504]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ee2:	4b79      	ldr	r3, [pc, #484]	@ (80080c8 <HAL_RCC_OscConfig+0x4bc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d118      	bne.n	8007f20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eee:	4b76      	ldr	r3, [pc, #472]	@ (80080c8 <HAL_RCC_OscConfig+0x4bc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a75      	ldr	r2, [pc, #468]	@ (80080c8 <HAL_RCC_OscConfig+0x4bc>)
 8007ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007efa:	f7fb fcd1 	bl	80038a0 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f02:	f7fb fccd 	bl	80038a0 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e183      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f14:	4b6c      	ldr	r3, [pc, #432]	@ (80080c8 <HAL_RCC_OscConfig+0x4bc>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0f0      	beq.n	8007f02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d108      	bne.n	8007f3a <HAL_RCC_OscConfig+0x32e>
 8007f28:	4b66      	ldr	r3, [pc, #408]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2e:	4a65      	ldr	r2, [pc, #404]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f38:	e024      	b.n	8007f84 <HAL_RCC_OscConfig+0x378>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d110      	bne.n	8007f64 <HAL_RCC_OscConfig+0x358>
 8007f42:	4b60      	ldr	r3, [pc, #384]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f48:	4a5e      	ldr	r2, [pc, #376]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f4a:	f043 0304 	orr.w	r3, r3, #4
 8007f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f52:	4b5c      	ldr	r3, [pc, #368]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f58:	4a5a      	ldr	r2, [pc, #360]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f62:	e00f      	b.n	8007f84 <HAL_RCC_OscConfig+0x378>
 8007f64:	4b57      	ldr	r3, [pc, #348]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6a:	4a56      	ldr	r2, [pc, #344]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f74:	4b53      	ldr	r3, [pc, #332]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7a:	4a52      	ldr	r2, [pc, #328]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007f7c:	f023 0304 	bic.w	r3, r3, #4
 8007f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d016      	beq.n	8007fba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8c:	f7fb fc88 	bl	80038a0 <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f92:	e00a      	b.n	8007faa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f94:	f7fb fc84 	bl	80038a0 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e138      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007faa:	4b46      	ldr	r3, [pc, #280]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0ed      	beq.n	8007f94 <HAL_RCC_OscConfig+0x388>
 8007fb8:	e015      	b.n	8007fe6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fba:	f7fb fc71 	bl	80038a0 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fc0:	e00a      	b.n	8007fd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fc2:	f7fb fc6d 	bl	80038a0 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e121      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1ed      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fe6:	7ffb      	ldrb	r3, [r7, #31]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fec:	4b35      	ldr	r3, [pc, #212]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff0:	4a34      	ldr	r2, [pc, #208]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8007ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ff6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b00      	cmp	r3, #0
 8008002:	d03c      	beq.n	800807e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01c      	beq.n	8008046 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800800c:	4b2d      	ldr	r3, [pc, #180]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 800800e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008012:	4a2c      	ldr	r2, [pc, #176]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801c:	f7fb fc40 	bl	80038a0 <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008024:	f7fb fc3c 	bl	80038a0 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0f2      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008036:	4b23      	ldr	r3, [pc, #140]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8008038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0ef      	beq.n	8008024 <HAL_RCC_OscConfig+0x418>
 8008044:	e01b      	b.n	800807e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008046:	4b1f      	ldr	r3, [pc, #124]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8008048:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800804c:	4a1d      	ldr	r2, [pc, #116]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 800804e:	f023 0301 	bic.w	r3, r3, #1
 8008052:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008056:	f7fb fc23 	bl	80038a0 <HAL_GetTick>
 800805a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800805e:	f7fb fc1f 	bl	80038a0 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e0d5      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008070:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 8008072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1ef      	bne.n	800805e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80c9 	beq.w	800821a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008088:	4b0e      	ldr	r3, [pc, #56]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 030c 	and.w	r3, r3, #12
 8008090:	2b0c      	cmp	r3, #12
 8008092:	f000 8083 	beq.w	800819c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d15e      	bne.n	800815c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800809e:	4b09      	ldr	r3, [pc, #36]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a08      	ldr	r2, [pc, #32]	@ (80080c4 <HAL_RCC_OscConfig+0x4b8>)
 80080a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080aa:	f7fb fbf9 	bl	80038a0 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080b0:	e00c      	b.n	80080cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b2:	f7fb fbf5 	bl	80038a0 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d905      	bls.n	80080cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0ab      	b.n	800821c <HAL_RCC_OscConfig+0x610>
 80080c4:	40021000 	.word	0x40021000
 80080c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080cc:	4b55      	ldr	r3, [pc, #340]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1ec      	bne.n	80080b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080d8:	4b52      	ldr	r3, [pc, #328]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	4b52      	ldr	r3, [pc, #328]	@ (8008228 <HAL_RCC_OscConfig+0x61c>)
 80080de:	4013      	ands	r3, r2
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6a11      	ldr	r1, [r2, #32]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080e8:	3a01      	subs	r2, #1
 80080ea:	0112      	lsls	r2, r2, #4
 80080ec:	4311      	orrs	r1, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80080f2:	0212      	lsls	r2, r2, #8
 80080f4:	4311      	orrs	r1, r2
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80080fa:	0852      	lsrs	r2, r2, #1
 80080fc:	3a01      	subs	r2, #1
 80080fe:	0552      	lsls	r2, r2, #21
 8008100:	4311      	orrs	r1, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008106:	0852      	lsrs	r2, r2, #1
 8008108:	3a01      	subs	r2, #1
 800810a:	0652      	lsls	r2, r2, #25
 800810c:	4311      	orrs	r1, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008112:	06d2      	lsls	r2, r2, #27
 8008114:	430a      	orrs	r2, r1
 8008116:	4943      	ldr	r1, [pc, #268]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008118:	4313      	orrs	r3, r2
 800811a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800811c:	4b41      	ldr	r3, [pc, #260]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a40      	ldr	r2, [pc, #256]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008126:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008128:	4b3e      	ldr	r3, [pc, #248]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4a3d      	ldr	r2, [pc, #244]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 800812e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008132:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008134:	f7fb fbb4 	bl	80038a0 <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800813c:	f7fb fbb0 	bl	80038a0 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e066      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800814e:	4b35      	ldr	r3, [pc, #212]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f0      	beq.n	800813c <HAL_RCC_OscConfig+0x530>
 800815a:	e05e      	b.n	800821a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800815c:	4b31      	ldr	r3, [pc, #196]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a30      	ldr	r2, [pc, #192]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008168:	f7fb fb9a 	bl	80038a0 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008170:	f7fb fb96 	bl	80038a0 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e04c      	b.n	800821c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008182:	4b28      	ldr	r3, [pc, #160]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f0      	bne.n	8008170 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800818e:	4b25      	ldr	r3, [pc, #148]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	4924      	ldr	r1, [pc, #144]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 8008194:	4b25      	ldr	r3, [pc, #148]	@ (800822c <HAL_RCC_OscConfig+0x620>)
 8008196:	4013      	ands	r3, r2
 8008198:	60cb      	str	r3, [r1, #12]
 800819a:	e03e      	b.n	800821a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e039      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80081a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008224 <HAL_RCC_OscConfig+0x618>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f003 0203 	and.w	r2, r3, #3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d12c      	bne.n	8008216 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c6:	3b01      	subs	r3, #1
 80081c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d123      	bne.n	8008216 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081da:	429a      	cmp	r2, r3
 80081dc:	d11b      	bne.n	8008216 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d113      	bne.n	8008216 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	3b01      	subs	r3, #1
 80081fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081fe:	429a      	cmp	r2, r3
 8008200:	d109      	bne.n	8008216 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	3b01      	subs	r3, #1
 8008210:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008212:	429a      	cmp	r2, r3
 8008214:	d001      	beq.n	800821a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40021000 	.word	0x40021000
 8008228:	019f800c 	.word	0x019f800c
 800822c:	feeefffc 	.word	0xfeeefffc

08008230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e11e      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008248:	4b91      	ldr	r3, [pc, #580]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d910      	bls.n	8008278 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008256:	4b8e      	ldr	r3, [pc, #568]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 020f 	bic.w	r2, r3, #15
 800825e:	498c      	ldr	r1, [pc, #560]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008266:	4b8a      	ldr	r3, [pc, #552]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d001      	beq.n	8008278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e106      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d073      	beq.n	800836c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d129      	bne.n	80082e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800828c:	4b81      	ldr	r3, [pc, #516]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0f4      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800829c:	f000 f99e 	bl	80085dc <RCC_GetSysClockFreqFromPLLSource>
 80082a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4a7c      	ldr	r2, [pc, #496]	@ (8008498 <HAL_RCC_ClockConfig+0x268>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d93f      	bls.n	800832a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082aa:	4b7a      	ldr	r3, [pc, #488]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d033      	beq.n	800832a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d12f      	bne.n	800832a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082ca:	4b72      	ldr	r3, [pc, #456]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082d2:	4a70      	ldr	r2, [pc, #448]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80082d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80082da:	2380      	movs	r3, #128	@ 0x80
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e024      	b.n	800832a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d107      	bne.n	80082f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082e8:	4b6a      	ldr	r3, [pc, #424]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0c6      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082f8:	4b66      	ldr	r3, [pc, #408]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e0be      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008308:	f000 f8ce 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800830c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4a61      	ldr	r2, [pc, #388]	@ (8008498 <HAL_RCC_ClockConfig+0x268>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d909      	bls.n	800832a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008316:	4b5f      	ldr	r3, [pc, #380]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800831e:	4a5d      	ldr	r2, [pc, #372]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008324:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800832a:	4b5a      	ldr	r3, [pc, #360]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f023 0203 	bic.w	r2, r3, #3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4957      	ldr	r1, [pc, #348]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008338:	4313      	orrs	r3, r2
 800833a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800833c:	f7fb fab0 	bl	80038a0 <HAL_GetTick>
 8008340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008342:	e00a      	b.n	800835a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008344:	f7fb faac 	bl	80038a0 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008352:	4293      	cmp	r3, r2
 8008354:	d901      	bls.n	800835a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e095      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800835a:	4b4e      	ldr	r3, [pc, #312]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 020c 	and.w	r2, r3, #12
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	429a      	cmp	r2, r3
 800836a:	d1eb      	bne.n	8008344 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d023      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008384:	4b43      	ldr	r3, [pc, #268]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	4a42      	ldr	r2, [pc, #264]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800838a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800838e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800839c:	4b3d      	ldr	r3, [pc, #244]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80083a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80083a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80083aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ac:	4b39      	ldr	r3, [pc, #228]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	4936      	ldr	r1, [pc, #216]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	e008      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	d105      	bne.n	80083d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80083c6:	4b33      	ldr	r3, [pc, #204]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4a32      	ldr	r2, [pc, #200]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 80083cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d21d      	bcs.n	800841c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f023 020f 	bic.w	r2, r3, #15
 80083e8:	4929      	ldr	r1, [pc, #164]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083f0:	f7fb fa56 	bl	80038a0 <HAL_GetTick>
 80083f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f6:	e00a      	b.n	800840e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f8:	f7fb fa52 	bl	80038a0 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e03b      	b.n	8008486 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800840e:	4b20      	ldr	r3, [pc, #128]	@ (8008490 <HAL_RCC_ClockConfig+0x260>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	429a      	cmp	r2, r3
 800841a:	d1ed      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008428:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4917      	ldr	r1, [pc, #92]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008436:	4313      	orrs	r3, r2
 8008438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008446:	4b13      	ldr	r3, [pc, #76]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	490f      	ldr	r1, [pc, #60]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008456:	4313      	orrs	r3, r2
 8008458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800845a:	f000 f825 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800845e:	4602      	mov	r2, r0
 8008460:	4b0c      	ldr	r3, [pc, #48]	@ (8008494 <HAL_RCC_ClockConfig+0x264>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	091b      	lsrs	r3, r3, #4
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	490c      	ldr	r1, [pc, #48]	@ (800849c <HAL_RCC_ClockConfig+0x26c>)
 800846c:	5ccb      	ldrb	r3, [r1, r3]
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	4a0a      	ldr	r2, [pc, #40]	@ (80084a0 <HAL_RCC_ClockConfig+0x270>)
 8008478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800847a:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <HAL_RCC_ClockConfig+0x274>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fb f9c2 	bl	8003808 <HAL_InitTick>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40022000 	.word	0x40022000
 8008494:	40021000 	.word	0x40021000
 8008498:	04c4b400 	.word	0x04c4b400
 800849c:	0800b72c 	.word	0x0800b72c
 80084a0:	2000003c 	.word	0x2000003c
 80084a4:	20000040 	.word	0x20000040

080084a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 030c 	and.w	r3, r3, #12
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d102      	bne.n	80084c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008564 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	e047      	b.n	8008550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084c0:	4b27      	ldr	r3, [pc, #156]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 030c 	and.w	r3, r3, #12
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d102      	bne.n	80084d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80084cc:	4b26      	ldr	r3, [pc, #152]	@ (8008568 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	e03e      	b.n	8008550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80084d2:	4b23      	ldr	r3, [pc, #140]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 030c 	and.w	r3, r3, #12
 80084da:	2b0c      	cmp	r3, #12
 80084dc:	d136      	bne.n	800854c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084de:	4b20      	ldr	r3, [pc, #128]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	3301      	adds	r3, #1
 80084f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d10c      	bne.n	8008516 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008568 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	4a16      	ldr	r2, [pc, #88]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008506:	68d2      	ldr	r2, [r2, #12]
 8008508:	0a12      	lsrs	r2, r2, #8
 800850a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	617b      	str	r3, [r7, #20]
      break;
 8008514:	e00c      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008516:	4a13      	ldr	r2, [pc, #76]	@ (8008564 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	4a10      	ldr	r2, [pc, #64]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008520:	68d2      	ldr	r2, [r2, #12]
 8008522:	0a12      	lsrs	r2, r2, #8
 8008524:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	617b      	str	r3, [r7, #20]
      break;
 800852e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	0e5b      	lsrs	r3, r3, #25
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	3301      	adds	r3, #1
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	fbb2 f3f3 	udiv	r3, r2, r3
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	e001      	b.n	8008550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008550:	693b      	ldr	r3, [r7, #16]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40021000 	.word	0x40021000
 8008564:	00f42400 	.word	0x00f42400
 8008568:	016e3600 	.word	0x016e3600

0800856c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008570:	4b03      	ldr	r3, [pc, #12]	@ (8008580 <HAL_RCC_GetHCLKFreq+0x14>)
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	2000003c 	.word	0x2000003c

08008584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008588:	f7ff fff0 	bl	800856c <HAL_RCC_GetHCLKFreq>
 800858c:	4602      	mov	r2, r0
 800858e:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	4904      	ldr	r1, [pc, #16]	@ (80085ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800859a:	5ccb      	ldrb	r3, [r1, r3]
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40021000 	.word	0x40021000
 80085ac:	0800b73c 	.word	0x0800b73c

080085b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80085b4:	f7ff ffda 	bl	800856c <HAL_RCC_GetHCLKFreq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	0adb      	lsrs	r3, r3, #11
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	4904      	ldr	r1, [pc, #16]	@ (80085d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	0800b73c 	.word	0x0800b73c

080085dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085e2:	4b1e      	ldr	r3, [pc, #120]	@ (800865c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085ec:	4b1b      	ldr	r3, [pc, #108]	@ (800865c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d10c      	bne.n	800861a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008600:	4a17      	ldr	r2, [pc, #92]	@ (8008660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	fbb2 f3f3 	udiv	r3, r2, r3
 8008608:	4a14      	ldr	r2, [pc, #80]	@ (800865c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800860a:	68d2      	ldr	r2, [r2, #12]
 800860c:	0a12      	lsrs	r2, r2, #8
 800860e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008612:	fb02 f303 	mul.w	r3, r2, r3
 8008616:	617b      	str	r3, [r7, #20]
    break;
 8008618:	e00c      	b.n	8008634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800861a:	4a12      	ldr	r2, [pc, #72]	@ (8008664 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	4a0e      	ldr	r2, [pc, #56]	@ (800865c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008624:	68d2      	ldr	r2, [r2, #12]
 8008626:	0a12      	lsrs	r2, r2, #8
 8008628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800862c:	fb02 f303 	mul.w	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]
    break;
 8008632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008634:	4b09      	ldr	r3, [pc, #36]	@ (800865c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	0e5b      	lsrs	r3, r3, #25
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	3301      	adds	r3, #1
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800864e:	687b      	ldr	r3, [r7, #4]
}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	40021000 	.word	0x40021000
 8008660:	016e3600 	.word	0x016e3600
 8008664:	00f42400 	.word	0x00f42400

08008668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008670:	2300      	movs	r3, #0
 8008672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008674:	2300      	movs	r3, #0
 8008676:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8098 	beq.w	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008686:	2300      	movs	r3, #0
 8008688:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800868a:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800868c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10d      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008696:	4b40      	ldr	r3, [pc, #256]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800869a:	4a3f      	ldr	r2, [pc, #252]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800869c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80086a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086aa:	60bb      	str	r3, [r7, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ae:	2301      	movs	r3, #1
 80086b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086b2:	4b3a      	ldr	r3, [pc, #232]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a39      	ldr	r2, [pc, #228]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086be:	f7fb f8ef 	bl	80038a0 <HAL_GetTick>
 80086c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086c4:	e009      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c6:	f7fb f8eb 	bl	80038a0 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d902      	bls.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	74fb      	strb	r3, [r7, #19]
        break;
 80086d8:	e005      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086da:	4b30      	ldr	r3, [pc, #192]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0ef      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80086e6:	7cfb      	ldrb	r3, [r7, #19]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d159      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01e      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	429a      	cmp	r2, r3
 8008706:	d019      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008708:	4b23      	ldr	r3, [pc, #140]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800870a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008714:	4b20      	ldr	r3, [pc, #128]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871a:	4a1f      	ldr	r2, [pc, #124]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800871c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008724:	4b1c      	ldr	r3, [pc, #112]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	4a1b      	ldr	r2, [pc, #108]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800872c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008734:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008746:	f7fb f8ab 	bl	80038a0 <HAL_GetTick>
 800874a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800874c:	e00b      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800874e:	f7fb f8a7 	bl	80038a0 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800875c:	4293      	cmp	r3, r2
 800875e:	d902      	bls.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	74fb      	strb	r3, [r7, #19]
            break;
 8008764:	e006      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008766:	4b0c      	ldr	r3, [pc, #48]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0ec      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008774:	7cfb      	ldrb	r3, [r7, #19]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800877a:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800877c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008788:	4903      	ldr	r1, [pc, #12]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008790:	e008      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008792:	7cfb      	ldrb	r3, [r7, #19]
 8008794:	74bb      	strb	r3, [r7, #18]
 8008796:	e005      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008798:	40021000 	.word	0x40021000
 800879c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a0:	7cfb      	ldrb	r3, [r7, #19]
 80087a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087a4:	7c7b      	ldrb	r3, [r7, #17]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d105      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087aa:	4ba7      	ldr	r3, [pc, #668]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ae:	4aa6      	ldr	r2, [pc, #664]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087c2:	4ba1      	ldr	r3, [pc, #644]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c8:	f023 0203 	bic.w	r2, r3, #3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	499d      	ldr	r1, [pc, #628]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087e4:	4b98      	ldr	r3, [pc, #608]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ea:	f023 020c 	bic.w	r2, r3, #12
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	4995      	ldr	r1, [pc, #596]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008806:	4b90      	ldr	r3, [pc, #576]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800880c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	498c      	ldr	r1, [pc, #560]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008828:	4b87      	ldr	r3, [pc, #540]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800882e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	4984      	ldr	r1, [pc, #528]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800884a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	497b      	ldr	r1, [pc, #492]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800886c:	4b76      	ldr	r3, [pc, #472]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	4973      	ldr	r1, [pc, #460]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800888e:	4b6e      	ldr	r3, [pc, #440]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	496a      	ldr	r1, [pc, #424]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088b0:	4b65      	ldr	r3, [pc, #404]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	4962      	ldr	r1, [pc, #392]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088d2:	4b5d      	ldr	r3, [pc, #372]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e0:	4959      	ldr	r1, [pc, #356]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088f4:	4b54      	ldr	r3, [pc, #336]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088fa:	f023 0203 	bic.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008902:	4951      	ldr	r1, [pc, #324]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008916:	4b4c      	ldr	r3, [pc, #304]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	4948      	ldr	r1, [pc, #288]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008934:	2b00      	cmp	r3, #0
 8008936:	d015      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008938:	4b43      	ldr	r3, [pc, #268]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800893a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008946:	4940      	ldr	r1, [pc, #256]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008948:	4313      	orrs	r3, r2
 800894a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008956:	d105      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008958:	4b3b      	ldr	r3, [pc, #236]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	4a3a      	ldr	r2, [pc, #232]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008962:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800896c:	2b00      	cmp	r3, #0
 800896e:	d015      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008970:	4b35      	ldr	r3, [pc, #212]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008976:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897e:	4932      	ldr	r1, [pc, #200]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008980:	4313      	orrs	r3, r2
 8008982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800898e:	d105      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008990:	4b2d      	ldr	r3, [pc, #180]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800899a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089a8:	4b27      	ldr	r3, [pc, #156]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b6:	4924      	ldr	r1, [pc, #144]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089c6:	d105      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d015      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089e0:	4b19      	ldr	r3, [pc, #100]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ee:	4916      	ldr	r1, [pc, #88]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089fe:	d105      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a00:	4b11      	ldr	r3, [pc, #68]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	4a10      	ldr	r2, [pc, #64]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d019      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a18:	4b0b      	ldr	r3, [pc, #44]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a26:	4908      	ldr	r1, [pc, #32]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a36:	d109      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a38:	4b03      	ldr	r3, [pc, #12]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	4a02      	ldr	r2, [pc, #8]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a42:	60d3      	str	r3, [r2, #12]
 8008a44:	e002      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a46:	bf00      	nop
 8008a48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d015      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008a58:	4b29      	ldr	r3, [pc, #164]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a66:	4926      	ldr	r1, [pc, #152]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a76:	d105      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a78:	4b21      	ldr	r3, [pc, #132]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4a20      	ldr	r2, [pc, #128]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d015      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008a90:	4b1b      	ldr	r3, [pc, #108]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9e:	4918      	ldr	r1, [pc, #96]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aae:	d105      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ab0:	4b13      	ldr	r3, [pc, #76]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4a12      	ldr	r2, [pc, #72]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d015      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad6:	490a      	ldr	r1, [pc, #40]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ae6:	d105      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ae8:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4a04      	ldr	r2, [pc, #16]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	40021000 	.word	0x40021000

08008b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e049      	b.n	8008baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fa fc3a 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f001 f808 	bl	8009b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d001      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e054      	b.n	8008c76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0201 	orr.w	r2, r2, #1
 8008be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a26      	ldr	r2, [pc, #152]	@ (8008c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d022      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf6:	d01d      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a22      	ldr	r2, [pc, #136]	@ (8008c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a21      	ldr	r2, [pc, #132]	@ (8008c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d013      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1f      	ldr	r2, [pc, #124]	@ (8008c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c94 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1c      	ldr	r2, [pc, #112]	@ (8008c98 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x80>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8008c9c <HAL_TIM_Base_Start_IT+0xe8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d115      	bne.n	8008c60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	4b19      	ldr	r3, [pc, #100]	@ (8008ca0 <HAL_TIM_Base_Start_IT+0xec>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d015      	beq.n	8008c72 <HAL_TIM_Base_Start_IT+0xbe>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4c:	d011      	beq.n	8008c72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0201 	orr.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5e:	e008      	b.n	8008c72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	e000      	b.n	8008c74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40012c00 	.word	0x40012c00
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40013400 	.word	0x40013400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	40015000 	.word	0x40015000
 8008ca0:	00010007 	.word	0x00010007

08008ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e049      	b.n	8008d4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f841 	bl	8008d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f000 ff38 	bl	8009b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_TIM_PWM_Start+0x24>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	bf14      	ite	ne
 8008d84:	2301      	movne	r3, #1
 8008d86:	2300      	moveq	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	e03c      	b.n	8008e06 <HAL_TIM_PWM_Start+0x9e>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d109      	bne.n	8008da6 <HAL_TIM_PWM_Start+0x3e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	bf14      	ite	ne
 8008d9e:	2301      	movne	r3, #1
 8008da0:	2300      	moveq	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	e02f      	b.n	8008e06 <HAL_TIM_PWM_Start+0x9e>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d109      	bne.n	8008dc0 <HAL_TIM_PWM_Start+0x58>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e022      	b.n	8008e06 <HAL_TIM_PWM_Start+0x9e>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b0c      	cmp	r3, #12
 8008dc4:	d109      	bne.n	8008dda <HAL_TIM_PWM_Start+0x72>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	bf14      	ite	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e015      	b.n	8008e06 <HAL_TIM_PWM_Start+0x9e>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d109      	bne.n	8008df4 <HAL_TIM_PWM_Start+0x8c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	bf14      	ite	ne
 8008dec:	2301      	movne	r3, #1
 8008dee:	2300      	moveq	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	e008      	b.n	8008e06 <HAL_TIM_PWM_Start+0x9e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	bf14      	ite	ne
 8008e00:	2301      	movne	r3, #1
 8008e02:	2300      	moveq	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e0a6      	b.n	8008f5c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_PWM_Start+0xb6>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e1c:	e023      	b.n	8008e66 <HAL_TIM_PWM_Start+0xfe>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <HAL_TIM_PWM_Start+0xc6>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e2c:	e01b      	b.n	8008e66 <HAL_TIM_PWM_Start+0xfe>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d104      	bne.n	8008e3e <HAL_TIM_PWM_Start+0xd6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e3c:	e013      	b.n	8008e66 <HAL_TIM_PWM_Start+0xfe>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b0c      	cmp	r3, #12
 8008e42:	d104      	bne.n	8008e4e <HAL_TIM_PWM_Start+0xe6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e4c:	e00b      	b.n	8008e66 <HAL_TIM_PWM_Start+0xfe>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d104      	bne.n	8008e5e <HAL_TIM_PWM_Start+0xf6>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e5c:	e003      	b.n	8008e66 <HAL_TIM_PWM_Start+0xfe>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fc16 	bl	800a6a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a3a      	ldr	r2, [pc, #232]	@ (8008f64 <HAL_TIM_PWM_Start+0x1fc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d018      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x148>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a39      	ldr	r2, [pc, #228]	@ (8008f68 <HAL_TIM_PWM_Start+0x200>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x148>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a37      	ldr	r2, [pc, #220]	@ (8008f6c <HAL_TIM_PWM_Start+0x204>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00e      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x148>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a36      	ldr	r2, [pc, #216]	@ (8008f70 <HAL_TIM_PWM_Start+0x208>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x148>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a34      	ldr	r2, [pc, #208]	@ (8008f74 <HAL_TIM_PWM_Start+0x20c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x148>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a33      	ldr	r2, [pc, #204]	@ (8008f78 <HAL_TIM_PWM_Start+0x210>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d101      	bne.n	8008eb4 <HAL_TIM_PWM_Start+0x14c>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e000      	b.n	8008eb6 <HAL_TIM_PWM_Start+0x14e>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a25      	ldr	r2, [pc, #148]	@ (8008f64 <HAL_TIM_PWM_Start+0x1fc>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d022      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008edc:	d01d      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a26      	ldr	r2, [pc, #152]	@ (8008f7c <HAL_TIM_PWM_Start+0x214>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d018      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a24      	ldr	r2, [pc, #144]	@ (8008f80 <HAL_TIM_PWM_Start+0x218>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a23      	ldr	r2, [pc, #140]	@ (8008f84 <HAL_TIM_PWM_Start+0x21c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00e      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a19      	ldr	r2, [pc, #100]	@ (8008f68 <HAL_TIM_PWM_Start+0x200>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d009      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a18      	ldr	r2, [pc, #96]	@ (8008f6c <HAL_TIM_PWM_Start+0x204>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d004      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x1b2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <HAL_TIM_PWM_Start+0x210>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d115      	bne.n	8008f46 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	4b19      	ldr	r3, [pc, #100]	@ (8008f88 <HAL_TIM_PWM_Start+0x220>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b06      	cmp	r3, #6
 8008f2a:	d015      	beq.n	8008f58 <HAL_TIM_PWM_Start+0x1f0>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f32:	d011      	beq.n	8008f58 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f44:	e008      	b.n	8008f58 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e000      	b.n	8008f5a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40014400 	.word	0x40014400
 8008f74:	40014800 	.word	0x40014800
 8008f78:	40015000 	.word	0x40015000
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	00010007 	.word	0x00010007

08008f8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e049      	b.n	8009032 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f841 	bl	800903a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f000 fdc4 	bl	8009b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <HAL_TIM_IC_Start_IT+0x1e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800906a:	b2db      	uxtb	r3, r3
 800906c:	e023      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x66>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b04      	cmp	r3, #4
 8009072:	d104      	bne.n	800907e <HAL_TIM_IC_Start_IT+0x2e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800907a:	b2db      	uxtb	r3, r3
 800907c:	e01b      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x66>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b08      	cmp	r3, #8
 8009082:	d104      	bne.n	800908e <HAL_TIM_IC_Start_IT+0x3e>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800908a:	b2db      	uxtb	r3, r3
 800908c:	e013      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x66>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b0c      	cmp	r3, #12
 8009092:	d104      	bne.n	800909e <HAL_TIM_IC_Start_IT+0x4e>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	e00b      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x66>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_IC_Start_IT+0x5e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	e003      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x66>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_TIM_IC_Start_IT+0x78>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	e013      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0xa0>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d104      	bne.n	80090d8 <HAL_TIM_IC_Start_IT+0x88>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	e00b      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0xa0>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d104      	bne.n	80090e8 <HAL_TIM_IC_Start_IT+0x98>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	e003      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0xa0>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d102      	bne.n	80090fe <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80090f8:	7b7b      	ldrb	r3, [r7, #13]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d001      	beq.n	8009102 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e0e2      	b.n	80092c8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <HAL_TIM_IC_Start_IT+0xc2>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009110:	e023      	b.n	800915a <HAL_TIM_IC_Start_IT+0x10a>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b04      	cmp	r3, #4
 8009116:	d104      	bne.n	8009122 <HAL_TIM_IC_Start_IT+0xd2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009120:	e01b      	b.n	800915a <HAL_TIM_IC_Start_IT+0x10a>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d104      	bne.n	8009132 <HAL_TIM_IC_Start_IT+0xe2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009130:	e013      	b.n	800915a <HAL_TIM_IC_Start_IT+0x10a>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b0c      	cmp	r3, #12
 8009136:	d104      	bne.n	8009142 <HAL_TIM_IC_Start_IT+0xf2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009140:	e00b      	b.n	800915a <HAL_TIM_IC_Start_IT+0x10a>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b10      	cmp	r3, #16
 8009146:	d104      	bne.n	8009152 <HAL_TIM_IC_Start_IT+0x102>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009150:	e003      	b.n	800915a <HAL_TIM_IC_Start_IT+0x10a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0x11a>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009168:	e013      	b.n	8009192 <HAL_TIM_IC_Start_IT+0x142>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d104      	bne.n	800917a <HAL_TIM_IC_Start_IT+0x12a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009178:	e00b      	b.n	8009192 <HAL_TIM_IC_Start_IT+0x142>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d104      	bne.n	800918a <HAL_TIM_IC_Start_IT+0x13a>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009188:	e003      	b.n	8009192 <HAL_TIM_IC_Start_IT+0x142>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b0c      	cmp	r3, #12
 8009196:	d841      	bhi.n	800921c <HAL_TIM_IC_Start_IT+0x1cc>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <HAL_TIM_IC_Start_IT+0x150>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091d5 	.word	0x080091d5
 80091a4:	0800921d 	.word	0x0800921d
 80091a8:	0800921d 	.word	0x0800921d
 80091ac:	0800921d 	.word	0x0800921d
 80091b0:	080091e7 	.word	0x080091e7
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	0800921d 	.word	0x0800921d
 80091bc:	0800921d 	.word	0x0800921d
 80091c0:	080091f9 	.word	0x080091f9
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	0800921d 	.word	0x0800921d
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800920b 	.word	0x0800920b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0202 	orr.w	r2, r2, #2
 80091e2:	60da      	str	r2, [r3, #12]
      break;
 80091e4:	e01d      	b.n	8009222 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0204 	orr.w	r2, r2, #4
 80091f4:	60da      	str	r2, [r3, #12]
      break;
 80091f6:	e014      	b.n	8009222 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0208 	orr.w	r2, r2, #8
 8009206:	60da      	str	r2, [r3, #12]
      break;
 8009208:	e00b      	b.n	8009222 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0210 	orr.w	r2, r2, #16
 8009218:	60da      	str	r2, [r3, #12]
      break;
 800921a:	e002      	b.n	8009222 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
      break;
 8009220:	bf00      	nop
  }

  if (status == HAL_OK)
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d14e      	bne.n	80092c6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2201      	movs	r2, #1
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f001 fa35 	bl	800a6a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a25      	ldr	r2, [pc, #148]	@ (80092d0 <HAL_TIM_IC_Start_IT+0x280>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d022      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009248:	d01d      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a21      	ldr	r2, [pc, #132]	@ (80092d4 <HAL_TIM_IC_Start_IT+0x284>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d018      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1f      	ldr	r2, [pc, #124]	@ (80092d8 <HAL_TIM_IC_Start_IT+0x288>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d013      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1e      	ldr	r2, [pc, #120]	@ (80092dc <HAL_TIM_IC_Start_IT+0x28c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1c      	ldr	r2, [pc, #112]	@ (80092e0 <HAL_TIM_IC_Start_IT+0x290>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1b      	ldr	r2, [pc, #108]	@ (80092e4 <HAL_TIM_IC_Start_IT+0x294>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_TIM_IC_Start_IT+0x236>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <HAL_TIM_IC_Start_IT+0x298>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d115      	bne.n	80092b2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <HAL_TIM_IC_Start_IT+0x29c>)
 800928e:	4013      	ands	r3, r2
 8009290:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b06      	cmp	r3, #6
 8009296:	d015      	beq.n	80092c4 <HAL_TIM_IC_Start_IT+0x274>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800929e:	d011      	beq.n	80092c4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0201 	orr.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b0:	e008      	b.n	80092c4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0201 	orr.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e000      	b.n	80092c6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800
 80092dc:	40000c00 	.word	0x40000c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40015000 	.word	0x40015000
 80092ec:	00010007 	.word	0x00010007

080092f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d020      	beq.n	8009354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0202 	mvn.w	r2, #2
 8009324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7f8 fafe 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8009340:	e005      	b.n	800934e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fbea 	bl	8009b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fbf1 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	d020      	beq.n	80093a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01b      	beq.n	80093a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f06f 0204 	mvn.w	r2, #4
 8009370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f8 fad8 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 800938c:	e005      	b.n	800939a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fbc4 	bl	8009b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbcb 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d020      	beq.n	80093ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01b      	beq.n	80093ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0208 	mvn.w	r2, #8
 80093bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2204      	movs	r2, #4
 80093c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f8 fab2 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 80093d8:	e005      	b.n	80093e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fb9e 	bl	8009b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fba5 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d020      	beq.n	8009438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01b      	beq.n	8009438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0210 	mvn.w	r2, #16
 8009408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2208      	movs	r2, #8
 800940e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7f8 fa8c 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fb78 	bl	8009b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb7f 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00c      	beq.n	800945c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0201 	mvn.w	r2, #1
 8009454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7f8 ff26 	bl	80022a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 fa65 	bl	800a954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fa5d 	bl	800a968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00c      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fb39 	bl	8009b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0220 	mvn.w	r2, #32
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 fa25 	bl	800a940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00c      	beq.n	800951a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d007      	beq.n	800951a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 fa31 	bl	800a97c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 fa29 	bl	800a990 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00c      	beq.n	8009562 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d007      	beq.n	8009562 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800955a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 fa21 	bl	800a9a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d007      	beq.n	8009586 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800957e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 fa19 	bl	800a9b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e088      	b.n	80096be <HAL_TIM_IC_ConfigChannel+0x130>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11b      	bne.n	80095f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80095ca:	f000 fea3 	bl	800a314 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 020c 	bic.w	r2, r2, #12
 80095dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6999      	ldr	r1, [r3, #24]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	619a      	str	r2, [r3, #24]
 80095f0:	e060      	b.n	80096b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d11c      	bne.n	8009632 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009608:	f000 ff27 	bl	800a45a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800961a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	021a      	lsls	r2, r3, #8
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	619a      	str	r2, [r3, #24]
 8009630:	e040      	b.n	80096b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b08      	cmp	r3, #8
 8009636:	d11b      	bne.n	8009670 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009648:	f000 ff74 	bl	800a534 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	69da      	ldr	r2, [r3, #28]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 020c 	bic.w	r2, r2, #12
 800965a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69d9      	ldr	r1, [r3, #28]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	61da      	str	r2, [r3, #28]
 800966e:	e021      	b.n	80096b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b0c      	cmp	r3, #12
 8009674:	d11c      	bne.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009686:	f000 ff91 	bl	800a5ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009698:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69d9      	ldr	r1, [r3, #28]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	021a      	lsls	r2, r3, #8
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	61da      	str	r2, [r3, #28]
 80096ae:	e001      	b.n	80096b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e0ff      	b.n	80098e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b14      	cmp	r3, #20
 80096f2:	f200 80f0 	bhi.w	80098d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096f6:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009751 	.word	0x08009751
 8009700:	080098d7 	.word	0x080098d7
 8009704:	080098d7 	.word	0x080098d7
 8009708:	080098d7 	.word	0x080098d7
 800970c:	08009791 	.word	0x08009791
 8009710:	080098d7 	.word	0x080098d7
 8009714:	080098d7 	.word	0x080098d7
 8009718:	080098d7 	.word	0x080098d7
 800971c:	080097d3 	.word	0x080097d3
 8009720:	080098d7 	.word	0x080098d7
 8009724:	080098d7 	.word	0x080098d7
 8009728:	080098d7 	.word	0x080098d7
 800972c:	08009813 	.word	0x08009813
 8009730:	080098d7 	.word	0x080098d7
 8009734:	080098d7 	.word	0x080098d7
 8009738:	080098d7 	.word	0x080098d7
 800973c:	08009855 	.word	0x08009855
 8009740:	080098d7 	.word	0x080098d7
 8009744:	080098d7 	.word	0x080098d7
 8009748:	080098d7 	.word	0x080098d7
 800974c:	08009895 	.word	0x08009895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fab2 	bl	8009cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699a      	ldr	r2, [r3, #24]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0208 	orr.w	r2, r2, #8
 800976a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0204 	bic.w	r2, r2, #4
 800977a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6999      	ldr	r1, [r3, #24]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	619a      	str	r2, [r3, #24]
      break;
 800978e:	e0a5      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fb2c 	bl	8009df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699a      	ldr	r2, [r3, #24]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6999      	ldr	r1, [r3, #24]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	021a      	lsls	r2, r3, #8
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	619a      	str	r2, [r3, #24]
      break;
 80097d0:	e084      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fb9f 	bl	8009f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69da      	ldr	r2, [r3, #28]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0204 	bic.w	r2, r2, #4
 80097fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69d9      	ldr	r1, [r3, #28]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	61da      	str	r2, [r3, #28]
      break;
 8009810:	e064      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fc11 	bl	800a040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69da      	ldr	r2, [r3, #28]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800982c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800983c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69d9      	ldr	r1, [r3, #28]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	021a      	lsls	r2, r3, #8
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	61da      	str	r2, [r3, #28]
      break;
 8009852:	e043      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fc84 	bl	800a168 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0208 	orr.w	r2, r2, #8
 800986e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0204 	bic.w	r2, r2, #4
 800987e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009892:	e023      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fcce 	bl	800a23c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	021a      	lsls	r2, r3, #8
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098d4:	e002      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
      break;
 80098da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop

080098f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_TIM_ConfigClockSource+0x1c>
 8009908:	2302      	movs	r3, #2
 800990a:	e0f6      	b.n	8009afa <HAL_TIM_ConfigClockSource+0x20a>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800992a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800992e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a6f      	ldr	r2, [pc, #444]	@ (8009b04 <HAL_TIM_ConfigClockSource+0x214>)
 8009946:	4293      	cmp	r3, r2
 8009948:	f000 80c1 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800994c:	4a6d      	ldr	r2, [pc, #436]	@ (8009b04 <HAL_TIM_ConfigClockSource+0x214>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f200 80c6 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009954:	4a6c      	ldr	r2, [pc, #432]	@ (8009b08 <HAL_TIM_ConfigClockSource+0x218>)
 8009956:	4293      	cmp	r3, r2
 8009958:	f000 80b9 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800995c:	4a6a      	ldr	r2, [pc, #424]	@ (8009b08 <HAL_TIM_ConfigClockSource+0x218>)
 800995e:	4293      	cmp	r3, r2
 8009960:	f200 80be 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009964:	4a69      	ldr	r2, [pc, #420]	@ (8009b0c <HAL_TIM_ConfigClockSource+0x21c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	f000 80b1 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800996c:	4a67      	ldr	r2, [pc, #412]	@ (8009b0c <HAL_TIM_ConfigClockSource+0x21c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	f200 80b6 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009974:	4a66      	ldr	r2, [pc, #408]	@ (8009b10 <HAL_TIM_ConfigClockSource+0x220>)
 8009976:	4293      	cmp	r3, r2
 8009978:	f000 80a9 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800997c:	4a64      	ldr	r2, [pc, #400]	@ (8009b10 <HAL_TIM_ConfigClockSource+0x220>)
 800997e:	4293      	cmp	r3, r2
 8009980:	f200 80ae 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009984:	4a63      	ldr	r2, [pc, #396]	@ (8009b14 <HAL_TIM_ConfigClockSource+0x224>)
 8009986:	4293      	cmp	r3, r2
 8009988:	f000 80a1 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800998c:	4a61      	ldr	r2, [pc, #388]	@ (8009b14 <HAL_TIM_ConfigClockSource+0x224>)
 800998e:	4293      	cmp	r3, r2
 8009990:	f200 80a6 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009994:	4a60      	ldr	r2, [pc, #384]	@ (8009b18 <HAL_TIM_ConfigClockSource+0x228>)
 8009996:	4293      	cmp	r3, r2
 8009998:	f000 8099 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 800999c:	4a5e      	ldr	r2, [pc, #376]	@ (8009b18 <HAL_TIM_ConfigClockSource+0x228>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	f200 809e 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099a8:	f000 8091 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 80099ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099b0:	f200 8096 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099b8:	f000 8089 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 80099bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099c0:	f200 808e 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099c8:	d03e      	beq.n	8009a48 <HAL_TIM_ConfigClockSource+0x158>
 80099ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ce:	f200 8087 	bhi.w	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d6:	f000 8086 	beq.w	8009ae6 <HAL_TIM_ConfigClockSource+0x1f6>
 80099da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099de:	d87f      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099e0:	2b70      	cmp	r3, #112	@ 0x70
 80099e2:	d01a      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x12a>
 80099e4:	2b70      	cmp	r3, #112	@ 0x70
 80099e6:	d87b      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099e8:	2b60      	cmp	r3, #96	@ 0x60
 80099ea:	d050      	beq.n	8009a8e <HAL_TIM_ConfigClockSource+0x19e>
 80099ec:	2b60      	cmp	r3, #96	@ 0x60
 80099ee:	d877      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099f0:	2b50      	cmp	r3, #80	@ 0x50
 80099f2:	d03c      	beq.n	8009a6e <HAL_TIM_ConfigClockSource+0x17e>
 80099f4:	2b50      	cmp	r3, #80	@ 0x50
 80099f6:	d873      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 80099f8:	2b40      	cmp	r3, #64	@ 0x40
 80099fa:	d058      	beq.n	8009aae <HAL_TIM_ConfigClockSource+0x1be>
 80099fc:	2b40      	cmp	r3, #64	@ 0x40
 80099fe:	d86f      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a00:	2b30      	cmp	r3, #48	@ 0x30
 8009a02:	d064      	beq.n	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 8009a04:	2b30      	cmp	r3, #48	@ 0x30
 8009a06:	d86b      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	d060      	beq.n	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d867      	bhi.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d05c      	beq.n	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d05a      	beq.n	8009ace <HAL_TIM_ConfigClockSource+0x1de>
 8009a18:	e062      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a2a:	f000 fe19 	bl	800a660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	609a      	str	r2, [r3, #8]
      break;
 8009a46:	e04f      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a58:	f000 fe02 	bl	800a660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689a      	ldr	r2, [r3, #8]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a6a:	609a      	str	r2, [r3, #8]
      break;
 8009a6c:	e03c      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f000 fcbe 	bl	800a3fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2150      	movs	r1, #80	@ 0x50
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fdcd 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 8009a8c:	e02c      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f000 fd1a 	bl	800a4d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2160      	movs	r1, #96	@ 0x60
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fdbd 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 8009aac:	e01c      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aba:	461a      	mov	r2, r3
 8009abc:	f000 fc9e 	bl	800a3fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2140      	movs	r1, #64	@ 0x40
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fdad 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 8009acc:	e00c      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f000 fda4 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 8009ade:	e003      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae4:	e000      	b.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	00100070 	.word	0x00100070
 8009b08:	00100060 	.word	0x00100060
 8009b0c:	00100050 	.word	0x00100050
 8009b10:	00100040 	.word	0x00100040
 8009b14:	00100030 	.word	0x00100030
 8009b18:	00100020 	.word	0x00100020

08009b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8009c9c <TIM_Base_SetConfig+0x144>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d017      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b76:	d013      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a49      	ldr	r2, [pc, #292]	@ (8009ca0 <TIM_Base_SetConfig+0x148>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00f      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a48      	ldr	r2, [pc, #288]	@ (8009ca4 <TIM_Base_SetConfig+0x14c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00b      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a47      	ldr	r2, [pc, #284]	@ (8009ca8 <TIM_Base_SetConfig+0x150>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d007      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a46      	ldr	r2, [pc, #280]	@ (8009cac <TIM_Base_SetConfig+0x154>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_Base_SetConfig+0x48>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a45      	ldr	r2, [pc, #276]	@ (8009cb0 <TIM_Base_SetConfig+0x158>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d108      	bne.n	8009bb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a39      	ldr	r2, [pc, #228]	@ (8009c9c <TIM_Base_SetConfig+0x144>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d023      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc0:	d01f      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a36      	ldr	r2, [pc, #216]	@ (8009ca0 <TIM_Base_SetConfig+0x148>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01b      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a35      	ldr	r2, [pc, #212]	@ (8009ca4 <TIM_Base_SetConfig+0x14c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d017      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a34      	ldr	r2, [pc, #208]	@ (8009ca8 <TIM_Base_SetConfig+0x150>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d013      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a33      	ldr	r2, [pc, #204]	@ (8009cac <TIM_Base_SetConfig+0x154>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00f      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a33      	ldr	r2, [pc, #204]	@ (8009cb4 <TIM_Base_SetConfig+0x15c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00b      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a32      	ldr	r2, [pc, #200]	@ (8009cb8 <TIM_Base_SetConfig+0x160>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d007      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a31      	ldr	r2, [pc, #196]	@ (8009cbc <TIM_Base_SetConfig+0x164>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d003      	beq.n	8009c02 <TIM_Base_SetConfig+0xaa>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8009cb0 <TIM_Base_SetConfig+0x158>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d108      	bne.n	8009c14 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <TIM_Base_SetConfig+0x144>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d013      	beq.n	8009c68 <TIM_Base_SetConfig+0x110>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a1a      	ldr	r2, [pc, #104]	@ (8009cac <TIM_Base_SetConfig+0x154>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00f      	beq.n	8009c68 <TIM_Base_SetConfig+0x110>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb4 <TIM_Base_SetConfig+0x15c>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00b      	beq.n	8009c68 <TIM_Base_SetConfig+0x110>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a19      	ldr	r2, [pc, #100]	@ (8009cb8 <TIM_Base_SetConfig+0x160>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <TIM_Base_SetConfig+0x110>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a18      	ldr	r2, [pc, #96]	@ (8009cbc <TIM_Base_SetConfig+0x164>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <TIM_Base_SetConfig+0x110>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a13      	ldr	r2, [pc, #76]	@ (8009cb0 <TIM_Base_SetConfig+0x158>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d103      	bne.n	8009c70 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d105      	bne.n	8009c8e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	f023 0201 	bic.w	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	611a      	str	r2, [r3, #16]
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40012c00 	.word	0x40012c00
 8009ca0:	40000400 	.word	0x40000400
 8009ca4:	40000800 	.word	0x40000800
 8009ca8:	40000c00 	.word	0x40000c00
 8009cac:	40013400 	.word	0x40013400
 8009cb0:	40015000 	.word	0x40015000
 8009cb4:	40014000 	.word	0x40014000
 8009cb8:	40014400 	.word	0x40014400
 8009cbc:	40014800 	.word	0x40014800

08009cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f023 0201 	bic.w	r2, r3, #1
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0303 	bic.w	r3, r3, #3
 8009cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f023 0302 	bic.w	r3, r3, #2
 8009d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a30      	ldr	r2, [pc, #192]	@ (8009ddc <TIM_OC1_SetConfig+0x11c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d013      	beq.n	8009d48 <TIM_OC1_SetConfig+0x88>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a2f      	ldr	r2, [pc, #188]	@ (8009de0 <TIM_OC1_SetConfig+0x120>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00f      	beq.n	8009d48 <TIM_OC1_SetConfig+0x88>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8009de4 <TIM_OC1_SetConfig+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00b      	beq.n	8009d48 <TIM_OC1_SetConfig+0x88>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a2d      	ldr	r2, [pc, #180]	@ (8009de8 <TIM_OC1_SetConfig+0x128>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d007      	beq.n	8009d48 <TIM_OC1_SetConfig+0x88>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009dec <TIM_OC1_SetConfig+0x12c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d003      	beq.n	8009d48 <TIM_OC1_SetConfig+0x88>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a2b      	ldr	r2, [pc, #172]	@ (8009df0 <TIM_OC1_SetConfig+0x130>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d10c      	bne.n	8009d62 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f023 0308 	bic.w	r3, r3, #8
 8009d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f023 0304 	bic.w	r3, r3, #4
 8009d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a1d      	ldr	r2, [pc, #116]	@ (8009ddc <TIM_OC1_SetConfig+0x11c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d013      	beq.n	8009d92 <TIM_OC1_SetConfig+0xd2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009de0 <TIM_OC1_SetConfig+0x120>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00f      	beq.n	8009d92 <TIM_OC1_SetConfig+0xd2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a1b      	ldr	r2, [pc, #108]	@ (8009de4 <TIM_OC1_SetConfig+0x124>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00b      	beq.n	8009d92 <TIM_OC1_SetConfig+0xd2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009de8 <TIM_OC1_SetConfig+0x128>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d007      	beq.n	8009d92 <TIM_OC1_SetConfig+0xd2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a19      	ldr	r2, [pc, #100]	@ (8009dec <TIM_OC1_SetConfig+0x12c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d003      	beq.n	8009d92 <TIM_OC1_SetConfig+0xd2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a18      	ldr	r2, [pc, #96]	@ (8009df0 <TIM_OC1_SetConfig+0x130>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d111      	bne.n	8009db6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	621a      	str	r2, [r3, #32]
}
 8009dd0:	bf00      	nop
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	40012c00 	.word	0x40012c00
 8009de0:	40013400 	.word	0x40013400
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800
 8009df0:	40015000 	.word	0x40015000

08009df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	f023 0210 	bic.w	r2, r3, #16
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0320 	bic.w	r3, r3, #32
 8009e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a2c      	ldr	r2, [pc, #176]	@ (8009f04 <TIM_OC2_SetConfig+0x110>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d007      	beq.n	8009e68 <TIM_OC2_SetConfig+0x74>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8009f08 <TIM_OC2_SetConfig+0x114>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_OC2_SetConfig+0x74>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a2a      	ldr	r2, [pc, #168]	@ (8009f0c <TIM_OC2_SetConfig+0x118>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d10d      	bne.n	8009e84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1f      	ldr	r2, [pc, #124]	@ (8009f04 <TIM_OC2_SetConfig+0x110>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d013      	beq.n	8009eb4 <TIM_OC2_SetConfig+0xc0>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009f08 <TIM_OC2_SetConfig+0x114>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d00f      	beq.n	8009eb4 <TIM_OC2_SetConfig+0xc0>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a1e      	ldr	r2, [pc, #120]	@ (8009f10 <TIM_OC2_SetConfig+0x11c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00b      	beq.n	8009eb4 <TIM_OC2_SetConfig+0xc0>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8009f14 <TIM_OC2_SetConfig+0x120>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d007      	beq.n	8009eb4 <TIM_OC2_SetConfig+0xc0>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8009f18 <TIM_OC2_SetConfig+0x124>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_OC2_SetConfig+0xc0>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <TIM_OC2_SetConfig+0x118>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d113      	bne.n	8009edc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	621a      	str	r2, [r3, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	371c      	adds	r7, #28
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40013400 	.word	0x40013400
 8009f0c:	40015000 	.word	0x40015000
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800

08009f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0303 	bic.w	r3, r3, #3
 8009f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a2b      	ldr	r2, [pc, #172]	@ (800a028 <TIM_OC3_SetConfig+0x10c>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d007      	beq.n	8009f8e <TIM_OC3_SetConfig+0x72>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a2a      	ldr	r2, [pc, #168]	@ (800a02c <TIM_OC3_SetConfig+0x110>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d003      	beq.n	8009f8e <TIM_OC3_SetConfig+0x72>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a29      	ldr	r2, [pc, #164]	@ (800a030 <TIM_OC3_SetConfig+0x114>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d10d      	bne.n	8009faa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a1e      	ldr	r2, [pc, #120]	@ (800a028 <TIM_OC3_SetConfig+0x10c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d013      	beq.n	8009fda <TIM_OC3_SetConfig+0xbe>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800a02c <TIM_OC3_SetConfig+0x110>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d00f      	beq.n	8009fda <TIM_OC3_SetConfig+0xbe>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a1d      	ldr	r2, [pc, #116]	@ (800a034 <TIM_OC3_SetConfig+0x118>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00b      	beq.n	8009fda <TIM_OC3_SetConfig+0xbe>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a1c      	ldr	r2, [pc, #112]	@ (800a038 <TIM_OC3_SetConfig+0x11c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d007      	beq.n	8009fda <TIM_OC3_SetConfig+0xbe>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800a03c <TIM_OC3_SetConfig+0x120>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d003      	beq.n	8009fda <TIM_OC3_SetConfig+0xbe>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a16      	ldr	r2, [pc, #88]	@ (800a030 <TIM_OC3_SetConfig+0x114>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d113      	bne.n	800a002 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	621a      	str	r2, [r3, #32]
}
 800a01c:	bf00      	nop
 800a01e:	371c      	adds	r7, #28
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	40012c00 	.word	0x40012c00
 800a02c:	40013400 	.word	0x40013400
 800a030:	40015000 	.word	0x40015000
 800a034:	40014000 	.word	0x40014000
 800a038:	40014400 	.word	0x40014400
 800a03c:	40014800 	.word	0x40014800

0800a040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a06e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a08e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	031b      	lsls	r3, r3, #12
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	4313      	orrs	r3, r2
 800a09a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a2c      	ldr	r2, [pc, #176]	@ (800a150 <TIM_OC4_SetConfig+0x110>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d007      	beq.n	800a0b4 <TIM_OC4_SetConfig+0x74>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a2b      	ldr	r2, [pc, #172]	@ (800a154 <TIM_OC4_SetConfig+0x114>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d003      	beq.n	800a0b4 <TIM_OC4_SetConfig+0x74>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a158 <TIM_OC4_SetConfig+0x118>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d10d      	bne.n	800a0d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	031b      	lsls	r3, r3, #12
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a150 <TIM_OC4_SetConfig+0x110>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d013      	beq.n	800a100 <TIM_OC4_SetConfig+0xc0>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a1e      	ldr	r2, [pc, #120]	@ (800a154 <TIM_OC4_SetConfig+0x114>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d00f      	beq.n	800a100 <TIM_OC4_SetConfig+0xc0>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a15c <TIM_OC4_SetConfig+0x11c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00b      	beq.n	800a100 <TIM_OC4_SetConfig+0xc0>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a160 <TIM_OC4_SetConfig+0x120>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <TIM_OC4_SetConfig+0xc0>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a164 <TIM_OC4_SetConfig+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_OC4_SetConfig+0xc0>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a17      	ldr	r2, [pc, #92]	@ (800a158 <TIM_OC4_SetConfig+0x118>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d113      	bne.n	800a128 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a106:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a10e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	019b      	lsls	r3, r3, #6
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	019b      	lsls	r3, r3, #6
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	4313      	orrs	r3, r2
 800a126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	621a      	str	r2, [r3, #32]
}
 800a142:	bf00      	nop
 800a144:	371c      	adds	r7, #28
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	40012c00 	.word	0x40012c00
 800a154:	40013400 	.word	0x40013400
 800a158:	40015000 	.word	0x40015000
 800a15c:	40014000 	.word	0x40014000
 800a160:	40014400 	.word	0x40014400
 800a164:	40014800 	.word	0x40014800

0800a168 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a1ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <TIM_OC5_SetConfig+0xbc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d013      	beq.n	800a1ea <TIM_OC5_SetConfig+0x82>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a18      	ldr	r2, [pc, #96]	@ (800a228 <TIM_OC5_SetConfig+0xc0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00f      	beq.n	800a1ea <TIM_OC5_SetConfig+0x82>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <TIM_OC5_SetConfig+0xc4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00b      	beq.n	800a1ea <TIM_OC5_SetConfig+0x82>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a16      	ldr	r2, [pc, #88]	@ (800a230 <TIM_OC5_SetConfig+0xc8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d007      	beq.n	800a1ea <TIM_OC5_SetConfig+0x82>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <TIM_OC5_SetConfig+0xcc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d003      	beq.n	800a1ea <TIM_OC5_SetConfig+0x82>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a14      	ldr	r2, [pc, #80]	@ (800a238 <TIM_OC5_SetConfig+0xd0>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d109      	bne.n	800a1fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	621a      	str	r2, [r3, #32]
}
 800a218:	bf00      	nop
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	40012c00 	.word	0x40012c00
 800a228:	40013400 	.word	0x40013400
 800a22c:	40014000 	.word	0x40014000
 800a230:	40014400 	.word	0x40014400
 800a234:	40014800 	.word	0x40014800
 800a238:	40015000 	.word	0x40015000

0800a23c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a26a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	051b      	lsls	r3, r3, #20
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a1a      	ldr	r2, [pc, #104]	@ (800a2fc <TIM_OC6_SetConfig+0xc0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d013      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x84>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a19      	ldr	r2, [pc, #100]	@ (800a300 <TIM_OC6_SetConfig+0xc4>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00f      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x84>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a18      	ldr	r2, [pc, #96]	@ (800a304 <TIM_OC6_SetConfig+0xc8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00b      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x84>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	@ (800a308 <TIM_OC6_SetConfig+0xcc>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d007      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x84>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a16      	ldr	r2, [pc, #88]	@ (800a30c <TIM_OC6_SetConfig+0xd0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x84>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <TIM_OC6_SetConfig+0xd4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d109      	bne.n	800a2d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	029b      	lsls	r3, r3, #10
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	621a      	str	r2, [r3, #32]
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40012c00 	.word	0x40012c00
 800a300:	40013400 	.word	0x40013400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800
 800a310:	40015000 	.word	0x40015000

0800a314 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f023 0201 	bic.w	r2, r3, #1
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4a28      	ldr	r2, [pc, #160]	@ (800a3e0 <TIM_TI1_SetConfig+0xcc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d01b      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a348:	d017      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4a25      	ldr	r2, [pc, #148]	@ (800a3e4 <TIM_TI1_SetConfig+0xd0>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d013      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4a24      	ldr	r2, [pc, #144]	@ (800a3e8 <TIM_TI1_SetConfig+0xd4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00f      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4a23      	ldr	r2, [pc, #140]	@ (800a3ec <TIM_TI1_SetConfig+0xd8>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00b      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4a22      	ldr	r2, [pc, #136]	@ (800a3f0 <TIM_TI1_SetConfig+0xdc>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d007      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4a21      	ldr	r2, [pc, #132]	@ (800a3f4 <TIM_TI1_SetConfig+0xe0>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d003      	beq.n	800a37a <TIM_TI1_SetConfig+0x66>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4a20      	ldr	r2, [pc, #128]	@ (800a3f8 <TIM_TI1_SetConfig+0xe4>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d101      	bne.n	800a37e <TIM_TI1_SetConfig+0x6a>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <TIM_TI1_SetConfig+0x6c>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d008      	beq.n	800a396 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0303 	bic.w	r3, r3, #3
 800a38a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e003      	b.n	800a39e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f023 030a 	bic.w	r3, r3, #10
 800a3b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f003 030a 	and.w	r3, r3, #10
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40012c00 	.word	0x40012c00
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40013400 	.word	0x40013400
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	40015000 	.word	0x40015000

0800a3fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	f023 0201 	bic.w	r2, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f023 030a 	bic.w	r3, r3, #10
 800a438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4313      	orrs	r3, r2
 800a440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	621a      	str	r2, [r3, #32]
}
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b087      	sub	sp, #28
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	f023 0210 	bic.w	r2, r3, #16
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	031b      	lsls	r3, r3, #12
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a4ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	621a      	str	r2, [r3, #32]
}
 800a4c8:	bf00      	nop
 800a4ca:	371c      	adds	r7, #28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f023 0210 	bic.w	r2, r3, #16
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	031b      	lsls	r3, r3, #12
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a510:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	4313      	orrs	r3, r2
 800a51a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	621a      	str	r2, [r3, #32]
}
 800a528:	bf00      	nop
 800a52a:	371c      	adds	r7, #28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a570:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	011b      	lsls	r3, r3, #4
 800a576:	b2db      	uxtb	r3, r3
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a584:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	021b      	lsls	r3, r3, #8
 800a58a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	4313      	orrs	r3, r2
 800a592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	621a      	str	r2, [r3, #32]
}
 800a5a0:	bf00      	nop
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	031b      	lsls	r3, r3, #12
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a5fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	031b      	lsls	r3, r3, #12
 800a604:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a63c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	f043 0307 	orr.w	r3, r3, #7
 800a64c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	609a      	str	r2, [r3, #8]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a660:	b480      	push	{r7}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a67a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	021a      	lsls	r2, r3, #8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	431a      	orrs	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4313      	orrs	r3, r2
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	371c      	adds	r7, #28
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1a      	ldr	r2, [r3, #32]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1a      	ldr	r2, [r3, #32]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f003 031f 	and.w	r3, r3, #31
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	621a      	str	r2, [r3, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a700:	2302      	movs	r3, #2
 800a702:	e074      	b.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a34      	ldr	r2, [pc, #208]	@ (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d009      	beq.n	800a742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a33      	ldr	r2, [pc, #204]	@ (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d004      	beq.n	800a742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a31      	ldr	r2, [pc, #196]	@ (800a804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d108      	bne.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a748:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a75e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a21      	ldr	r2, [pc, #132]	@ (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d022      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a784:	d01d      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a1f      	ldr	r2, [pc, #124]	@ (800a808 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d018      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1d      	ldr	r2, [pc, #116]	@ (800a80c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d013      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1c      	ldr	r2, [pc, #112]	@ (800a810 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00e      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a15      	ldr	r2, [pc, #84]	@ (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d009      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a18      	ldr	r2, [pc, #96]	@ (800a814 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d004      	beq.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a11      	ldr	r2, [pc, #68]	@ (800a804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10c      	bne.n	800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40012c00 	.word	0x40012c00
 800a800:	40013400 	.word	0x40013400
 800a804:	40015000 	.word	0x40015000
 800a808:	40000400 	.word	0x40000400
 800a80c:	40000800 	.word	0x40000800
 800a810:	40000c00 	.word	0x40000c00
 800a814:	40014000 	.word	0x40014000

0800a818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a830:	2302      	movs	r3, #2
 800a832:	e078      	b.n	800a926 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4313      	orrs	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1c      	ldr	r2, [pc, #112]	@ (800a934 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d009      	beq.n	800a8da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a938 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d004      	beq.n	800a8da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a19      	ldr	r2, [pc, #100]	@ (800a93c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d11c      	bne.n	800a914 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e4:	051b      	lsls	r3, r3, #20
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	40012c00 	.word	0x40012c00
 800a938:	40013400 	.word	0x40013400
 800a93c:	40015000 	.word	0x40015000

0800a940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e042      	b.n	800aa64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7f8 fe6f 	bl	80036d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2224      	movs	r2, #36	@ 0x24
 800a9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f022 0201 	bic.w	r2, r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb24 	bl	800b064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f825 	bl	800aa6c <UART_SetConfig>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e01b      	b.n	800aa64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0201 	orr.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fba3 	bl	800b1a8 <UART_CheckIdleState>
 800aa62:	4603      	mov	r3, r0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa70:	b08c      	sub	sp, #48	@ 0x30
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	689a      	ldr	r2, [r3, #8]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	431a      	orrs	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4baa      	ldr	r3, [pc, #680]	@ (800ad44 <UART_SetConfig+0x2d8>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a9f      	ldr	r2, [pc, #636]	@ (800ad48 <UART_SetConfig+0x2dc>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aad4:	4313      	orrs	r3, r2
 800aad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aae2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf6:	f023 010f 	bic.w	r1, r3, #15
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a90      	ldr	r2, [pc, #576]	@ (800ad4c <UART_SetConfig+0x2e0>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d125      	bne.n	800ab5c <UART_SetConfig+0xf0>
 800ab10:	4b8f      	ldr	r3, [pc, #572]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d81a      	bhi.n	800ab54 <UART_SetConfig+0xe8>
 800ab1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <UART_SetConfig+0xb8>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab35 	.word	0x0800ab35
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	0800ab3d 	.word	0x0800ab3d
 800ab30:	0800ab4d 	.word	0x0800ab4d
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3a:	e116      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab42:	e112      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ab44:	2304      	movs	r3, #4
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab4a:	e10e      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab52:	e10a      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ab54:	2310      	movs	r3, #16
 800ab56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab5a:	e106      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a7c      	ldr	r2, [pc, #496]	@ (800ad54 <UART_SetConfig+0x2e8>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d138      	bne.n	800abd8 <UART_SetConfig+0x16c>
 800ab66:	4b7a      	ldr	r3, [pc, #488]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab6c:	f003 030c 	and.w	r3, r3, #12
 800ab70:	2b0c      	cmp	r3, #12
 800ab72:	d82d      	bhi.n	800abd0 <UART_SetConfig+0x164>
 800ab74:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0x110>)
 800ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7a:	bf00      	nop
 800ab7c:	0800abb1 	.word	0x0800abb1
 800ab80:	0800abd1 	.word	0x0800abd1
 800ab84:	0800abd1 	.word	0x0800abd1
 800ab88:	0800abd1 	.word	0x0800abd1
 800ab8c:	0800abc1 	.word	0x0800abc1
 800ab90:	0800abd1 	.word	0x0800abd1
 800ab94:	0800abd1 	.word	0x0800abd1
 800ab98:	0800abd1 	.word	0x0800abd1
 800ab9c:	0800abb9 	.word	0x0800abb9
 800aba0:	0800abd1 	.word	0x0800abd1
 800aba4:	0800abd1 	.word	0x0800abd1
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abc9 	.word	0x0800abc9
 800abb0:	2300      	movs	r3, #0
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb6:	e0d8      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800abb8:	2302      	movs	r3, #2
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e0d4      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800abc0:	2304      	movs	r3, #4
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc6:	e0d0      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800abc8:	2308      	movs	r3, #8
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abce:	e0cc      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800abd0:	2310      	movs	r3, #16
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd6:	e0c8      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a5e      	ldr	r2, [pc, #376]	@ (800ad58 <UART_SetConfig+0x2ec>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d125      	bne.n	800ac2e <UART_SetConfig+0x1c2>
 800abe2:	4b5b      	ldr	r3, [pc, #364]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800abe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800abec:	2b30      	cmp	r3, #48	@ 0x30
 800abee:	d016      	beq.n	800ac1e <UART_SetConfig+0x1b2>
 800abf0:	2b30      	cmp	r3, #48	@ 0x30
 800abf2:	d818      	bhi.n	800ac26 <UART_SetConfig+0x1ba>
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d00a      	beq.n	800ac0e <UART_SetConfig+0x1a2>
 800abf8:	2b20      	cmp	r3, #32
 800abfa:	d814      	bhi.n	800ac26 <UART_SetConfig+0x1ba>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <UART_SetConfig+0x19a>
 800ac00:	2b10      	cmp	r3, #16
 800ac02:	d008      	beq.n	800ac16 <UART_SetConfig+0x1aa>
 800ac04:	e00f      	b.n	800ac26 <UART_SetConfig+0x1ba>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0c:	e0ad      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac14:	e0a9      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac16:	2304      	movs	r3, #4
 800ac18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1c:	e0a5      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac1e:	2308      	movs	r3, #8
 800ac20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac24:	e0a1      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac26:	2310      	movs	r3, #16
 800ac28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2c:	e09d      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a4a      	ldr	r2, [pc, #296]	@ (800ad5c <UART_SetConfig+0x2f0>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d125      	bne.n	800ac84 <UART_SetConfig+0x218>
 800ac38:	4b45      	ldr	r3, [pc, #276]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800ac3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac44:	d016      	beq.n	800ac74 <UART_SetConfig+0x208>
 800ac46:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac48:	d818      	bhi.n	800ac7c <UART_SetConfig+0x210>
 800ac4a:	2b80      	cmp	r3, #128	@ 0x80
 800ac4c:	d00a      	beq.n	800ac64 <UART_SetConfig+0x1f8>
 800ac4e:	2b80      	cmp	r3, #128	@ 0x80
 800ac50:	d814      	bhi.n	800ac7c <UART_SetConfig+0x210>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <UART_SetConfig+0x1f0>
 800ac56:	2b40      	cmp	r3, #64	@ 0x40
 800ac58:	d008      	beq.n	800ac6c <UART_SetConfig+0x200>
 800ac5a:	e00f      	b.n	800ac7c <UART_SetConfig+0x210>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac62:	e082      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac64:	2302      	movs	r3, #2
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6a:	e07e      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac6c:	2304      	movs	r3, #4
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac72:	e07a      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac74:	2308      	movs	r3, #8
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7a:	e076      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac82:	e072      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a35      	ldr	r2, [pc, #212]	@ (800ad60 <UART_SetConfig+0x2f4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d12a      	bne.n	800ace4 <UART_SetConfig+0x278>
 800ac8e:	4b30      	ldr	r3, [pc, #192]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800ac90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac9c:	d01a      	beq.n	800acd4 <UART_SetConfig+0x268>
 800ac9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aca2:	d81b      	bhi.n	800acdc <UART_SetConfig+0x270>
 800aca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aca8:	d00c      	beq.n	800acc4 <UART_SetConfig+0x258>
 800acaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acae:	d815      	bhi.n	800acdc <UART_SetConfig+0x270>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d003      	beq.n	800acbc <UART_SetConfig+0x250>
 800acb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acb8:	d008      	beq.n	800accc <UART_SetConfig+0x260>
 800acba:	e00f      	b.n	800acdc <UART_SetConfig+0x270>
 800acbc:	2300      	movs	r3, #0
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	e052      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800acc4:	2302      	movs	r3, #2
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acca:	e04e      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800accc:	2304      	movs	r3, #4
 800acce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd2:	e04a      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800acd4:	2308      	movs	r3, #8
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acda:	e046      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800acdc:	2310      	movs	r3, #16
 800acde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ace2:	e042      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a17      	ldr	r2, [pc, #92]	@ (800ad48 <UART_SetConfig+0x2dc>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d13a      	bne.n	800ad64 <UART_SetConfig+0x2f8>
 800acee:	4b18      	ldr	r3, [pc, #96]	@ (800ad50 <UART_SetConfig+0x2e4>)
 800acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acfc:	d01a      	beq.n	800ad34 <UART_SetConfig+0x2c8>
 800acfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad02:	d81b      	bhi.n	800ad3c <UART_SetConfig+0x2d0>
 800ad04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad08:	d00c      	beq.n	800ad24 <UART_SetConfig+0x2b8>
 800ad0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad0e:	d815      	bhi.n	800ad3c <UART_SetConfig+0x2d0>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <UART_SetConfig+0x2b0>
 800ad14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad18:	d008      	beq.n	800ad2c <UART_SetConfig+0x2c0>
 800ad1a:	e00f      	b.n	800ad3c <UART_SetConfig+0x2d0>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	e022      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ad24:	2302      	movs	r3, #2
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2a:	e01e      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad32:	e01a      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ad34:	2308      	movs	r3, #8
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e016      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad42:	e012      	b.n	800ad6a <UART_SetConfig+0x2fe>
 800ad44:	cfff69f3 	.word	0xcfff69f3
 800ad48:	40008000 	.word	0x40008000
 800ad4c:	40013800 	.word	0x40013800
 800ad50:	40021000 	.word	0x40021000
 800ad54:	40004400 	.word	0x40004400
 800ad58:	40004800 	.word	0x40004800
 800ad5c:	40004c00 	.word	0x40004c00
 800ad60:	40005000 	.word	0x40005000
 800ad64:	2310      	movs	r3, #16
 800ad66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4aae      	ldr	r2, [pc, #696]	@ (800b028 <UART_SetConfig+0x5bc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	f040 8097 	bne.w	800aea4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	d823      	bhi.n	800adc6 <UART_SetConfig+0x35a>
 800ad7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad84 <UART_SetConfig+0x318>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ada9 	.word	0x0800ada9
 800ad88:	0800adc7 	.word	0x0800adc7
 800ad8c:	0800adb1 	.word	0x0800adb1
 800ad90:	0800adc7 	.word	0x0800adc7
 800ad94:	0800adb7 	.word	0x0800adb7
 800ad98:	0800adc7 	.word	0x0800adc7
 800ad9c:	0800adc7 	.word	0x0800adc7
 800ada0:	0800adc7 	.word	0x0800adc7
 800ada4:	0800adbf 	.word	0x0800adbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ada8:	f7fd fbec 	bl	8008584 <HAL_RCC_GetPCLK1Freq>
 800adac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adae:	e010      	b.n	800add2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adb0:	4b9e      	ldr	r3, [pc, #632]	@ (800b02c <UART_SetConfig+0x5c0>)
 800adb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adb4:	e00d      	b.n	800add2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adb6:	f7fd fb77 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800adba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adbc:	e009      	b.n	800add2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adc4:	e005      	b.n	800add2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800add0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 8130 	beq.w	800b03a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adde:	4a94      	ldr	r2, [pc, #592]	@ (800b030 <UART_SetConfig+0x5c4>)
 800ade0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ade4:	461a      	mov	r2, r3
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	4613      	mov	r3, r2
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	4413      	add	r3, r2
 800adf8:	69ba      	ldr	r2, [r7, #24]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d305      	bcc.n	800ae0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d903      	bls.n	800ae12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae10:	e113      	b.n	800b03a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	2200      	movs	r2, #0
 800ae16:	60bb      	str	r3, [r7, #8]
 800ae18:	60fa      	str	r2, [r7, #12]
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1e:	4a84      	ldr	r2, [pc, #528]	@ (800b030 <UART_SetConfig+0x5c4>)
 800ae20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	2200      	movs	r2, #0
 800ae28:	603b      	str	r3, [r7, #0]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae34:	f7f5 fe0e 	bl	8000a54 <__aeabi_uldivmod>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4619      	mov	r1, r3
 800ae40:	f04f 0200 	mov.w	r2, #0
 800ae44:	f04f 0300 	mov.w	r3, #0
 800ae48:	020b      	lsls	r3, r1, #8
 800ae4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae4e:	0202      	lsls	r2, r0, #8
 800ae50:	6979      	ldr	r1, [r7, #20]
 800ae52:	6849      	ldr	r1, [r1, #4]
 800ae54:	0849      	lsrs	r1, r1, #1
 800ae56:	2000      	movs	r0, #0
 800ae58:	460c      	mov	r4, r1
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	eb12 0804 	adds.w	r8, r2, r4
 800ae60:	eb43 0905 	adc.w	r9, r3, r5
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	469a      	mov	sl, r3
 800ae6c:	4693      	mov	fp, r2
 800ae6e:	4652      	mov	r2, sl
 800ae70:	465b      	mov	r3, fp
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 fded 	bl	8000a54 <__aeabi_uldivmod>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4613      	mov	r3, r2
 800ae80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae88:	d308      	bcc.n	800ae9c <UART_SetConfig+0x430>
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae90:	d204      	bcs.n	800ae9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6a3a      	ldr	r2, [r7, #32]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	e0ce      	b.n	800b03a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aea2:	e0ca      	b.n	800b03a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeac:	d166      	bne.n	800af7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aeae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d827      	bhi.n	800af06 <UART_SetConfig+0x49a>
 800aeb6:	a201      	add	r2, pc, #4	@ (adr r2, 800aebc <UART_SetConfig+0x450>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800aee1 	.word	0x0800aee1
 800aec0:	0800aee9 	.word	0x0800aee9
 800aec4:	0800aef1 	.word	0x0800aef1
 800aec8:	0800af07 	.word	0x0800af07
 800aecc:	0800aef7 	.word	0x0800aef7
 800aed0:	0800af07 	.word	0x0800af07
 800aed4:	0800af07 	.word	0x0800af07
 800aed8:	0800af07 	.word	0x0800af07
 800aedc:	0800aeff 	.word	0x0800aeff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee0:	f7fd fb50 	bl	8008584 <HAL_RCC_GetPCLK1Freq>
 800aee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aee6:	e014      	b.n	800af12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee8:	f7fd fb62 	bl	80085b0 <HAL_RCC_GetPCLK2Freq>
 800aeec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aeee:	e010      	b.n	800af12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aef0:	4b4e      	ldr	r3, [pc, #312]	@ (800b02c <UART_SetConfig+0x5c0>)
 800aef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aef4:	e00d      	b.n	800af12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef6:	f7fd fad7 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800aefa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aefc:	e009      	b.n	800af12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aefe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af04:	e005      	b.n	800af12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8090 	beq.w	800b03a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1e:	4a44      	ldr	r2, [pc, #272]	@ (800b030 <UART_SetConfig+0x5c4>)
 800af20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af24:	461a      	mov	r2, r3
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	fbb3 f3f2 	udiv	r3, r3, r2
 800af2c:	005a      	lsls	r2, r3, #1
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	085b      	lsrs	r3, r3, #1
 800af34:	441a      	add	r2, r3
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	2b0f      	cmp	r3, #15
 800af44:	d916      	bls.n	800af74 <UART_SetConfig+0x508>
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af4c:	d212      	bcs.n	800af74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	b29b      	uxth	r3, r3
 800af52:	f023 030f 	bic.w	r3, r3, #15
 800af56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	b29a      	uxth	r2, r3
 800af64:	8bfb      	ldrh	r3, [r7, #30]
 800af66:	4313      	orrs	r3, r2
 800af68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	8bfa      	ldrh	r2, [r7, #30]
 800af70:	60da      	str	r2, [r3, #12]
 800af72:	e062      	b.n	800b03a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af7a:	e05e      	b.n	800b03a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af80:	2b08      	cmp	r3, #8
 800af82:	d828      	bhi.n	800afd6 <UART_SetConfig+0x56a>
 800af84:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <UART_SetConfig+0x520>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afc1 	.word	0x0800afc1
 800af98:	0800afd7 	.word	0x0800afd7
 800af9c:	0800afc7 	.word	0x0800afc7
 800afa0:	0800afd7 	.word	0x0800afd7
 800afa4:	0800afd7 	.word	0x0800afd7
 800afa8:	0800afd7 	.word	0x0800afd7
 800afac:	0800afcf 	.word	0x0800afcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afb0:	f7fd fae8 	bl	8008584 <HAL_RCC_GetPCLK1Freq>
 800afb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afb6:	e014      	b.n	800afe2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afb8:	f7fd fafa 	bl	80085b0 <HAL_RCC_GetPCLK2Freq>
 800afbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afbe:	e010      	b.n	800afe2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afc0:	4b1a      	ldr	r3, [pc, #104]	@ (800b02c <UART_SetConfig+0x5c0>)
 800afc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afc4:	e00d      	b.n	800afe2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afc6:	f7fd fa6f 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800afca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afcc:	e009      	b.n	800afe2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afd4:	e005      	b.n	800afe2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afe0:	bf00      	nop
    }

    if (pclk != 0U)
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d028      	beq.n	800b03a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afec:	4a10      	ldr	r2, [pc, #64]	@ (800b030 <UART_SetConfig+0x5c4>)
 800afee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff6:	fbb3 f2f2 	udiv	r2, r3, r2
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	441a      	add	r2, r3
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	2b0f      	cmp	r3, #15
 800b010:	d910      	bls.n	800b034 <UART_SetConfig+0x5c8>
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b018:	d20c      	bcs.n	800b034 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60da      	str	r2, [r3, #12]
 800b024:	e009      	b.n	800b03a <UART_SetConfig+0x5ce>
 800b026:	bf00      	nop
 800b028:	40008000 	.word	0x40008000
 800b02c:	00f42400 	.word	0x00f42400
 800b030:	0800b744 	.word	0x0800b744
      }
      else
      {
        ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2201      	movs	r2, #1
 800b046:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b056:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3730      	adds	r7, #48	@ 0x30
 800b05e:	46bd      	mov	sp, r7
 800b060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f8:	f003 0310 	and.w	r3, r3, #16
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11a:	f003 0320 	and.w	r3, r3, #32
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00a      	beq.n	800b138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01a      	beq.n	800b17a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b15e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b162:	d10a      	bne.n	800b17a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	605a      	str	r2, [r3, #4]
  }
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b098      	sub	sp, #96	@ 0x60
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1b8:	f7f8 fb72 	bl	80038a0 <HAL_GetTick>
 800b1bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d12f      	bne.n	800b22c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f88e 	bl	800b2fc <UART_WaitOnFlagUntilTimeout>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d022      	beq.n	800b22c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ee:	e853 3f00 	ldrex	r3, [r3]
 800b1f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	461a      	mov	r2, r3
 800b202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b204:	647b      	str	r3, [r7, #68]	@ 0x44
 800b206:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b20a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e6      	bne.n	800b1e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2220      	movs	r2, #32
 800b21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e063      	b.n	800b2f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b04      	cmp	r3, #4
 800b238:	d149      	bne.n	800b2ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b242:	2200      	movs	r2, #0
 800b244:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f857 	bl	800b2fc <UART_WaitOnFlagUntilTimeout>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d03c      	beq.n	800b2ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	623b      	str	r3, [r7, #32]
   return(result);
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b272:	633b      	str	r3, [r7, #48]	@ 0x30
 800b274:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	60fb      	str	r3, [r7, #12]
   return(result);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f023 0301 	bic.w	r3, r3, #1
 800b29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2a6:	61fa      	str	r2, [r7, #28]
 800b2a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	69b9      	ldr	r1, [r7, #24]
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e5      	bne.n	800b286 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e012      	b.n	800b2f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3758      	adds	r7, #88	@ 0x58
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	603b      	str	r3, [r7, #0]
 800b308:	4613      	mov	r3, r2
 800b30a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b30c:	e04f      	b.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b314:	d04b      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b316:	f7f8 fac3 	bl	80038a0 <HAL_GetTick>
 800b31a:	4602      	mov	r2, r0
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	429a      	cmp	r2, r3
 800b324:	d302      	bcc.n	800b32c <UART_WaitOnFlagUntilTimeout+0x30>
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e04e      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d037      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b80      	cmp	r3, #128	@ 0x80
 800b342:	d034      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b40      	cmp	r3, #64	@ 0x40
 800b348:	d031      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b08      	cmp	r3, #8
 800b356:	d110      	bne.n	800b37a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2208      	movs	r2, #8
 800b35e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 f838 	bl	800b3d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2208      	movs	r2, #8
 800b36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e029      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b388:	d111      	bne.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f81e 	bl	800b3d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2220      	movs	r2, #32
 800b39e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e00f      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69da      	ldr	r2, [r3, #28]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	bf0c      	ite	eq
 800b3be:	2301      	moveq	r3, #1
 800b3c0:	2300      	movne	r3, #0
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d0a0      	beq.n	800b30e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b095      	sub	sp, #84	@ 0x54
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e6      	bne.n	800b3de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b434:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b43a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e3      	bne.n	800b410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d118      	bne.n	800b482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f023 0310 	bic.w	r3, r3, #16
 800b464:	647b      	str	r3, [r7, #68]	@ 0x44
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b46e:	61bb      	str	r3, [r7, #24]
 800b470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	6979      	ldr	r1, [r7, #20]
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	613b      	str	r3, [r7, #16]
   return(result);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e6      	bne.n	800b450 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b496:	bf00      	nop
 800b498:	3754      	adds	r7, #84	@ 0x54
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e027      	b.n	800b508 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2224      	movs	r2, #36	@ 0x24
 800b4c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0201 	bic.w	r2, r2, #1
 800b4de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b528:	2302      	movs	r3, #2
 800b52a:	e02d      	b.n	800b588 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2224      	movs	r2, #36	@ 0x24
 800b538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 0201 	bic.w	r2, r2, #1
 800b552:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f84f 	bl	800b60c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2220      	movs	r2, #32
 800b57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d101      	bne.n	800b5a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	e02d      	b.n	800b604 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2224      	movs	r2, #36	@ 0x24
 800b5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0201 	bic.w	r2, r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f811 	bl	800b60c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d108      	bne.n	800b62e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b62c:	e031      	b.n	800b692 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b62e:	2308      	movs	r3, #8
 800b630:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b632:	2308      	movs	r3, #8
 800b634:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	0e5b      	lsrs	r3, r3, #25
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	0f5b      	lsrs	r3, r3, #29
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 0307 	and.w	r3, r3, #7
 800b654:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	7b3a      	ldrb	r2, [r7, #12]
 800b65a:	4911      	ldr	r1, [pc, #68]	@ (800b6a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b65c:	5c8a      	ldrb	r2, [r1, r2]
 800b65e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b662:	7b3a      	ldrb	r2, [r7, #12]
 800b664:	490f      	ldr	r1, [pc, #60]	@ (800b6a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b666:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b668:	fb93 f3f2 	sdiv	r3, r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	7b7a      	ldrb	r2, [r7, #13]
 800b678:	4909      	ldr	r1, [pc, #36]	@ (800b6a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b67a:	5c8a      	ldrb	r2, [r1, r2]
 800b67c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b680:	7b7a      	ldrb	r2, [r7, #13]
 800b682:	4908      	ldr	r1, [pc, #32]	@ (800b6a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b684:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b686:	fb93 f3f2 	sdiv	r3, r3, r2
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	0800b75c 	.word	0x0800b75c
 800b6a4:	0800b764 	.word	0x0800b764

0800b6a8 <memset>:
 800b6a8:	4402      	add	r2, r0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d100      	bne.n	800b6b2 <memset+0xa>
 800b6b0:	4770      	bx	lr
 800b6b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6b6:	e7f9      	b.n	800b6ac <memset+0x4>

0800b6b8 <__libc_init_array>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b6f0 <__libc_init_array+0x38>)
 800b6bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b6f4 <__libc_init_array+0x3c>)
 800b6be:	1b64      	subs	r4, r4, r5
 800b6c0:	10a4      	asrs	r4, r4, #2
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	42a6      	cmp	r6, r4
 800b6c6:	d109      	bne.n	800b6dc <__libc_init_array+0x24>
 800b6c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b6f8 <__libc_init_array+0x40>)
 800b6ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b6fc <__libc_init_array+0x44>)
 800b6cc:	f000 f818 	bl	800b700 <_init>
 800b6d0:	1b64      	subs	r4, r4, r5
 800b6d2:	10a4      	asrs	r4, r4, #2
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	42a6      	cmp	r6, r4
 800b6d8:	d105      	bne.n	800b6e6 <__libc_init_array+0x2e>
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e0:	4798      	blx	r3
 800b6e2:	3601      	adds	r6, #1
 800b6e4:	e7ee      	b.n	800b6c4 <__libc_init_array+0xc>
 800b6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ea:	4798      	blx	r3
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	e7f2      	b.n	800b6d6 <__libc_init_array+0x1e>
 800b6f0:	0800b774 	.word	0x0800b774
 800b6f4:	0800b774 	.word	0x0800b774
 800b6f8:	0800b774 	.word	0x0800b774
 800b6fc:	0800b778 	.word	0x0800b778

0800b700 <_init>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	bf00      	nop
 800b704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b706:	bc08      	pop	{r3}
 800b708:	469e      	mov	lr, r3
 800b70a:	4770      	bx	lr

0800b70c <_fini>:
 800b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70e:	bf00      	nop
 800b710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b712:	bc08      	pop	{r3}
 800b714:	469e      	mov	lr, r3
 800b716:	4770      	bx	lr
